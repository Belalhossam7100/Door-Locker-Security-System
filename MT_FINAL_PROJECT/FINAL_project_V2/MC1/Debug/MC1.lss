
MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000379e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007a  00800060  0000379e  00003832  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  008000da  008000da  000038ac  2**0
                  ALLOC
  3 .stab         00003120  00000000  00000000  000038ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001448  00000000  00000000  000069cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000080c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000abf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b9a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bb08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bd95  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c563  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 67 09 	jmp	0x12ce	; 0x12ce <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 30 09 	jmp	0x1260	; 0x1260 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e9       	ldi	r30, 0x9E	; 158
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3d       	cpi	r26, 0xDA	; 218
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa ed       	ldi	r26, 0xDA	; 218
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3f       	cpi	r26, 0xF0	; 240
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0a 09 	call	0x1214	; 0x1214 <main>
      8a:	0c 94 cd 1b 	jmp	0x379a	; 0x379a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 51 1b 	jmp	0x36a2	; 0x36a2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 ed       	ldi	r26, 0xD1	; 209
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6d 1b 	jmp	0x36da	; 0x36da <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5d 1b 	jmp	0x36ba	; 0x36ba <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 79 1b 	jmp	0x36f2	; 0x36f2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5d 1b 	jmp	0x36ba	; 0x36ba <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 79 1b 	jmp	0x36f2	; 0x36f2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 51 1b 	jmp	0x36a2	; 0x36a2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 ed       	ldi	r24, 0xD1	; 209
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6d 1b 	jmp	0x36da	; 0x36da <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5d 1b 	jmp	0x36ba	; 0x36ba <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 79 1b 	jmp	0x36f2	; 0x36f2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 5d 1b 	jmp	0x36ba	; 0x36ba <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 79 1b 	jmp	0x36f2	; 0x36f2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 5d 1b 	jmp	0x36ba	; 0x36ba <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 79 1b 	jmp	0x36f2	; 0x36f2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 61 1b 	jmp	0x36c2	; 0x36c2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 7d 1b 	jmp	0x36fa	; 0x36fa <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <create_password>:
uint8 MC2_response_on_creating_pass;
uint8 MC2_response_change_pass;
uint8 MC2_response_door;
uint8 Error_counter;
/******************************Functions**************************************/
void create_password(uint8 *sys_password){/**step1**/
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	6c 97       	sbiw	r28, 0x1c	; 28
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
     b5e:	9c 8f       	std	Y+28, r25	; 0x1c
     b60:	8b 8f       	std	Y+27, r24	; 0x1b
	uint8 re_entered_password[password_length];//the password
	uint8 retry_pass[password_length];
	uint8 the_password_is_created;
	uint8 re_enter_counter;

	Ask_user_to_enter_pass(sys_password);
     b62:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b64:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b66:	0e 94 ba 06 	call	0xd74	; 0xd74 <Ask_user_to_enter_pass>

	/********re-enter create pass LCD*******/
		/* re-entering the password */
	LCD_sendCommand(LCD_CLEAR_COMMAND);
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_sendCommand>
	LCD_displayString("plz re-enter ");
     b70:	80 e6       	ldi	r24, 0x60	; 96
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	0e 94 a1 18 	call	0x3142	; 0x3142 <LCD_displayString>
	LCD_moveCursor(1,0);
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	0e 94 ca 18 	call	0x3194	; 0x3194 <LCD_moveCursor>
	LCD_displayString("same Pass:");
     b80:	8e e6       	ldi	r24, 0x6E	; 110
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	0e 94 a1 18 	call	0x3142	; 0x3142 <LCD_displayString>
	/**************************************/
	/********re-enter create pass KEYPAD*******/
	for(re_enter_counter=0;re_enter_counter<(password_length);re_enter_counter++)
     b88:	1f 86       	std	Y+15, r1	; 0x0f
     b8a:	84 c0       	rjmp	.+264    	; 0xc94 <create_password+0x14e>
	{
		re_entered_password[re_enter_counter] = KEYPAD_getPressedKey();//take the password from the keypad
     b8c:	8f 85       	ldd	r24, Y+15	; 0x0f
     b8e:	08 2f       	mov	r16, r24
     b90:	10 e0       	ldi	r17, 0x00	; 0
     b92:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <KEYPAD_getPressedKey>
     b96:	28 2f       	mov	r18, r24
     b98:	ce 01       	movw	r24, r28
     b9a:	41 96       	adiw	r24, 0x11	; 17
     b9c:	fc 01       	movw	r30, r24
     b9e:	e0 0f       	add	r30, r16
     ba0:	f1 1f       	adc	r31, r17
     ba2:	20 83       	st	Z, r18
		LCD_displayCharacter('*');//Display * in the screen for each number
     ba4:	8a e2       	ldi	r24, 0x2A	; 42
     ba6:	0e 94 26 14 	call	0x284c	; 0x284c <LCD_displayCharacter>
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	a8 e4       	ldi	r26, 0x48	; 72
     bb0:	b3 e4       	ldi	r27, 0x43	; 67
     bb2:	8b 87       	std	Y+11, r24	; 0x0b
     bb4:	9c 87       	std	Y+12, r25	; 0x0c
     bb6:	ad 87       	std	Y+13, r26	; 0x0d
     bb8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bba:	6b 85       	ldd	r22, Y+11	; 0x0b
     bbc:	7c 85       	ldd	r23, Y+12	; 0x0c
     bbe:	8d 85       	ldd	r24, Y+13	; 0x0d
     bc0:	9e 85       	ldd	r25, Y+14	; 0x0e
     bc2:	20 e0       	ldi	r18, 0x00	; 0
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	4a ef       	ldi	r20, 0xFA	; 250
     bc8:	54 e4       	ldi	r21, 0x44	; 68
     bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bce:	dc 01       	movw	r26, r24
     bd0:	cb 01       	movw	r24, r22
     bd2:	8f 83       	std	Y+7, r24	; 0x07
     bd4:	98 87       	std	Y+8, r25	; 0x08
     bd6:	a9 87       	std	Y+9, r26	; 0x09
     bd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bda:	6f 81       	ldd	r22, Y+7	; 0x07
     bdc:	78 85       	ldd	r23, Y+8	; 0x08
     bde:	89 85       	ldd	r24, Y+9	; 0x09
     be0:	9a 85       	ldd	r25, Y+10	; 0x0a
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	40 e8       	ldi	r20, 0x80	; 128
     be8:	5f e3       	ldi	r21, 0x3F	; 63
     bea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bee:	88 23       	and	r24, r24
     bf0:	2c f4       	brge	.+10     	; 0xbfc <create_password+0xb6>
		__ticks = 1;
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	9e 83       	std	Y+6, r25	; 0x06
     bf8:	8d 83       	std	Y+5, r24	; 0x05
     bfa:	3f c0       	rjmp	.+126    	; 0xc7a <create_password+0x134>
	else if (__tmp > 65535)
     bfc:	6f 81       	ldd	r22, Y+7	; 0x07
     bfe:	78 85       	ldd	r23, Y+8	; 0x08
     c00:	89 85       	ldd	r24, Y+9	; 0x09
     c02:	9a 85       	ldd	r25, Y+10	; 0x0a
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	3f ef       	ldi	r19, 0xFF	; 255
     c08:	4f e7       	ldi	r20, 0x7F	; 127
     c0a:	57 e4       	ldi	r21, 0x47	; 71
     c0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c10:	18 16       	cp	r1, r24
     c12:	4c f5       	brge	.+82     	; 0xc66 <create_password+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c14:	6b 85       	ldd	r22, Y+11	; 0x0b
     c16:	7c 85       	ldd	r23, Y+12	; 0x0c
     c18:	8d 85       	ldd	r24, Y+13	; 0x0d
     c1a:	9e 85       	ldd	r25, Y+14	; 0x0e
     c1c:	20 e0       	ldi	r18, 0x00	; 0
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	40 e2       	ldi	r20, 0x20	; 32
     c22:	51 e4       	ldi	r21, 0x41	; 65
     c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c28:	dc 01       	movw	r26, r24
     c2a:	cb 01       	movw	r24, r22
     c2c:	bc 01       	movw	r22, r24
     c2e:	cd 01       	movw	r24, r26
     c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c34:	dc 01       	movw	r26, r24
     c36:	cb 01       	movw	r24, r22
     c38:	9e 83       	std	Y+6, r25	; 0x06
     c3a:	8d 83       	std	Y+5, r24	; 0x05
     c3c:	0f c0       	rjmp	.+30     	; 0xc5c <create_password+0x116>
     c3e:	88 ec       	ldi	r24, 0xC8	; 200
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	9c 83       	std	Y+4, r25	; 0x04
     c44:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c46:	8b 81       	ldd	r24, Y+3	; 0x03
     c48:	9c 81       	ldd	r25, Y+4	; 0x04
     c4a:	01 97       	sbiw	r24, 0x01	; 1
     c4c:	f1 f7       	brne	.-4      	; 0xc4a <create_password+0x104>
     c4e:	9c 83       	std	Y+4, r25	; 0x04
     c50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c52:	8d 81       	ldd	r24, Y+5	; 0x05
     c54:	9e 81       	ldd	r25, Y+6	; 0x06
     c56:	01 97       	sbiw	r24, 0x01	; 1
     c58:	9e 83       	std	Y+6, r25	; 0x06
     c5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c5c:	8d 81       	ldd	r24, Y+5	; 0x05
     c5e:	9e 81       	ldd	r25, Y+6	; 0x06
     c60:	00 97       	sbiw	r24, 0x00	; 0
     c62:	69 f7       	brne	.-38     	; 0xc3e <create_password+0xf8>
     c64:	14 c0       	rjmp	.+40     	; 0xc8e <create_password+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c66:	6f 81       	ldd	r22, Y+7	; 0x07
     c68:	78 85       	ldd	r23, Y+8	; 0x08
     c6a:	89 85       	ldd	r24, Y+9	; 0x09
     c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c72:	dc 01       	movw	r26, r24
     c74:	cb 01       	movw	r24, r22
     c76:	9e 83       	std	Y+6, r25	; 0x06
     c78:	8d 83       	std	Y+5, r24	; 0x05
     c7a:	8d 81       	ldd	r24, Y+5	; 0x05
     c7c:	9e 81       	ldd	r25, Y+6	; 0x06
     c7e:	9a 83       	std	Y+2, r25	; 0x02
     c80:	89 83       	std	Y+1, r24	; 0x01
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	9a 81       	ldd	r25, Y+2	; 0x02
     c86:	01 97       	sbiw	r24, 0x01	; 1
     c88:	f1 f7       	brne	.-4      	; 0xc86 <create_password+0x140>
     c8a:	9a 83       	std	Y+2, r25	; 0x02
     c8c:	89 83       	std	Y+1, r24	; 0x01
	LCD_displayString("plz re-enter ");
	LCD_moveCursor(1,0);
	LCD_displayString("same Pass:");
	/**************************************/
	/********re-enter create pass KEYPAD*******/
	for(re_enter_counter=0;re_enter_counter<(password_length);re_enter_counter++)
     c8e:	8f 85       	ldd	r24, Y+15	; 0x0f
     c90:	8f 5f       	subi	r24, 0xFF	; 255
     c92:	8f 87       	std	Y+15, r24	; 0x0f
     c94:	8f 85       	ldd	r24, Y+15	; 0x0f
     c96:	85 30       	cpi	r24, 0x05	; 5
     c98:	08 f4       	brcc	.+2      	; 0xc9c <create_password+0x156>
     c9a:	78 cf       	rjmp	.-272    	; 0xb8c <create_password+0x46>
	{
		re_entered_password[re_enter_counter] = KEYPAD_getPressedKey();//take the password from the keypad
		LCD_displayCharacter('*');//Display * in the screen for each number
		_delay_ms(delay_for_display);//for display
	}
	while(KEYPAD_getPressedKey()!='=');//until enter key is pressed
     c9c:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <KEYPAD_getPressedKey>
     ca0:	8d 33       	cpi	r24, 0x3D	; 61
     ca2:	e1 f7       	brne	.-8      	; 0xc9c <create_password+0x156>
	/****************************************/
UART_sendByte(RENTERED_CREATED_PASS);/**first time :re*entered pass**/
     ca4:	81 e1       	ldi	r24, 0x11	; 17
     ca6:	0e 94 a9 1a 	call	0x3552	; 0x3552 <UART_sendByte>
for(re_enter_counter=0;re_enter_counter<(password_length);re_enter_counter++)
     caa:	1f 86       	std	Y+15, r1	; 0x0f
     cac:	11 c0       	rjmp	.+34     	; 0xcd0 <create_password+0x18a>
	{
	UART_sendByte(RENTERED_CREATED_PASS);/**first time :re*entered pass**/
     cae:	81 e1       	ldi	r24, 0x11	; 17
     cb0:	0e 94 a9 1a 	call	0x3552	; 0x3552 <UART_sendByte>
	UART_sendByte(re_entered_password[re_enter_counter]);//send to the Control_ECU through the UART
     cb4:	8f 85       	ldd	r24, Y+15	; 0x0f
     cb6:	28 2f       	mov	r18, r24
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	ce 01       	movw	r24, r28
     cbc:	41 96       	adiw	r24, 0x11	; 17
     cbe:	fc 01       	movw	r30, r24
     cc0:	e2 0f       	add	r30, r18
     cc2:	f3 1f       	adc	r31, r19
     cc4:	80 81       	ld	r24, Z
     cc6:	0e 94 a9 1a 	call	0x3552	; 0x3552 <UART_sendByte>
		_delay_ms(delay_for_display);//for display
	}
	while(KEYPAD_getPressedKey()!='=');//until enter key is pressed
	/****************************************/
UART_sendByte(RENTERED_CREATED_PASS);/**first time :re*entered pass**/
for(re_enter_counter=0;re_enter_counter<(password_length);re_enter_counter++)
     cca:	8f 85       	ldd	r24, Y+15	; 0x0f
     ccc:	8f 5f       	subi	r24, 0xFF	; 255
     cce:	8f 87       	std	Y+15, r24	; 0x0f
     cd0:	8f 85       	ldd	r24, Y+15	; 0x0f
     cd2:	85 30       	cpi	r24, 0x05	; 5
     cd4:	60 f3       	brcs	.-40     	; 0xcae <create_password+0x168>
	UART_sendByte(re_entered_password[re_enter_counter]);//send to the Control_ECU through the UART
	}

	 /*********WAIT for MC2 Response**********/
	 /***second time:1)match  OR  2) don't match**/
	 	while(UART_recieveByte() != PASSWORD_CHECKING_FINISHED);/**second time:checking**/
     cd6:	0e 94 c0 1a 	call	0x3580	; 0x3580 <UART_recieveByte>
     cda:	82 31       	cpi	r24, 0x12	; 18
     cdc:	e1 f7       	brne	.-8      	; 0xcd6 <create_password+0x190>
	 /************Main option menu*******************/
	 	MC2_response_on_creating_pass=UART_recieveByte();//save the MC reponse
     cde:	0e 94 c0 1a 	call	0x3580	; 0x3580 <UART_recieveByte>
     ce2:	80 93 e6 00 	sts	0x00E6, r24

	 	if (MC2_response_on_creating_pass == PASSWORDS_MATCH)
     ce6:	80 91 e6 00 	lds	r24, 0x00E6
     cea:	83 31       	cpi	r24, 0x13	; 19
     cec:	21 f4       	brne	.+8      	; 0xcf6 <create_password+0x1b0>
	 	{
	 		the_password_is_created=1;
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	88 8b       	std	Y+16, r24	; 0x10
	 		MAIN_options();/**step 2**/
     cf2:	0e 94 8f 06 	call	0xd1e	; 0xd1e <MAIN_options>
	 	}
	 /************Create a System Password again*******************/
	 	if (MC2_response_on_creating_pass == PASSWORDS_DONT_MATCH)
     cf6:	80 91 e6 00 	lds	r24, 0x00E6
     cfa:	84 31       	cpi	r24, 0x14	; 20
     cfc:	29 f4       	brne	.+10     	; 0xd08 <create_password+0x1c2>
	 	{
	 		the_password_is_created=0;
     cfe:	18 8a       	std	Y+16, r1	; 0x10
	 		create_password(retry_pass);/**step1 again**/
     d00:	ce 01       	movw	r24, r28
     d02:	46 96       	adiw	r24, 0x16	; 22
     d04:	0e 94 a3 05 	call	0xb46	; 0xb46 <create_password>
	 	}
}
     d08:	6c 96       	adiw	r28, 0x1c	; 28
     d0a:	0f b6       	in	r0, 0x3f	; 63
     d0c:	f8 94       	cli
     d0e:	de bf       	out	0x3e, r29	; 62
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	cd bf       	out	0x3d, r28	; 61
     d14:	cf 91       	pop	r28
     d16:	df 91       	pop	r29
     d18:	1f 91       	pop	r17
     d1a:	0f 91       	pop	r16
     d1c:	08 95       	ret

00000d1e <MAIN_options>:
/********************************************************************************/
void MAIN_options(){/**step2**/
     d1e:	df 93       	push	r29
     d20:	cf 93       	push	r28
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62
	/*****Main Options LCD*****/
	LCD_sendCommand(LCD_CLEAR_COMMAND);
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_sendCommand>
	LCD_displayString("+ : Open Door");
     d2c:	89 e7       	ldi	r24, 0x79	; 121
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	0e 94 a1 18 	call	0x3142	; 0x3142 <LCD_displayString>
	LCD_moveCursor(1,0);
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	60 e0       	ldi	r22, 0x00	; 0
     d38:	0e 94 ca 18 	call	0x3194	; 0x3194 <LCD_moveCursor>
	LCD_displayString("- : Change Pass");
     d3c:	87 e8       	ldi	r24, 0x87	; 135
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	0e 94 a1 18 	call	0x3142	; 0x3142 <LCD_displayString>
	/*********************************/

	UART_sendByte(OPTION_MENU);/**THIRD time :be ready for option menu**/
     d44:	85 e1       	ldi	r24, 0x15	; 21
     d46:	0e 94 a9 1a 	call	0x3552	; 0x3552 <UART_sendByte>

	if(KEYPAD_getPressedKey() == '+')//choose open door
     d4a:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <KEYPAD_getPressedKey>
     d4e:	8b 32       	cpi	r24, 0x2B	; 43
     d50:	29 f4       	brne	.+10     	; 0xd5c <MAIN_options+0x3e>
	{
		UART_sendByte(OPEN_DOOR);/**THIRD time :1)open door**/
     d52:	86 e1       	ldi	r24, 0x16	; 22
     d54:	0e 94 a9 1a 	call	0x3552	; 0x3552 <UART_sendByte>
		Open_Door();/**step3**/
     d58:	0e 94 85 07 	call	0xf0a	; 0xf0a <Open_Door>
	}
	if(KEYPAD_getPressedKey() == '-')//choose Change Pass
     d5c:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <KEYPAD_getPressedKey>
     d60:	8d 32       	cpi	r24, 0x2D	; 45
     d62:	29 f4       	brne	.+10     	; 0xd6e <MAIN_options+0x50>
	{
		UART_sendByte(CHANGE_PASS);/**THIRD time :2)change pass**/
     d64:	80 e2       	ldi	r24, 0x20	; 32
     d66:	0e 94 a9 1a 	call	0x3552	; 0x3552 <UART_sendByte>
		change_password();/**step4**/
     d6a:	0e 94 52 08 	call	0x10a4	; 0x10a4 <change_password>
	}
}
     d6e:	cf 91       	pop	r28
     d70:	df 91       	pop	r29
     d72:	08 95       	ret

00000d74 <Ask_user_to_enter_pass>:
/********************************************************************************/
void Ask_user_to_enter_pass(uint8 *user_entered_password){/** for step1 & step3 & step4**/
     d74:	0f 93       	push	r16
     d76:	1f 93       	push	r17
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
     d80:	61 97       	sbiw	r28, 0x11	; 17
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	f8 94       	cli
     d86:	de bf       	out	0x3e, r29	; 62
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	cd bf       	out	0x3d, r28	; 61
     d8c:	99 8b       	std	Y+17, r25	; 0x11
     d8e:	88 8b       	std	Y+16, r24	; 0x10
	uint8 user_counter;
	/*****enter password LCD*****/
	LCD_sendCommand(LCD_CLEAR_COMMAND);
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_sendCommand>
	LCD_displayString("plz enter pass:");
     d96:	87 e9       	ldi	r24, 0x97	; 151
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	0e 94 a1 18 	call	0x3142	; 0x3142 <LCD_displayString>
	LCD_moveCursor(1,0);
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	0e 94 ca 18 	call	0x3194	; 0x3194 <LCD_moveCursor>
	/*********************************/
	/*****enter password KEYPAD*****/
	for(user_counter=0;user_counter<(password_length);user_counter++)
     da6:	1f 86       	std	Y+15, r1	; 0x0f
     da8:	84 c0       	rjmp	.+264    	; 0xeb2 <Ask_user_to_enter_pass+0x13e>
	{
		user_entered_password[user_counter] = KEYPAD_getPressedKey();//take the password from the keypad
     daa:	8f 85       	ldd	r24, Y+15	; 0x0f
     dac:	28 2f       	mov	r18, r24
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	88 89       	ldd	r24, Y+16	; 0x10
     db2:	99 89       	ldd	r25, Y+17	; 0x11
     db4:	8c 01       	movw	r16, r24
     db6:	02 0f       	add	r16, r18
     db8:	13 1f       	adc	r17, r19
     dba:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <KEYPAD_getPressedKey>
     dbe:	f8 01       	movw	r30, r16
     dc0:	80 83       	st	Z, r24
		LCD_displayCharacter('*');//Display * in the screen for each number
     dc2:	8a e2       	ldi	r24, 0x2A	; 42
     dc4:	0e 94 26 14 	call	0x284c	; 0x284c <LCD_displayCharacter>
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	a8 e4       	ldi	r26, 0x48	; 72
     dce:	b3 e4       	ldi	r27, 0x43	; 67
     dd0:	8b 87       	std	Y+11, r24	; 0x0b
     dd2:	9c 87       	std	Y+12, r25	; 0x0c
     dd4:	ad 87       	std	Y+13, r26	; 0x0d
     dd6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dd8:	6b 85       	ldd	r22, Y+11	; 0x0b
     dda:	7c 85       	ldd	r23, Y+12	; 0x0c
     ddc:	8d 85       	ldd	r24, Y+13	; 0x0d
     dde:	9e 85       	ldd	r25, Y+14	; 0x0e
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	4a ef       	ldi	r20, 0xFA	; 250
     de6:	54 e4       	ldi	r21, 0x44	; 68
     de8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dec:	dc 01       	movw	r26, r24
     dee:	cb 01       	movw	r24, r22
     df0:	8f 83       	std	Y+7, r24	; 0x07
     df2:	98 87       	std	Y+8, r25	; 0x08
     df4:	a9 87       	std	Y+9, r26	; 0x09
     df6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     df8:	6f 81       	ldd	r22, Y+7	; 0x07
     dfa:	78 85       	ldd	r23, Y+8	; 0x08
     dfc:	89 85       	ldd	r24, Y+9	; 0x09
     dfe:	9a 85       	ldd	r25, Y+10	; 0x0a
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	40 e8       	ldi	r20, 0x80	; 128
     e06:	5f e3       	ldi	r21, 0x3F	; 63
     e08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e0c:	88 23       	and	r24, r24
     e0e:	2c f4       	brge	.+10     	; 0xe1a <Ask_user_to_enter_pass+0xa6>
		__ticks = 1;
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	9e 83       	std	Y+6, r25	; 0x06
     e16:	8d 83       	std	Y+5, r24	; 0x05
     e18:	3f c0       	rjmp	.+126    	; 0xe98 <Ask_user_to_enter_pass+0x124>
	else if (__tmp > 65535)
     e1a:	6f 81       	ldd	r22, Y+7	; 0x07
     e1c:	78 85       	ldd	r23, Y+8	; 0x08
     e1e:	89 85       	ldd	r24, Y+9	; 0x09
     e20:	9a 85       	ldd	r25, Y+10	; 0x0a
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	3f ef       	ldi	r19, 0xFF	; 255
     e26:	4f e7       	ldi	r20, 0x7F	; 127
     e28:	57 e4       	ldi	r21, 0x47	; 71
     e2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e2e:	18 16       	cp	r1, r24
     e30:	4c f5       	brge	.+82     	; 0xe84 <Ask_user_to_enter_pass+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e32:	6b 85       	ldd	r22, Y+11	; 0x0b
     e34:	7c 85       	ldd	r23, Y+12	; 0x0c
     e36:	8d 85       	ldd	r24, Y+13	; 0x0d
     e38:	9e 85       	ldd	r25, Y+14	; 0x0e
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	40 e2       	ldi	r20, 0x20	; 32
     e40:	51 e4       	ldi	r21, 0x41	; 65
     e42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e46:	dc 01       	movw	r26, r24
     e48:	cb 01       	movw	r24, r22
     e4a:	bc 01       	movw	r22, r24
     e4c:	cd 01       	movw	r24, r26
     e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	9e 83       	std	Y+6, r25	; 0x06
     e58:	8d 83       	std	Y+5, r24	; 0x05
     e5a:	0f c0       	rjmp	.+30     	; 0xe7a <Ask_user_to_enter_pass+0x106>
     e5c:	88 ec       	ldi	r24, 0xC8	; 200
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	9c 83       	std	Y+4, r25	; 0x04
     e62:	8b 83       	std	Y+3, r24	; 0x03
     e64:	8b 81       	ldd	r24, Y+3	; 0x03
     e66:	9c 81       	ldd	r25, Y+4	; 0x04
     e68:	01 97       	sbiw	r24, 0x01	; 1
     e6a:	f1 f7       	brne	.-4      	; 0xe68 <Ask_user_to_enter_pass+0xf4>
     e6c:	9c 83       	std	Y+4, r25	; 0x04
     e6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e70:	8d 81       	ldd	r24, Y+5	; 0x05
     e72:	9e 81       	ldd	r25, Y+6	; 0x06
     e74:	01 97       	sbiw	r24, 0x01	; 1
     e76:	9e 83       	std	Y+6, r25	; 0x06
     e78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e7a:	8d 81       	ldd	r24, Y+5	; 0x05
     e7c:	9e 81       	ldd	r25, Y+6	; 0x06
     e7e:	00 97       	sbiw	r24, 0x00	; 0
     e80:	69 f7       	brne	.-38     	; 0xe5c <Ask_user_to_enter_pass+0xe8>
     e82:	14 c0       	rjmp	.+40     	; 0xeac <Ask_user_to_enter_pass+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e84:	6f 81       	ldd	r22, Y+7	; 0x07
     e86:	78 85       	ldd	r23, Y+8	; 0x08
     e88:	89 85       	ldd	r24, Y+9	; 0x09
     e8a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	9e 83       	std	Y+6, r25	; 0x06
     e96:	8d 83       	std	Y+5, r24	; 0x05
     e98:	8d 81       	ldd	r24, Y+5	; 0x05
     e9a:	9e 81       	ldd	r25, Y+6	; 0x06
     e9c:	9a 83       	std	Y+2, r25	; 0x02
     e9e:	89 83       	std	Y+1, r24	; 0x01
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	9a 81       	ldd	r25, Y+2	; 0x02
     ea4:	01 97       	sbiw	r24, 0x01	; 1
     ea6:	f1 f7       	brne	.-4      	; 0xea4 <Ask_user_to_enter_pass+0x130>
     ea8:	9a 83       	std	Y+2, r25	; 0x02
     eaa:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendCommand(LCD_CLEAR_COMMAND);
	LCD_displayString("plz enter pass:");
	LCD_moveCursor(1,0);
	/*********************************/
	/*****enter password KEYPAD*****/
	for(user_counter=0;user_counter<(password_length);user_counter++)
     eac:	8f 85       	ldd	r24, Y+15	; 0x0f
     eae:	8f 5f       	subi	r24, 0xFF	; 255
     eb0:	8f 87       	std	Y+15, r24	; 0x0f
     eb2:	8f 85       	ldd	r24, Y+15	; 0x0f
     eb4:	85 30       	cpi	r24, 0x05	; 5
     eb6:	08 f4       	brcc	.+2      	; 0xeba <Ask_user_to_enter_pass+0x146>
     eb8:	78 cf       	rjmp	.-272    	; 0xdaa <Ask_user_to_enter_pass+0x36>
	{
		user_entered_password[user_counter] = KEYPAD_getPressedKey();//take the password from the keypad
		LCD_displayCharacter('*');//Display * in the screen for each number
		_delay_ms(delay_for_display);//for display
	}
	while(KEYPAD_getPressedKey()!='=');//until enter key is pressed
     eba:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <KEYPAD_getPressedKey>
     ebe:	8d 33       	cpi	r24, 0x3D	; 61
     ec0:	e1 f7       	brne	.-8      	; 0xeba <Ask_user_to_enter_pass+0x146>
	/*********************************/

	 UART_sendByte(USER_ENTERED_PASS);/**FOURTH time -> be ready for the the entered pass**/
     ec2:	87 e1       	ldi	r24, 0x17	; 23
     ec4:	0e 94 a9 1a 	call	0x3552	; 0x3552 <UART_sendByte>
	 for(user_counter=0;user_counter<(password_length);user_counter++)
     ec8:	1f 86       	std	Y+15, r1	; 0x0f
     eca:	11 c0       	rjmp	.+34     	; 0xeee <Ask_user_to_enter_pass+0x17a>
	 {
		UART_sendByte(USER_ENTERED_PASS);/**FOURTH time -> be ready for the the entered pass**/
     ecc:	87 e1       	ldi	r24, 0x17	; 23
     ece:	0e 94 a9 1a 	call	0x3552	; 0x3552 <UART_sendByte>
		UART_sendByte(user_entered_password[user_counter]);//send to the Control_ECU through the UART
     ed2:	8f 85       	ldd	r24, Y+15	; 0x0f
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	88 89       	ldd	r24, Y+16	; 0x10
     eda:	99 89       	ldd	r25, Y+17	; 0x11
     edc:	fc 01       	movw	r30, r24
     ede:	e2 0f       	add	r30, r18
     ee0:	f3 1f       	adc	r31, r19
     ee2:	80 81       	ld	r24, Z
     ee4:	0e 94 a9 1a 	call	0x3552	; 0x3552 <UART_sendByte>
	}
	while(KEYPAD_getPressedKey()!='=');//until enter key is pressed
	/*********************************/

	 UART_sendByte(USER_ENTERED_PASS);/**FOURTH time -> be ready for the the entered pass**/
	 for(user_counter=0;user_counter<(password_length);user_counter++)
     ee8:	8f 85       	ldd	r24, Y+15	; 0x0f
     eea:	8f 5f       	subi	r24, 0xFF	; 255
     eec:	8f 87       	std	Y+15, r24	; 0x0f
     eee:	8f 85       	ldd	r24, Y+15	; 0x0f
     ef0:	85 30       	cpi	r24, 0x05	; 5
     ef2:	60 f3       	brcs	.-40     	; 0xecc <Ask_user_to_enter_pass+0x158>
	 {
		UART_sendByte(USER_ENTERED_PASS);/**FOURTH time -> be ready for the the entered pass**/
		UART_sendByte(user_entered_password[user_counter]);//send to the Control_ECU through the UART
	}
}
     ef4:	61 96       	adiw	r28, 0x11	; 17
     ef6:	0f b6       	in	r0, 0x3f	; 63
     ef8:	f8 94       	cli
     efa:	de bf       	out	0x3e, r29	; 62
     efc:	0f be       	out	0x3f, r0	; 63
     efe:	cd bf       	out	0x3d, r28	; 61
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	08 95       	ret

00000f0a <Open_Door>:
/********************************************************************************/
void Open_Door(void){/**step3**/
     f0a:	df 93       	push	r29
     f0c:	cf 93       	push	r28
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
     f12:	63 97       	sbiw	r28, 0x13	; 19
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	f8 94       	cli
     f18:	de bf       	out	0x3e, r29	; 62
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	cd bf       	out	0x3d, r28	; 61
	uint8 pass_open_door[password_length];
	Ask_user_to_enter_pass(pass_open_door);
     f1e:	ce 01       	movw	r24, r28
     f20:	0f 96       	adiw	r24, 0x0f	; 15
     f22:	0e 94 ba 06 	call	0xd74	; 0xd74 <Ask_user_to_enter_pass>

	/*********WAIT for MC2 Response**********/
	/***second time:1)match  OR  2) don't match**/
	while(UART_recieveByte() != USER_ACCESS);/**second time:checking**/
     f26:	0e 94 c0 1a 	call	0x3580	; 0x3580 <UART_recieveByte>
     f2a:	88 31       	cpi	r24, 0x18	; 24
     f2c:	e1 f7       	brne	.-8      	; 0xf26 <Open_Door+0x1c>
	/************Main option menu*******************/
	MC2_response_door=UART_recieveByte();
     f2e:	0e 94 c0 1a 	call	0x3580	; 0x3580 <UART_recieveByte>
     f32:	80 93 ee 00 	sts	0x00EE, r24
	if (MC2_response_door == PASSWORDS_IS_CORRECT)//PASS match bet it and the saved pass in EEPROM
     f36:	80 91 ee 00 	lds	r24, 0x00EE
     f3a:	89 31       	cpi	r24, 0x19	; 25
     f3c:	c9 f4       	brne	.+50     	; 0xf70 <Open_Door+0x66>
	{
	/*******************Display door state on LCD********************/
		if (timer1_is_init == 0)
     f3e:	80 91 e3 00 	lds	r24, 0x00E3
     f42:	88 23       	and	r24, r24
     f44:	11 f4       	brne	.+4      	; 0xf4a <Open_Door+0x40>
		{
			Start_LCD_TIMER1();//timer1_is_init is now =1
     f46:	0e 94 52 19 	call	0x32a4	; 0x32a4 <Start_LCD_TIMER1>
			/**the process of locking screen and holding it happens after 15sec
			* when Timer1 calls LCD_timer_finished IN LCD DRIVER
			* */
		}
		if(lcd_closing_door==0)//Opening the door
     f4a:	80 91 ef 00 	lds	r24, 0x00EF
     f4e:	88 23       	and	r24, r24
     f50:	59 f4       	brne	.+22     	; 0xf68 <Open_Door+0x5e>
		{
		 // Timer1 is still running, the door is opening
			LCD_sendCommand(LCD_CLEAR_COMMAND);
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_sendCommand>
			LCD_moveCursor(0,0);
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	0e 94 ca 18 	call	0x3194	; 0x3194 <LCD_moveCursor>
			LCD_displayString("Door is Unlocking");
     f60:	87 ea       	ldi	r24, 0xA7	; 167
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	0e 94 a1 18 	call	0x3142	; 0x3142 <LCD_displayString>
		}
		while(lcd_closing_door==0);
     f68:	80 91 ef 00 	lds	r24, 0x00EF
     f6c:	88 23       	and	r24, r24
     f6e:	e1 f3       	breq	.-8      	; 0xf68 <Open_Door+0x5e>
	}
	if (MC2_response_door == PASSWORDS_DONT_MATCH)
     f70:	80 91 ee 00 	lds	r24, 0x00EE
     f74:	84 31       	cpi	r24, 0x14	; 20
     f76:	09 f0       	breq	.+2      	; 0xf7a <Open_Door+0x70>
     f78:	8c c0       	rjmp	.+280    	; 0x1092 <Open_Door+0x188>
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	a0 e8       	ldi	r26, 0x80	; 128
     f80:	bf e3       	ldi	r27, 0x3F	; 63
     f82:	8b 87       	std	Y+11, r24	; 0x0b
     f84:	9c 87       	std	Y+12, r25	; 0x0c
     f86:	ad 87       	std	Y+13, r26	; 0x0d
     f88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f8a:	6b 85       	ldd	r22, Y+11	; 0x0b
     f8c:	7c 85       	ldd	r23, Y+12	; 0x0c
     f8e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f90:	9e 85       	ldd	r25, Y+14	; 0x0e
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	4a ef       	ldi	r20, 0xFA	; 250
     f98:	54 e4       	ldi	r21, 0x44	; 68
     f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	8f 83       	std	Y+7, r24	; 0x07
     fa4:	98 87       	std	Y+8, r25	; 0x08
     fa6:	a9 87       	std	Y+9, r26	; 0x09
     fa8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     faa:	6f 81       	ldd	r22, Y+7	; 0x07
     fac:	78 85       	ldd	r23, Y+8	; 0x08
     fae:	89 85       	ldd	r24, Y+9	; 0x09
     fb0:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	40 e8       	ldi	r20, 0x80	; 128
     fb8:	5f e3       	ldi	r21, 0x3F	; 63
     fba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fbe:	88 23       	and	r24, r24
     fc0:	2c f4       	brge	.+10     	; 0xfcc <Open_Door+0xc2>
		__ticks = 1;
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	9e 83       	std	Y+6, r25	; 0x06
     fc8:	8d 83       	std	Y+5, r24	; 0x05
     fca:	3f c0       	rjmp	.+126    	; 0x104a <Open_Door+0x140>
	else if (__tmp > 65535)
     fcc:	6f 81       	ldd	r22, Y+7	; 0x07
     fce:	78 85       	ldd	r23, Y+8	; 0x08
     fd0:	89 85       	ldd	r24, Y+9	; 0x09
     fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	3f ef       	ldi	r19, 0xFF	; 255
     fd8:	4f e7       	ldi	r20, 0x7F	; 127
     fda:	57 e4       	ldi	r21, 0x47	; 71
     fdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fe0:	18 16       	cp	r1, r24
     fe2:	4c f5       	brge	.+82     	; 0x1036 <Open_Door+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fe4:	6b 85       	ldd	r22, Y+11	; 0x0b
     fe6:	7c 85       	ldd	r23, Y+12	; 0x0c
     fe8:	8d 85       	ldd	r24, Y+13	; 0x0d
     fea:	9e 85       	ldd	r25, Y+14	; 0x0e
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	40 e2       	ldi	r20, 0x20	; 32
     ff2:	51 e4       	ldi	r21, 0x41	; 65
     ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	bc 01       	movw	r22, r24
     ffe:	cd 01       	movw	r24, r26
    1000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	9e 83       	std	Y+6, r25	; 0x06
    100a:	8d 83       	std	Y+5, r24	; 0x05
    100c:	0f c0       	rjmp	.+30     	; 0x102c <Open_Door+0x122>
    100e:	88 ec       	ldi	r24, 0xC8	; 200
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	9c 83       	std	Y+4, r25	; 0x04
    1014:	8b 83       	std	Y+3, r24	; 0x03
    1016:	8b 81       	ldd	r24, Y+3	; 0x03
    1018:	9c 81       	ldd	r25, Y+4	; 0x04
    101a:	01 97       	sbiw	r24, 0x01	; 1
    101c:	f1 f7       	brne	.-4      	; 0x101a <Open_Door+0x110>
    101e:	9c 83       	std	Y+4, r25	; 0x04
    1020:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1022:	8d 81       	ldd	r24, Y+5	; 0x05
    1024:	9e 81       	ldd	r25, Y+6	; 0x06
    1026:	01 97       	sbiw	r24, 0x01	; 1
    1028:	9e 83       	std	Y+6, r25	; 0x06
    102a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    102c:	8d 81       	ldd	r24, Y+5	; 0x05
    102e:	9e 81       	ldd	r25, Y+6	; 0x06
    1030:	00 97       	sbiw	r24, 0x00	; 0
    1032:	69 f7       	brne	.-38     	; 0x100e <Open_Door+0x104>
    1034:	14 c0       	rjmp	.+40     	; 0x105e <Open_Door+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1036:	6f 81       	ldd	r22, Y+7	; 0x07
    1038:	78 85       	ldd	r23, Y+8	; 0x08
    103a:	89 85       	ldd	r24, Y+9	; 0x09
    103c:	9a 85       	ldd	r25, Y+10	; 0x0a
    103e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1042:	dc 01       	movw	r26, r24
    1044:	cb 01       	movw	r24, r22
    1046:	9e 83       	std	Y+6, r25	; 0x06
    1048:	8d 83       	std	Y+5, r24	; 0x05
    104a:	8d 81       	ldd	r24, Y+5	; 0x05
    104c:	9e 81       	ldd	r25, Y+6	; 0x06
    104e:	9a 83       	std	Y+2, r25	; 0x02
    1050:	89 83       	std	Y+1, r24	; 0x01
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	9a 81       	ldd	r25, Y+2	; 0x02
    1056:	01 97       	sbiw	r24, 0x01	; 1
    1058:	f1 f7       	brne	.-4      	; 0x1056 <Open_Door+0x14c>
    105a:	9a 83       	std	Y+2, r25	; 0x02
    105c:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(1);//for synchronization
		Error_counter++;
    105e:	80 91 e4 00 	lds	r24, 0x00E4
    1062:	8f 5f       	subi	r24, 0xFF	; 255
    1064:	80 93 e4 00 	sts	0x00E4, r24
		 if (Error_counter==3){
    1068:	80 91 e4 00 	lds	r24, 0x00E4
    106c:	83 30       	cpi	r24, 0x03	; 3
    106e:	79 f4       	brne	.+30     	; 0x108e <Open_Door+0x184>
			LCD_sendCommand(LCD_CLEAR_COMMAND);
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_sendCommand>
			LCD_displayString("WARNING");
    1076:	89 eb       	ldi	r24, 0xB9	; 185
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	0e 94 a1 18 	call	0x3142	; 0x3142 <LCD_displayString>
			while(UART_recieveByte() !=UNBLOCK_THE_SYSTEM);
    107e:	0e 94 c0 1a 	call	0x3580	; 0x3580 <UART_recieveByte>
    1082:	81 32       	cpi	r24, 0x21	; 33
    1084:	e1 f7       	brne	.-8      	; 0x107e <Open_Door+0x174>
			Error_counter=0;//so we can run it again
    1086:	10 92 e4 00 	sts	0x00E4, r1
			MAIN_options();/**back to step2**/
    108a:	0e 94 8f 06 	call	0xd1e	; 0xd1e <MAIN_options>
		  }
		Open_Door();
    108e:	0e 94 85 07 	call	0xf0a	; 0xf0a <Open_Door>
	}


}
    1092:	63 96       	adiw	r28, 0x13	; 19
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	de bf       	out	0x3e, r29	; 62
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	cd bf       	out	0x3d, r28	; 61
    109e:	cf 91       	pop	r28
    10a0:	df 91       	pop	r29
    10a2:	08 95       	ret

000010a4 <change_password>:
/********************************************************************************/
void change_password(){/**step4**/
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
    10ac:	68 97       	sbiw	r28, 0x18	; 24
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	f8 94       	cli
    10b2:	de bf       	out	0x3e, r29	; 62
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	cd bf       	out	0x3d, r28	; 61
	uint8 pass_chg_pass[password_length];
	uint8 new_pass[password_length];
	Ask_user_to_enter_pass(pass_chg_pass);
    10b8:	ce 01       	movw	r24, r28
    10ba:	0f 96       	adiw	r24, 0x0f	; 15
    10bc:	0e 94 ba 06 	call	0xd74	; 0xd74 <Ask_user_to_enter_pass>
		/*********WAIT for MC2 Response**********/
		/***second time:1)match  OR  2) don't match**/
		while(UART_recieveByte() != USER_ACCESS);/**second time:checking**/
    10c0:	0e 94 c0 1a 	call	0x3580	; 0x3580 <UART_recieveByte>
    10c4:	88 31       	cpi	r24, 0x18	; 24
    10c6:	e1 f7       	brne	.-8      	; 0x10c0 <change_password+0x1c>
		/************Main option menu*******************/
		MC2_response_change_pass=UART_recieveByte();
    10c8:	0e 94 c0 1a 	call	0x3580	; 0x3580 <UART_recieveByte>
    10cc:	80 93 e5 00 	sts	0x00E5, r24
		if (MC2_response_change_pass == PASSWORDS_IS_CORRECT)//PASS match bet it and the saved pass in EEPROM
    10d0:	80 91 e5 00 	lds	r24, 0x00E5
    10d4:	89 31       	cpi	r24, 0x19	; 25
    10d6:	21 f4       	brne	.+8      	; 0x10e0 <change_password+0x3c>
		{
			create_password(new_pass);/**repeat step1**/
    10d8:	ce 01       	movw	r24, r28
    10da:	44 96       	adiw	r24, 0x14	; 20
    10dc:	0e 94 a3 05 	call	0xb46	; 0xb46 <create_password>
		}
		if (MC2_response_change_pass == PASSWORDS_DONT_MATCH){
    10e0:	80 91 e5 00 	lds	r24, 0x00E5
    10e4:	84 31       	cpi	r24, 0x14	; 20
    10e6:	09 f0       	breq	.+2      	; 0x10ea <change_password+0x46>
    10e8:	8c c0       	rjmp	.+280    	; 0x1202 <change_password+0x15e>
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	a0 e8       	ldi	r26, 0x80	; 128
    10f0:	bf e3       	ldi	r27, 0x3F	; 63
    10f2:	8b 87       	std	Y+11, r24	; 0x0b
    10f4:	9c 87       	std	Y+12, r25	; 0x0c
    10f6:	ad 87       	std	Y+13, r26	; 0x0d
    10f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    10fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    10fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1100:	9e 85       	ldd	r25, Y+14	; 0x0e
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	4a ef       	ldi	r20, 0xFA	; 250
    1108:	54 e4       	ldi	r21, 0x44	; 68
    110a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	8f 83       	std	Y+7, r24	; 0x07
    1114:	98 87       	std	Y+8, r25	; 0x08
    1116:	a9 87       	std	Y+9, r26	; 0x09
    1118:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    111a:	6f 81       	ldd	r22, Y+7	; 0x07
    111c:	78 85       	ldd	r23, Y+8	; 0x08
    111e:	89 85       	ldd	r24, Y+9	; 0x09
    1120:	9a 85       	ldd	r25, Y+10	; 0x0a
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	40 e8       	ldi	r20, 0x80	; 128
    1128:	5f e3       	ldi	r21, 0x3F	; 63
    112a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    112e:	88 23       	and	r24, r24
    1130:	2c f4       	brge	.+10     	; 0x113c <change_password+0x98>
		__ticks = 1;
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	9e 83       	std	Y+6, r25	; 0x06
    1138:	8d 83       	std	Y+5, r24	; 0x05
    113a:	3f c0       	rjmp	.+126    	; 0x11ba <change_password+0x116>
	else if (__tmp > 65535)
    113c:	6f 81       	ldd	r22, Y+7	; 0x07
    113e:	78 85       	ldd	r23, Y+8	; 0x08
    1140:	89 85       	ldd	r24, Y+9	; 0x09
    1142:	9a 85       	ldd	r25, Y+10	; 0x0a
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	3f ef       	ldi	r19, 0xFF	; 255
    1148:	4f e7       	ldi	r20, 0x7F	; 127
    114a:	57 e4       	ldi	r21, 0x47	; 71
    114c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1150:	18 16       	cp	r1, r24
    1152:	4c f5       	brge	.+82     	; 0x11a6 <change_password+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1154:	6b 85       	ldd	r22, Y+11	; 0x0b
    1156:	7c 85       	ldd	r23, Y+12	; 0x0c
    1158:	8d 85       	ldd	r24, Y+13	; 0x0d
    115a:	9e 85       	ldd	r25, Y+14	; 0x0e
    115c:	20 e0       	ldi	r18, 0x00	; 0
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	40 e2       	ldi	r20, 0x20	; 32
    1162:	51 e4       	ldi	r21, 0x41	; 65
    1164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	bc 01       	movw	r22, r24
    116e:	cd 01       	movw	r24, r26
    1170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1174:	dc 01       	movw	r26, r24
    1176:	cb 01       	movw	r24, r22
    1178:	9e 83       	std	Y+6, r25	; 0x06
    117a:	8d 83       	std	Y+5, r24	; 0x05
    117c:	0f c0       	rjmp	.+30     	; 0x119c <change_password+0xf8>
    117e:	88 ec       	ldi	r24, 0xC8	; 200
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	9c 83       	std	Y+4, r25	; 0x04
    1184:	8b 83       	std	Y+3, r24	; 0x03
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	9c 81       	ldd	r25, Y+4	; 0x04
    118a:	01 97       	sbiw	r24, 0x01	; 1
    118c:	f1 f7       	brne	.-4      	; 0x118a <change_password+0xe6>
    118e:	9c 83       	std	Y+4, r25	; 0x04
    1190:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1192:	8d 81       	ldd	r24, Y+5	; 0x05
    1194:	9e 81       	ldd	r25, Y+6	; 0x06
    1196:	01 97       	sbiw	r24, 0x01	; 1
    1198:	9e 83       	std	Y+6, r25	; 0x06
    119a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    119c:	8d 81       	ldd	r24, Y+5	; 0x05
    119e:	9e 81       	ldd	r25, Y+6	; 0x06
    11a0:	00 97       	sbiw	r24, 0x00	; 0
    11a2:	69 f7       	brne	.-38     	; 0x117e <change_password+0xda>
    11a4:	14 c0       	rjmp	.+40     	; 0x11ce <change_password+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11a6:	6f 81       	ldd	r22, Y+7	; 0x07
    11a8:	78 85       	ldd	r23, Y+8	; 0x08
    11aa:	89 85       	ldd	r24, Y+9	; 0x09
    11ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b2:	dc 01       	movw	r26, r24
    11b4:	cb 01       	movw	r24, r22
    11b6:	9e 83       	std	Y+6, r25	; 0x06
    11b8:	8d 83       	std	Y+5, r24	; 0x05
    11ba:	8d 81       	ldd	r24, Y+5	; 0x05
    11bc:	9e 81       	ldd	r25, Y+6	; 0x06
    11be:	9a 83       	std	Y+2, r25	; 0x02
    11c0:	89 83       	std	Y+1, r24	; 0x01
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	9a 81       	ldd	r25, Y+2	; 0x02
    11c6:	01 97       	sbiw	r24, 0x01	; 1
    11c8:	f1 f7       	brne	.-4      	; 0x11c6 <change_password+0x122>
    11ca:	9a 83       	std	Y+2, r25	; 0x02
    11cc:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1);//for synchronization
			Error_counter++;
    11ce:	80 91 e4 00 	lds	r24, 0x00E4
    11d2:	8f 5f       	subi	r24, 0xFF	; 255
    11d4:	80 93 e4 00 	sts	0x00E4, r24
			if (Error_counter==3){
    11d8:	80 91 e4 00 	lds	r24, 0x00E4
    11dc:	83 30       	cpi	r24, 0x03	; 3
    11de:	79 f4       	brne	.+30     	; 0x11fe <change_password+0x15a>
				LCD_sendCommand(LCD_CLEAR_COMMAND);
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_sendCommand>
				LCD_displayString("WARNING");
    11e6:	89 eb       	ldi	r24, 0xB9	; 185
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	0e 94 a1 18 	call	0x3142	; 0x3142 <LCD_displayString>
				while(UART_recieveByte() !=UNBLOCK_THE_SYSTEM);
    11ee:	0e 94 c0 1a 	call	0x3580	; 0x3580 <UART_recieveByte>
    11f2:	81 32       	cpi	r24, 0x21	; 33
    11f4:	e1 f7       	brne	.-8      	; 0x11ee <change_password+0x14a>
				Error_counter=0;//so we can run it again
    11f6:	10 92 e4 00 	sts	0x00E4, r1
				MAIN_options();/**back to step2**/
    11fa:	0e 94 8f 06 	call	0xd1e	; 0xd1e <MAIN_options>
			}
			change_password();
    11fe:	0e 94 52 08 	call	0x10a4	; 0x10a4 <change_password>
		}

}
    1202:	68 96       	adiw	r28, 0x18	; 24
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	cd bf       	out	0x3d, r28	; 61
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <main>:
/********************************************************************************/
int main(){
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	00 d0       	rcall	.+0      	; 0x121a <main+0x6>
    121a:	00 d0       	rcall	.+0      	; 0x121c <main+0x8>
    121c:	0f 92       	push	r0
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
		  • Date Length: 8-Bits Data
		  • Parity Type: Even Parity
	   	  • Stop Bits: 1-Stop Bit
		  • Baud-rate = 9600 bits/sec */
		// Setting configuration values
		 uartConfig.bit_data = eight_bit;
    1222:	83 e0       	ldi	r24, 0x03	; 3
    1224:	80 93 e7 00 	sts	0x00E7, r24
		 uartConfig.parity = even_parity;
    1228:	82 e0       	ldi	r24, 0x02	; 2
    122a:	80 93 e8 00 	sts	0x00E8, r24
		 uartConfig.stop_bit = one_Bit;
    122e:	10 92 e9 00 	sts	0x00E9, r1
		 uartConfig.baud_rate = baud_9600;
    1232:	80 e8       	ldi	r24, 0x80	; 128
    1234:	95 e2       	ldi	r25, 0x25	; 37
    1236:	a0 e0       	ldi	r26, 0x00	; 0
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	80 93 ea 00 	sts	0x00EA, r24
    123e:	90 93 eb 00 	sts	0x00EB, r25
    1242:	a0 93 ec 00 	sts	0x00EC, r26
    1246:	b0 93 ed 00 	sts	0x00ED, r27
		 // Initializing UART with the configuration
		UART_init(&uartConfig);
    124a:	87 ee       	ldi	r24, 0xE7	; 231
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	0e 94 0f 1a 	call	0x341e	; 0x341e <UART_init>

		LCD_init();
    1252:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <LCD_init>

		uint8 key_pad_entered_pass[password_length];//to initialize system
	/***************************************************/
while(1)
{
	create_password(key_pad_entered_pass);/**step1**/
    1256:	ce 01       	movw	r24, r28
    1258:	01 96       	adiw	r24, 0x01	; 1
    125a:	0e 94 a3 05 	call	0xb46	; 0xb46 <create_password>
    125e:	fb cf       	rjmp	.-10     	; 0x1256 <main+0x42>

00001260 <__vector_9>:

/**definition of the pointer used to call back function**/
static volatile void(*g_ptr_callBack)(void) = NULL_PTR;
uint8 timer_ticks=0;
/**NORMAL mode ISR**/
ISR(TIMER1_OVF_vect){
    1260:	1f 92       	push	r1
    1262:	0f 92       	push	r0
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	0f 92       	push	r0
    1268:	11 24       	eor	r1, r1
    126a:	2f 93       	push	r18
    126c:	3f 93       	push	r19
    126e:	4f 93       	push	r20
    1270:	5f 93       	push	r21
    1272:	6f 93       	push	r22
    1274:	7f 93       	push	r23
    1276:	8f 93       	push	r24
    1278:	9f 93       	push	r25
    127a:	af 93       	push	r26
    127c:	bf 93       	push	r27
    127e:	ef 93       	push	r30
    1280:	ff 93       	push	r31
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
	if(g_ptr_callBack != NULL_PTR)
    128a:	80 91 da 00 	lds	r24, 0x00DA
    128e:	90 91 db 00 	lds	r25, 0x00DB
    1292:	00 97       	sbiw	r24, 0x00	; 0
    1294:	49 f0       	breq	.+18     	; 0x12a8 <__vector_9+0x48>
		{
		if (timer_ticks==15)
    1296:	80 91 dc 00 	lds	r24, 0x00DC
    129a:	8f 30       	cpi	r24, 0x0F	; 15
    129c:	29 f4       	brne	.+10     	; 0x12a8 <__vector_9+0x48>
					{
			(*g_ptr_callBack)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    129e:	e0 91 da 00 	lds	r30, 0x00DA
    12a2:	f0 91 db 00 	lds	r31, 0x00DB
    12a6:	09 95       	icall

					}
		}
}
    12a8:	cf 91       	pop	r28
    12aa:	df 91       	pop	r29
    12ac:	ff 91       	pop	r31
    12ae:	ef 91       	pop	r30
    12b0:	bf 91       	pop	r27
    12b2:	af 91       	pop	r26
    12b4:	9f 91       	pop	r25
    12b6:	8f 91       	pop	r24
    12b8:	7f 91       	pop	r23
    12ba:	6f 91       	pop	r22
    12bc:	5f 91       	pop	r21
    12be:	4f 91       	pop	r20
    12c0:	3f 91       	pop	r19
    12c2:	2f 91       	pop	r18
    12c4:	0f 90       	pop	r0
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	0f 90       	pop	r0
    12ca:	1f 90       	pop	r1
    12cc:	18 95       	reti

000012ce <__vector_7>:

/**COMAPRE mode ISR**/
ISR(TIMER1_COMPA_vect){
    12ce:	1f 92       	push	r1
    12d0:	0f 92       	push	r0
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	0f 92       	push	r0
    12d6:	11 24       	eor	r1, r1
    12d8:	2f 93       	push	r18
    12da:	3f 93       	push	r19
    12dc:	4f 93       	push	r20
    12de:	5f 93       	push	r21
    12e0:	6f 93       	push	r22
    12e2:	7f 93       	push	r23
    12e4:	8f 93       	push	r24
    12e6:	9f 93       	push	r25
    12e8:	af 93       	push	r26
    12ea:	bf 93       	push	r27
    12ec:	ef 93       	push	r30
    12ee:	ff 93       	push	r31
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
	if(g_ptr_callBack != NULL_PTR)
    12f8:	80 91 da 00 	lds	r24, 0x00DA
    12fc:	90 91 db 00 	lds	r25, 0x00DB
    1300:	00 97       	sbiw	r24, 0x00	; 0
    1302:	81 f0       	breq	.+32     	; 0x1324 <__vector_7+0x56>
		{
		timer_ticks++;
    1304:	80 91 dc 00 	lds	r24, 0x00DC
    1308:	8f 5f       	subi	r24, 0xFF	; 255
    130a:	80 93 dc 00 	sts	0x00DC, r24
		if (timer_ticks==15)
    130e:	80 91 dc 00 	lds	r24, 0x00DC
    1312:	8f 30       	cpi	r24, 0x0F	; 15
    1314:	39 f4       	brne	.+14     	; 0x1324 <__vector_7+0x56>
			{
			(*g_ptr_callBack)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1316:	e0 91 da 00 	lds	r30, 0x00DA
    131a:	f0 91 db 00 	lds	r31, 0x00DB
    131e:	09 95       	icall
			timer_ticks=0;
    1320:	10 92 dc 00 	sts	0x00DC, r1
			}
		}
}
    1324:	cf 91       	pop	r28
    1326:	df 91       	pop	r29
    1328:	ff 91       	pop	r31
    132a:	ef 91       	pop	r30
    132c:	bf 91       	pop	r27
    132e:	af 91       	pop	r26
    1330:	9f 91       	pop	r25
    1332:	8f 91       	pop	r24
    1334:	7f 91       	pop	r23
    1336:	6f 91       	pop	r22
    1338:	5f 91       	pop	r21
    133a:	4f 91       	pop	r20
    133c:	3f 91       	pop	r19
    133e:	2f 91       	pop	r18
    1340:	0f 90       	pop	r0
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	0f 90       	pop	r0
    1346:	1f 90       	pop	r1
    1348:	18 95       	reti

0000134a <Timer1_init>:


void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    134a:	df 93       	push	r29
    134c:	cf 93       	push	r28
    134e:	00 d0       	rcall	.+0      	; 0x1350 <Timer1_init+0x6>
    1350:	0f 92       	push	r0
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
    1356:	9b 83       	std	Y+3, r25	; 0x03
    1358:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_Mode Timer_mode;
	Timer_mode = Config_Ptr->mode;
    135a:	ea 81       	ldd	r30, Y+2	; 0x02
    135c:	fb 81       	ldd	r31, Y+3	; 0x03
    135e:	85 81       	ldd	r24, Z+5	; 0x05
    1360:	89 83       	std	Y+1, r24	; 0x01
	SREG |= (1<<7);//ENABLE GLOBAL INTEREPT IN I-BIT
    1362:	af e5       	ldi	r26, 0x5F	; 95
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	ef e5       	ldi	r30, 0x5F	; 95
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	80 68       	ori	r24, 0x80	; 128
    136e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,FOC1A);//used in non_pwm mode
    1370:	af e4       	ldi	r26, 0x4F	; 79
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	ef e4       	ldi	r30, 0x4F	; 79
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	88 60       	ori	r24, 0x08	; 8
    137c:	8c 93       	st	X, r24
/**SET TIMER INTIAL VALUE**/
	TCNT1=(Config_Ptr->initial_value);
    137e:	ac e4       	ldi	r26, 0x4C	; 76
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	ea 81       	ldd	r30, Y+2	; 0x02
    1384:	fb 81       	ldd	r31, Y+3	; 0x03
    1386:	80 81       	ld	r24, Z
    1388:	91 81       	ldd	r25, Z+1	; 0x01
    138a:	11 96       	adiw	r26, 0x01	; 1
    138c:	9c 93       	st	X, r25
    138e:	8e 93       	st	-X, r24
/**MODE**/
	if (Timer_mode == NORMAL){ // Normal mode
    1390:	89 81       	ldd	r24, Y+1	; 0x01
    1392:	88 23       	and	r24, r24
    1394:	41 f4       	brne	.+16     	; 0x13a6 <Timer1_init+0x5c>
    SET_BIT(TIMSK, TOIE1); // Timer1 Overflow Interrupt is enabled.
    1396:	a9 e5       	ldi	r26, 0x59	; 89
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e9 e5       	ldi	r30, 0x59	; 89
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	84 60       	ori	r24, 0x04	; 4
    13a2:	8c 93       	st	X, r24
    13a4:	1a c0       	rjmp	.+52     	; 0x13da <Timer1_init+0x90>
	}
	else if (Timer_mode == CTC_TOP_OCR1A){ // Compare mode
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	84 30       	cpi	r24, 0x04	; 4
    13aa:	b9 f4       	brne	.+46     	; 0x13da <Timer1_init+0x90>
    SET_BIT(TCCR1B, WGM12); // Use CTC mode with OCR1A as TOP
    13ac:	ae e4       	ldi	r26, 0x4E	; 78
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	ee e4       	ldi	r30, 0x4E	; 78
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	88 60       	ori	r24, 0x08	; 8
    13b8:	8c 93       	st	X, r24
    OCR1A = (Config_Ptr->compare_value); // Set compare value
    13ba:	aa e4       	ldi	r26, 0x4A	; 74
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	ea 81       	ldd	r30, Y+2	; 0x02
    13c0:	fb 81       	ldd	r31, Y+3	; 0x03
    13c2:	82 81       	ldd	r24, Z+2	; 0x02
    13c4:	93 81       	ldd	r25, Z+3	; 0x03
    13c6:	11 96       	adiw	r26, 0x01	; 1
    13c8:	9c 93       	st	X, r25
    13ca:	8e 93       	st	-X, r24
    TIMSK |= (1 << OCIE1A); // Enable Timer1 Compare A Interrupt
    13cc:	a9 e5       	ldi	r26, 0x59	; 89
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e9 e5       	ldi	r30, 0x59	; 89
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	80 61       	ori	r24, 0x10	; 16
    13d8:	8c 93       	st	X, r24
	}
/**PRE_SCALER**/
	TCCR1B=(TCCR1B&0xF8)|((Config_Ptr->prescaler)&0x8F);
    13da:	ae e4       	ldi	r26, 0x4E	; 78
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	ee e4       	ldi	r30, 0x4E	; 78
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	98 2f       	mov	r25, r24
    13e6:	98 7f       	andi	r25, 0xF8	; 248
    13e8:	ea 81       	ldd	r30, Y+2	; 0x02
    13ea:	fb 81       	ldd	r31, Y+3	; 0x03
    13ec:	84 81       	ldd	r24, Z+4	; 0x04
    13ee:	8f 78       	andi	r24, 0x8F	; 143
    13f0:	89 2b       	or	r24, r25
    13f2:	8c 93       	st	X, r24
}
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	cf 91       	pop	r28
    13fc:	df 91       	pop	r29
    13fe:	08 95       	ret

00001400 <Timer1_deInit>:



void Timer1_deInit(void){
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
	TCCR1B=(TCCR1B|0xF8)|((0x00)&0x8F);//No clock source (Timer/Counter stopped).
    1408:	ae e4       	ldi	r26, 0x4E	; 78
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	ee e4       	ldi	r30, 0x4E	; 78
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	88 6f       	ori	r24, 0xF8	; 248
    1414:	8c 93       	st	X, r24
	TIMSK=0; //Disable interrupt in TIME1 module
    1416:	e9 e5       	ldi	r30, 0x59	; 89
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	10 82       	st	Z, r1
}
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	08 95       	ret

00001422 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void)){
    1422:	df 93       	push	r29
    1424:	cf 93       	push	r28
    1426:	00 d0       	rcall	.+0      	; 0x1428 <Timer1_setCallBack+0x6>
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	9a 83       	std	Y+2, r25	; 0x02
    142e:	89 83       	std	Y+1, r24	; 0x01
	g_ptr_callBack = a_ptr;
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	9a 81       	ldd	r25, Y+2	; 0x02
    1434:	90 93 db 00 	sts	0x00DB, r25
    1438:	80 93 da 00 	sts	0x00DA, r24

}
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	08 95       	ret

00001446 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	00 d0       	rcall	.+0      	; 0x144c <GPIO_setupPinDirection+0x6>
    144c:	00 d0       	rcall	.+0      	; 0x144e <GPIO_setupPinDirection+0x8>
    144e:	0f 92       	push	r0
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	89 83       	std	Y+1, r24	; 0x01
    1456:	6a 83       	std	Y+2, r22	; 0x02
    1458:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	88 30       	cpi	r24, 0x08	; 8
    145e:	08 f0       	brcs	.+2      	; 0x1462 <GPIO_setupPinDirection+0x1c>
    1460:	d5 c0       	rjmp	.+426    	; 0x160c <GPIO_setupPinDirection+0x1c6>
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	84 30       	cpi	r24, 0x04	; 4
    1466:	08 f0       	brcs	.+2      	; 0x146a <GPIO_setupPinDirection+0x24>
    1468:	d1 c0       	rjmp	.+418    	; 0x160c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	3d 83       	std	Y+5, r19	; 0x05
    1472:	2c 83       	std	Y+4, r18	; 0x04
    1474:	8c 81       	ldd	r24, Y+4	; 0x04
    1476:	9d 81       	ldd	r25, Y+5	; 0x05
    1478:	81 30       	cpi	r24, 0x01	; 1
    147a:	91 05       	cpc	r25, r1
    147c:	09 f4       	brne	.+2      	; 0x1480 <GPIO_setupPinDirection+0x3a>
    147e:	43 c0       	rjmp	.+134    	; 0x1506 <GPIO_setupPinDirection+0xc0>
    1480:	2c 81       	ldd	r18, Y+4	; 0x04
    1482:	3d 81       	ldd	r19, Y+5	; 0x05
    1484:	22 30       	cpi	r18, 0x02	; 2
    1486:	31 05       	cpc	r19, r1
    1488:	2c f4       	brge	.+10     	; 0x1494 <GPIO_setupPinDirection+0x4e>
    148a:	8c 81       	ldd	r24, Y+4	; 0x04
    148c:	9d 81       	ldd	r25, Y+5	; 0x05
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	71 f0       	breq	.+28     	; 0x14ae <GPIO_setupPinDirection+0x68>
    1492:	bc c0       	rjmp	.+376    	; 0x160c <GPIO_setupPinDirection+0x1c6>
    1494:	2c 81       	ldd	r18, Y+4	; 0x04
    1496:	3d 81       	ldd	r19, Y+5	; 0x05
    1498:	22 30       	cpi	r18, 0x02	; 2
    149a:	31 05       	cpc	r19, r1
    149c:	09 f4       	brne	.+2      	; 0x14a0 <GPIO_setupPinDirection+0x5a>
    149e:	5f c0       	rjmp	.+190    	; 0x155e <GPIO_setupPinDirection+0x118>
    14a0:	8c 81       	ldd	r24, Y+4	; 0x04
    14a2:	9d 81       	ldd	r25, Y+5	; 0x05
    14a4:	83 30       	cpi	r24, 0x03	; 3
    14a6:	91 05       	cpc	r25, r1
    14a8:	09 f4       	brne	.+2      	; 0x14ac <GPIO_setupPinDirection+0x66>
    14aa:	85 c0       	rjmp	.+266    	; 0x15b6 <GPIO_setupPinDirection+0x170>
    14ac:	af c0       	rjmp	.+350    	; 0x160c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	81 30       	cpi	r24, 0x01	; 1
    14b2:	a1 f4       	brne	.+40     	; 0x14dc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    14b4:	aa e3       	ldi	r26, 0x3A	; 58
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	ea e3       	ldi	r30, 0x3A	; 58
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	48 2f       	mov	r20, r24
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	28 2f       	mov	r18, r24
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	02 2e       	mov	r0, r18
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <GPIO_setupPinDirection+0x8c>
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	0a 94       	dec	r0
    14d4:	e2 f7       	brpl	.-8      	; 0x14ce <GPIO_setupPinDirection+0x88>
    14d6:	84 2b       	or	r24, r20
    14d8:	8c 93       	st	X, r24
    14da:	98 c0       	rjmp	.+304    	; 0x160c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    14dc:	aa e3       	ldi	r26, 0x3A	; 58
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	ea e3       	ldi	r30, 0x3A	; 58
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	48 2f       	mov	r20, r24
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	02 2e       	mov	r0, r18
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <GPIO_setupPinDirection+0xb4>
    14f6:	88 0f       	add	r24, r24
    14f8:	99 1f       	adc	r25, r25
    14fa:	0a 94       	dec	r0
    14fc:	e2 f7       	brpl	.-8      	; 0x14f6 <GPIO_setupPinDirection+0xb0>
    14fe:	80 95       	com	r24
    1500:	84 23       	and	r24, r20
    1502:	8c 93       	st	X, r24
    1504:	83 c0       	rjmp	.+262    	; 0x160c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	81 30       	cpi	r24, 0x01	; 1
    150a:	a1 f4       	brne	.+40     	; 0x1534 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    150c:	a7 e3       	ldi	r26, 0x37	; 55
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e7 e3       	ldi	r30, 0x37	; 55
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	48 2f       	mov	r20, r24
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	28 2f       	mov	r18, r24
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	02 2e       	mov	r0, r18
    1524:	02 c0       	rjmp	.+4      	; 0x152a <GPIO_setupPinDirection+0xe4>
    1526:	88 0f       	add	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	0a 94       	dec	r0
    152c:	e2 f7       	brpl	.-8      	; 0x1526 <GPIO_setupPinDirection+0xe0>
    152e:	84 2b       	or	r24, r20
    1530:	8c 93       	st	X, r24
    1532:	6c c0       	rjmp	.+216    	; 0x160c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1534:	a7 e3       	ldi	r26, 0x37	; 55
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e7 e3       	ldi	r30, 0x37	; 55
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	48 2f       	mov	r20, r24
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	28 2f       	mov	r18, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	02 2e       	mov	r0, r18
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <GPIO_setupPinDirection+0x10c>
    154e:	88 0f       	add	r24, r24
    1550:	99 1f       	adc	r25, r25
    1552:	0a 94       	dec	r0
    1554:	e2 f7       	brpl	.-8      	; 0x154e <GPIO_setupPinDirection+0x108>
    1556:	80 95       	com	r24
    1558:	84 23       	and	r24, r20
    155a:	8c 93       	st	X, r24
    155c:	57 c0       	rjmp	.+174    	; 0x160c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	81 30       	cpi	r24, 0x01	; 1
    1562:	a1 f4       	brne	.+40     	; 0x158c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1564:	a4 e3       	ldi	r26, 0x34	; 52
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	e4 e3       	ldi	r30, 0x34	; 52
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	48 2f       	mov	r20, r24
    1570:	8a 81       	ldd	r24, Y+2	; 0x02
    1572:	28 2f       	mov	r18, r24
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	02 2e       	mov	r0, r18
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <GPIO_setupPinDirection+0x13c>
    157e:	88 0f       	add	r24, r24
    1580:	99 1f       	adc	r25, r25
    1582:	0a 94       	dec	r0
    1584:	e2 f7       	brpl	.-8      	; 0x157e <GPIO_setupPinDirection+0x138>
    1586:	84 2b       	or	r24, r20
    1588:	8c 93       	st	X, r24
    158a:	40 c0       	rjmp	.+128    	; 0x160c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    158c:	a4 e3       	ldi	r26, 0x34	; 52
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e4 e3       	ldi	r30, 0x34	; 52
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	48 2f       	mov	r20, r24
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	02 2e       	mov	r0, r18
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <GPIO_setupPinDirection+0x164>
    15a6:	88 0f       	add	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	0a 94       	dec	r0
    15ac:	e2 f7       	brpl	.-8      	; 0x15a6 <GPIO_setupPinDirection+0x160>
    15ae:	80 95       	com	r24
    15b0:	84 23       	and	r24, r20
    15b2:	8c 93       	st	X, r24
    15b4:	2b c0       	rjmp	.+86     	; 0x160c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	81 30       	cpi	r24, 0x01	; 1
    15ba:	a1 f4       	brne	.+40     	; 0x15e4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    15bc:	a1 e3       	ldi	r26, 0x31	; 49
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	e1 e3       	ldi	r30, 0x31	; 49
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	48 2f       	mov	r20, r24
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	28 2f       	mov	r18, r24
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	02 2e       	mov	r0, r18
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <GPIO_setupPinDirection+0x194>
    15d6:	88 0f       	add	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	0a 94       	dec	r0
    15dc:	e2 f7       	brpl	.-8      	; 0x15d6 <GPIO_setupPinDirection+0x190>
    15de:	84 2b       	or	r24, r20
    15e0:	8c 93       	st	X, r24
    15e2:	14 c0       	rjmp	.+40     	; 0x160c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    15e4:	a1 e3       	ldi	r26, 0x31	; 49
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e1 e3       	ldi	r30, 0x31	; 49
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	48 2f       	mov	r20, r24
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	02 2e       	mov	r0, r18
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <GPIO_setupPinDirection+0x1bc>
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	0a 94       	dec	r0
    1604:	e2 f7       	brpl	.-8      	; 0x15fe <GPIO_setupPinDirection+0x1b8>
    1606:	80 95       	com	r24
    1608:	84 23       	and	r24, r20
    160a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	0f 90       	pop	r0
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	cf 91       	pop	r28
    1618:	df 91       	pop	r29
    161a:	08 95       	ret

0000161c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    161c:	df 93       	push	r29
    161e:	cf 93       	push	r28
    1620:	00 d0       	rcall	.+0      	; 0x1622 <GPIO_writePin+0x6>
    1622:	00 d0       	rcall	.+0      	; 0x1624 <GPIO_writePin+0x8>
    1624:	0f 92       	push	r0
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
    162a:	89 83       	std	Y+1, r24	; 0x01
    162c:	6a 83       	std	Y+2, r22	; 0x02
    162e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	88 30       	cpi	r24, 0x08	; 8
    1634:	08 f0       	brcs	.+2      	; 0x1638 <GPIO_writePin+0x1c>
    1636:	d5 c0       	rjmp	.+426    	; 0x17e2 <GPIO_writePin+0x1c6>
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	84 30       	cpi	r24, 0x04	; 4
    163c:	08 f0       	brcs	.+2      	; 0x1640 <GPIO_writePin+0x24>
    163e:	d1 c0       	rjmp	.+418    	; 0x17e2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	28 2f       	mov	r18, r24
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	3d 83       	std	Y+5, r19	; 0x05
    1648:	2c 83       	std	Y+4, r18	; 0x04
    164a:	8c 81       	ldd	r24, Y+4	; 0x04
    164c:	9d 81       	ldd	r25, Y+5	; 0x05
    164e:	81 30       	cpi	r24, 0x01	; 1
    1650:	91 05       	cpc	r25, r1
    1652:	09 f4       	brne	.+2      	; 0x1656 <GPIO_writePin+0x3a>
    1654:	43 c0       	rjmp	.+134    	; 0x16dc <GPIO_writePin+0xc0>
    1656:	2c 81       	ldd	r18, Y+4	; 0x04
    1658:	3d 81       	ldd	r19, Y+5	; 0x05
    165a:	22 30       	cpi	r18, 0x02	; 2
    165c:	31 05       	cpc	r19, r1
    165e:	2c f4       	brge	.+10     	; 0x166a <GPIO_writePin+0x4e>
    1660:	8c 81       	ldd	r24, Y+4	; 0x04
    1662:	9d 81       	ldd	r25, Y+5	; 0x05
    1664:	00 97       	sbiw	r24, 0x00	; 0
    1666:	71 f0       	breq	.+28     	; 0x1684 <GPIO_writePin+0x68>
    1668:	bc c0       	rjmp	.+376    	; 0x17e2 <GPIO_writePin+0x1c6>
    166a:	2c 81       	ldd	r18, Y+4	; 0x04
    166c:	3d 81       	ldd	r19, Y+5	; 0x05
    166e:	22 30       	cpi	r18, 0x02	; 2
    1670:	31 05       	cpc	r19, r1
    1672:	09 f4       	brne	.+2      	; 0x1676 <GPIO_writePin+0x5a>
    1674:	5f c0       	rjmp	.+190    	; 0x1734 <GPIO_writePin+0x118>
    1676:	8c 81       	ldd	r24, Y+4	; 0x04
    1678:	9d 81       	ldd	r25, Y+5	; 0x05
    167a:	83 30       	cpi	r24, 0x03	; 3
    167c:	91 05       	cpc	r25, r1
    167e:	09 f4       	brne	.+2      	; 0x1682 <GPIO_writePin+0x66>
    1680:	85 c0       	rjmp	.+266    	; 0x178c <GPIO_writePin+0x170>
    1682:	af c0       	rjmp	.+350    	; 0x17e2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    1686:	81 30       	cpi	r24, 0x01	; 1
    1688:	a1 f4       	brne	.+40     	; 0x16b2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    168a:	ab e3       	ldi	r26, 0x3B	; 59
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	eb e3       	ldi	r30, 0x3B	; 59
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	48 2f       	mov	r20, r24
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	28 2f       	mov	r18, r24
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	02 2e       	mov	r0, r18
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <GPIO_writePin+0x8c>
    16a4:	88 0f       	add	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	0a 94       	dec	r0
    16aa:	e2 f7       	brpl	.-8      	; 0x16a4 <GPIO_writePin+0x88>
    16ac:	84 2b       	or	r24, r20
    16ae:	8c 93       	st	X, r24
    16b0:	98 c0       	rjmp	.+304    	; 0x17e2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    16b2:	ab e3       	ldi	r26, 0x3B	; 59
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	eb e3       	ldi	r30, 0x3B	; 59
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	48 2f       	mov	r20, r24
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	02 2e       	mov	r0, r18
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <GPIO_writePin+0xb4>
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	0a 94       	dec	r0
    16d2:	e2 f7       	brpl	.-8      	; 0x16cc <GPIO_writePin+0xb0>
    16d4:	80 95       	com	r24
    16d6:	84 23       	and	r24, r20
    16d8:	8c 93       	st	X, r24
    16da:	83 c0       	rjmp	.+262    	; 0x17e2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	81 30       	cpi	r24, 0x01	; 1
    16e0:	a1 f4       	brne	.+40     	; 0x170a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    16e2:	a8 e3       	ldi	r26, 0x38	; 56
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e8 e3       	ldi	r30, 0x38	; 56
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	48 2f       	mov	r20, r24
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	02 2e       	mov	r0, r18
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <GPIO_writePin+0xe4>
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	0a 94       	dec	r0
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <GPIO_writePin+0xe0>
    1704:	84 2b       	or	r24, r20
    1706:	8c 93       	st	X, r24
    1708:	6c c0       	rjmp	.+216    	; 0x17e2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    170a:	a8 e3       	ldi	r26, 0x38	; 56
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	e8 e3       	ldi	r30, 0x38	; 56
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	48 2f       	mov	r20, r24
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	28 2f       	mov	r18, r24
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	02 2e       	mov	r0, r18
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <GPIO_writePin+0x10c>
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	0a 94       	dec	r0
    172a:	e2 f7       	brpl	.-8      	; 0x1724 <GPIO_writePin+0x108>
    172c:	80 95       	com	r24
    172e:	84 23       	and	r24, r20
    1730:	8c 93       	st	X, r24
    1732:	57 c0       	rjmp	.+174    	; 0x17e2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1734:	8b 81       	ldd	r24, Y+3	; 0x03
    1736:	81 30       	cpi	r24, 0x01	; 1
    1738:	a1 f4       	brne	.+40     	; 0x1762 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    173a:	a5 e3       	ldi	r26, 0x35	; 53
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e5 e3       	ldi	r30, 0x35	; 53
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	48 2f       	mov	r20, r24
    1746:	8a 81       	ldd	r24, Y+2	; 0x02
    1748:	28 2f       	mov	r18, r24
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	02 2e       	mov	r0, r18
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <GPIO_writePin+0x13c>
    1754:	88 0f       	add	r24, r24
    1756:	99 1f       	adc	r25, r25
    1758:	0a 94       	dec	r0
    175a:	e2 f7       	brpl	.-8      	; 0x1754 <GPIO_writePin+0x138>
    175c:	84 2b       	or	r24, r20
    175e:	8c 93       	st	X, r24
    1760:	40 c0       	rjmp	.+128    	; 0x17e2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1762:	a5 e3       	ldi	r26, 0x35	; 53
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	e5 e3       	ldi	r30, 0x35	; 53
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	48 2f       	mov	r20, r24
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	28 2f       	mov	r18, r24
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	02 2e       	mov	r0, r18
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <GPIO_writePin+0x164>
    177c:	88 0f       	add	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	0a 94       	dec	r0
    1782:	e2 f7       	brpl	.-8      	; 0x177c <GPIO_writePin+0x160>
    1784:	80 95       	com	r24
    1786:	84 23       	and	r24, r20
    1788:	8c 93       	st	X, r24
    178a:	2b c0       	rjmp	.+86     	; 0x17e2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    178c:	8b 81       	ldd	r24, Y+3	; 0x03
    178e:	81 30       	cpi	r24, 0x01	; 1
    1790:	a1 f4       	brne	.+40     	; 0x17ba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1792:	a2 e3       	ldi	r26, 0x32	; 50
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	e2 e3       	ldi	r30, 0x32	; 50
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	48 2f       	mov	r20, r24
    179e:	8a 81       	ldd	r24, Y+2	; 0x02
    17a0:	28 2f       	mov	r18, r24
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	02 2e       	mov	r0, r18
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <GPIO_writePin+0x194>
    17ac:	88 0f       	add	r24, r24
    17ae:	99 1f       	adc	r25, r25
    17b0:	0a 94       	dec	r0
    17b2:	e2 f7       	brpl	.-8      	; 0x17ac <GPIO_writePin+0x190>
    17b4:	84 2b       	or	r24, r20
    17b6:	8c 93       	st	X, r24
    17b8:	14 c0       	rjmp	.+40     	; 0x17e2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    17ba:	a2 e3       	ldi	r26, 0x32	; 50
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e2 e3       	ldi	r30, 0x32	; 50
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	48 2f       	mov	r20, r24
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	02 2e       	mov	r0, r18
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <GPIO_writePin+0x1bc>
    17d4:	88 0f       	add	r24, r24
    17d6:	99 1f       	adc	r25, r25
    17d8:	0a 94       	dec	r0
    17da:	e2 f7       	brpl	.-8      	; 0x17d4 <GPIO_writePin+0x1b8>
    17dc:	80 95       	com	r24
    17de:	84 23       	and	r24, r20
    17e0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	0f 90       	pop	r0
    17ea:	0f 90       	pop	r0
    17ec:	cf 91       	pop	r28
    17ee:	df 91       	pop	r29
    17f0:	08 95       	ret

000017f2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    17f2:	df 93       	push	r29
    17f4:	cf 93       	push	r28
    17f6:	00 d0       	rcall	.+0      	; 0x17f8 <GPIO_readPin+0x6>
    17f8:	00 d0       	rcall	.+0      	; 0x17fa <GPIO_readPin+0x8>
    17fa:	0f 92       	push	r0
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	8a 83       	std	Y+2, r24	; 0x02
    1802:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1804:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1806:	8b 81       	ldd	r24, Y+3	; 0x03
    1808:	88 30       	cpi	r24, 0x08	; 8
    180a:	08 f0       	brcs	.+2      	; 0x180e <GPIO_readPin+0x1c>
    180c:	84 c0       	rjmp	.+264    	; 0x1916 <GPIO_readPin+0x124>
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	84 30       	cpi	r24, 0x04	; 4
    1812:	08 f0       	brcs	.+2      	; 0x1816 <GPIO_readPin+0x24>
    1814:	80 c0       	rjmp	.+256    	; 0x1916 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	3d 83       	std	Y+5, r19	; 0x05
    181e:	2c 83       	std	Y+4, r18	; 0x04
    1820:	4c 81       	ldd	r20, Y+4	; 0x04
    1822:	5d 81       	ldd	r21, Y+5	; 0x05
    1824:	41 30       	cpi	r20, 0x01	; 1
    1826:	51 05       	cpc	r21, r1
    1828:	79 f1       	breq	.+94     	; 0x1888 <GPIO_readPin+0x96>
    182a:	8c 81       	ldd	r24, Y+4	; 0x04
    182c:	9d 81       	ldd	r25, Y+5	; 0x05
    182e:	82 30       	cpi	r24, 0x02	; 2
    1830:	91 05       	cpc	r25, r1
    1832:	34 f4       	brge	.+12     	; 0x1840 <GPIO_readPin+0x4e>
    1834:	2c 81       	ldd	r18, Y+4	; 0x04
    1836:	3d 81       	ldd	r19, Y+5	; 0x05
    1838:	21 15       	cp	r18, r1
    183a:	31 05       	cpc	r19, r1
    183c:	69 f0       	breq	.+26     	; 0x1858 <GPIO_readPin+0x66>
    183e:	6b c0       	rjmp	.+214    	; 0x1916 <GPIO_readPin+0x124>
    1840:	4c 81       	ldd	r20, Y+4	; 0x04
    1842:	5d 81       	ldd	r21, Y+5	; 0x05
    1844:	42 30       	cpi	r20, 0x02	; 2
    1846:	51 05       	cpc	r21, r1
    1848:	b9 f1       	breq	.+110    	; 0x18b8 <GPIO_readPin+0xc6>
    184a:	8c 81       	ldd	r24, Y+4	; 0x04
    184c:	9d 81       	ldd	r25, Y+5	; 0x05
    184e:	83 30       	cpi	r24, 0x03	; 3
    1850:	91 05       	cpc	r25, r1
    1852:	09 f4       	brne	.+2      	; 0x1856 <GPIO_readPin+0x64>
    1854:	49 c0       	rjmp	.+146    	; 0x18e8 <GPIO_readPin+0xf6>
    1856:	5f c0       	rjmp	.+190    	; 0x1916 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1858:	e9 e3       	ldi	r30, 0x39	; 57
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	28 2f       	mov	r18, r24
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	88 2f       	mov	r24, r24
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	a9 01       	movw	r20, r18
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <GPIO_readPin+0x7e>
    186c:	55 95       	asr	r21
    186e:	47 95       	ror	r20
    1870:	8a 95       	dec	r24
    1872:	e2 f7       	brpl	.-8      	; 0x186c <GPIO_readPin+0x7a>
    1874:	ca 01       	movw	r24, r20
    1876:	81 70       	andi	r24, 0x01	; 1
    1878:	90 70       	andi	r25, 0x00	; 0
    187a:	88 23       	and	r24, r24
    187c:	19 f0       	breq	.+6      	; 0x1884 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	89 83       	std	Y+1, r24	; 0x01
    1882:	49 c0       	rjmp	.+146    	; 0x1916 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1884:	19 82       	std	Y+1, r1	; 0x01
    1886:	47 c0       	rjmp	.+142    	; 0x1916 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1888:	e6 e3       	ldi	r30, 0x36	; 54
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	28 2f       	mov	r18, r24
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	8b 81       	ldd	r24, Y+3	; 0x03
    1894:	88 2f       	mov	r24, r24
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	a9 01       	movw	r20, r18
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <GPIO_readPin+0xae>
    189c:	55 95       	asr	r21
    189e:	47 95       	ror	r20
    18a0:	8a 95       	dec	r24
    18a2:	e2 f7       	brpl	.-8      	; 0x189c <GPIO_readPin+0xaa>
    18a4:	ca 01       	movw	r24, r20
    18a6:	81 70       	andi	r24, 0x01	; 1
    18a8:	90 70       	andi	r25, 0x00	; 0
    18aa:	88 23       	and	r24, r24
    18ac:	19 f0       	breq	.+6      	; 0x18b4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	89 83       	std	Y+1, r24	; 0x01
    18b2:	31 c0       	rjmp	.+98     	; 0x1916 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18b4:	19 82       	std	Y+1, r1	; 0x01
    18b6:	2f c0       	rjmp	.+94     	; 0x1916 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    18b8:	e3 e3       	ldi	r30, 0x33	; 51
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	28 2f       	mov	r18, r24
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	8b 81       	ldd	r24, Y+3	; 0x03
    18c4:	88 2f       	mov	r24, r24
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	a9 01       	movw	r20, r18
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <GPIO_readPin+0xde>
    18cc:	55 95       	asr	r21
    18ce:	47 95       	ror	r20
    18d0:	8a 95       	dec	r24
    18d2:	e2 f7       	brpl	.-8      	; 0x18cc <GPIO_readPin+0xda>
    18d4:	ca 01       	movw	r24, r20
    18d6:	81 70       	andi	r24, 0x01	; 1
    18d8:	90 70       	andi	r25, 0x00	; 0
    18da:	88 23       	and	r24, r24
    18dc:	19 f0       	breq	.+6      	; 0x18e4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	89 83       	std	Y+1, r24	; 0x01
    18e2:	19 c0       	rjmp	.+50     	; 0x1916 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18e4:	19 82       	std	Y+1, r1	; 0x01
    18e6:	17 c0       	rjmp	.+46     	; 0x1916 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    18e8:	e0 e3       	ldi	r30, 0x30	; 48
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	80 81       	ld	r24, Z
    18ee:	28 2f       	mov	r18, r24
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	8b 81       	ldd	r24, Y+3	; 0x03
    18f4:	88 2f       	mov	r24, r24
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	a9 01       	movw	r20, r18
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <GPIO_readPin+0x10e>
    18fc:	55 95       	asr	r21
    18fe:	47 95       	ror	r20
    1900:	8a 95       	dec	r24
    1902:	e2 f7       	brpl	.-8      	; 0x18fc <GPIO_readPin+0x10a>
    1904:	ca 01       	movw	r24, r20
    1906:	81 70       	andi	r24, 0x01	; 1
    1908:	90 70       	andi	r25, 0x00	; 0
    190a:	88 23       	and	r24, r24
    190c:	19 f0       	breq	.+6      	; 0x1914 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	89 83       	std	Y+1, r24	; 0x01
    1912:	01 c0       	rjmp	.+2      	; 0x1916 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1914:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1916:	89 81       	ldd	r24, Y+1	; 0x01
}
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	cf 91       	pop	r28
    1924:	df 91       	pop	r29
    1926:	08 95       	ret

00001928 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1928:	df 93       	push	r29
    192a:	cf 93       	push	r28
    192c:	00 d0       	rcall	.+0      	; 0x192e <GPIO_setupPortDirection+0x6>
    192e:	00 d0       	rcall	.+0      	; 0x1930 <GPIO_setupPortDirection+0x8>
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
    1934:	89 83       	std	Y+1, r24	; 0x01
    1936:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1938:	89 81       	ldd	r24, Y+1	; 0x01
    193a:	84 30       	cpi	r24, 0x04	; 4
    193c:	90 f5       	brcc	.+100    	; 0x19a2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	3c 83       	std	Y+4, r19	; 0x04
    1946:	2b 83       	std	Y+3, r18	; 0x03
    1948:	8b 81       	ldd	r24, Y+3	; 0x03
    194a:	9c 81       	ldd	r25, Y+4	; 0x04
    194c:	81 30       	cpi	r24, 0x01	; 1
    194e:	91 05       	cpc	r25, r1
    1950:	d1 f0       	breq	.+52     	; 0x1986 <GPIO_setupPortDirection+0x5e>
    1952:	2b 81       	ldd	r18, Y+3	; 0x03
    1954:	3c 81       	ldd	r19, Y+4	; 0x04
    1956:	22 30       	cpi	r18, 0x02	; 2
    1958:	31 05       	cpc	r19, r1
    195a:	2c f4       	brge	.+10     	; 0x1966 <GPIO_setupPortDirection+0x3e>
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	9c 81       	ldd	r25, Y+4	; 0x04
    1960:	00 97       	sbiw	r24, 0x00	; 0
    1962:	61 f0       	breq	.+24     	; 0x197c <GPIO_setupPortDirection+0x54>
    1964:	1e c0       	rjmp	.+60     	; 0x19a2 <GPIO_setupPortDirection+0x7a>
    1966:	2b 81       	ldd	r18, Y+3	; 0x03
    1968:	3c 81       	ldd	r19, Y+4	; 0x04
    196a:	22 30       	cpi	r18, 0x02	; 2
    196c:	31 05       	cpc	r19, r1
    196e:	81 f0       	breq	.+32     	; 0x1990 <GPIO_setupPortDirection+0x68>
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	9c 81       	ldd	r25, Y+4	; 0x04
    1974:	83 30       	cpi	r24, 0x03	; 3
    1976:	91 05       	cpc	r25, r1
    1978:	81 f0       	breq	.+32     	; 0x199a <GPIO_setupPortDirection+0x72>
    197a:	13 c0       	rjmp	.+38     	; 0x19a2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    197c:	ea e3       	ldi	r30, 0x3A	; 58
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	8a 81       	ldd	r24, Y+2	; 0x02
    1982:	80 83       	st	Z, r24
    1984:	0e c0       	rjmp	.+28     	; 0x19a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1986:	e7 e3       	ldi	r30, 0x37	; 55
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	80 83       	st	Z, r24
    198e:	09 c0       	rjmp	.+18     	; 0x19a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1990:	e4 e3       	ldi	r30, 0x34	; 52
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	8a 81       	ldd	r24, Y+2	; 0x02
    1996:	80 83       	st	Z, r24
    1998:	04 c0       	rjmp	.+8      	; 0x19a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    199a:	e1 e3       	ldi	r30, 0x31	; 49
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	cf 91       	pop	r28
    19ac:	df 91       	pop	r29
    19ae:	08 95       	ret

000019b0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    19b0:	df 93       	push	r29
    19b2:	cf 93       	push	r28
    19b4:	00 d0       	rcall	.+0      	; 0x19b6 <GPIO_writePort+0x6>
    19b6:	00 d0       	rcall	.+0      	; 0x19b8 <GPIO_writePort+0x8>
    19b8:	cd b7       	in	r28, 0x3d	; 61
    19ba:	de b7       	in	r29, 0x3e	; 62
    19bc:	89 83       	std	Y+1, r24	; 0x01
    19be:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19c0:	89 81       	ldd	r24, Y+1	; 0x01
    19c2:	84 30       	cpi	r24, 0x04	; 4
    19c4:	90 f5       	brcc	.+100    	; 0x1a2a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    19c6:	89 81       	ldd	r24, Y+1	; 0x01
    19c8:	28 2f       	mov	r18, r24
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	3c 83       	std	Y+4, r19	; 0x04
    19ce:	2b 83       	std	Y+3, r18	; 0x03
    19d0:	8b 81       	ldd	r24, Y+3	; 0x03
    19d2:	9c 81       	ldd	r25, Y+4	; 0x04
    19d4:	81 30       	cpi	r24, 0x01	; 1
    19d6:	91 05       	cpc	r25, r1
    19d8:	d1 f0       	breq	.+52     	; 0x1a0e <GPIO_writePort+0x5e>
    19da:	2b 81       	ldd	r18, Y+3	; 0x03
    19dc:	3c 81       	ldd	r19, Y+4	; 0x04
    19de:	22 30       	cpi	r18, 0x02	; 2
    19e0:	31 05       	cpc	r19, r1
    19e2:	2c f4       	brge	.+10     	; 0x19ee <GPIO_writePort+0x3e>
    19e4:	8b 81       	ldd	r24, Y+3	; 0x03
    19e6:	9c 81       	ldd	r25, Y+4	; 0x04
    19e8:	00 97       	sbiw	r24, 0x00	; 0
    19ea:	61 f0       	breq	.+24     	; 0x1a04 <GPIO_writePort+0x54>
    19ec:	1e c0       	rjmp	.+60     	; 0x1a2a <GPIO_writePort+0x7a>
    19ee:	2b 81       	ldd	r18, Y+3	; 0x03
    19f0:	3c 81       	ldd	r19, Y+4	; 0x04
    19f2:	22 30       	cpi	r18, 0x02	; 2
    19f4:	31 05       	cpc	r19, r1
    19f6:	81 f0       	breq	.+32     	; 0x1a18 <GPIO_writePort+0x68>
    19f8:	8b 81       	ldd	r24, Y+3	; 0x03
    19fa:	9c 81       	ldd	r25, Y+4	; 0x04
    19fc:	83 30       	cpi	r24, 0x03	; 3
    19fe:	91 05       	cpc	r25, r1
    1a00:	81 f0       	breq	.+32     	; 0x1a22 <GPIO_writePort+0x72>
    1a02:	13 c0       	rjmp	.+38     	; 0x1a2a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1a04:	eb e3       	ldi	r30, 0x3B	; 59
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0a:	80 83       	st	Z, r24
    1a0c:	0e c0       	rjmp	.+28     	; 0x1a2a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1a0e:	e8 e3       	ldi	r30, 0x38	; 56
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	8a 81       	ldd	r24, Y+2	; 0x02
    1a14:	80 83       	st	Z, r24
    1a16:	09 c0       	rjmp	.+18     	; 0x1a2a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1a18:	e5 e3       	ldi	r30, 0x35	; 53
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	80 83       	st	Z, r24
    1a20:	04 c0       	rjmp	.+8      	; 0x1a2a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1a22:	e2 e3       	ldi	r30, 0x32	; 50
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	cf 91       	pop	r28
    1a34:	df 91       	pop	r29
    1a36:	08 95       	ret

00001a38 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1a38:	df 93       	push	r29
    1a3a:	cf 93       	push	r28
    1a3c:	00 d0       	rcall	.+0      	; 0x1a3e <GPIO_readPort+0x6>
    1a3e:	00 d0       	rcall	.+0      	; 0x1a40 <GPIO_readPort+0x8>
    1a40:	cd b7       	in	r28, 0x3d	; 61
    1a42:	de b7       	in	r29, 0x3e	; 62
    1a44:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1a46:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	84 30       	cpi	r24, 0x04	; 4
    1a4c:	90 f5       	brcc	.+100    	; 0x1ab2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	3c 83       	std	Y+4, r19	; 0x04
    1a56:	2b 83       	std	Y+3, r18	; 0x03
    1a58:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5c:	81 30       	cpi	r24, 0x01	; 1
    1a5e:	91 05       	cpc	r25, r1
    1a60:	d1 f0       	breq	.+52     	; 0x1a96 <GPIO_readPort+0x5e>
    1a62:	2b 81       	ldd	r18, Y+3	; 0x03
    1a64:	3c 81       	ldd	r19, Y+4	; 0x04
    1a66:	22 30       	cpi	r18, 0x02	; 2
    1a68:	31 05       	cpc	r19, r1
    1a6a:	2c f4       	brge	.+10     	; 0x1a76 <GPIO_readPort+0x3e>
    1a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a70:	00 97       	sbiw	r24, 0x00	; 0
    1a72:	61 f0       	breq	.+24     	; 0x1a8c <GPIO_readPort+0x54>
    1a74:	1e c0       	rjmp	.+60     	; 0x1ab2 <GPIO_readPort+0x7a>
    1a76:	2b 81       	ldd	r18, Y+3	; 0x03
    1a78:	3c 81       	ldd	r19, Y+4	; 0x04
    1a7a:	22 30       	cpi	r18, 0x02	; 2
    1a7c:	31 05       	cpc	r19, r1
    1a7e:	81 f0       	breq	.+32     	; 0x1aa0 <GPIO_readPort+0x68>
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	9c 81       	ldd	r25, Y+4	; 0x04
    1a84:	83 30       	cpi	r24, 0x03	; 3
    1a86:	91 05       	cpc	r25, r1
    1a88:	81 f0       	breq	.+32     	; 0x1aaa <GPIO_readPort+0x72>
    1a8a:	13 c0       	rjmp	.+38     	; 0x1ab2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1a8c:	e9 e3       	ldi	r30, 0x39	; 57
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	89 83       	std	Y+1, r24	; 0x01
    1a94:	0e c0       	rjmp	.+28     	; 0x1ab2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1a96:	e6 e3       	ldi	r30, 0x36	; 54
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	89 83       	std	Y+1, r24	; 0x01
    1a9e:	09 c0       	rjmp	.+18     	; 0x1ab2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1aa0:	e3 e3       	ldi	r30, 0x33	; 51
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	89 83       	std	Y+1, r24	; 0x01
    1aa8:	04 c0       	rjmp	.+8      	; 0x1ab2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1aaa:	e0 e3       	ldi	r30, 0x30	; 48
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	0f 90       	pop	r0
    1abc:	cf 91       	pop	r28
    1abe:	df 91       	pop	r29
    1ac0:	08 95       	ret

00001ac2 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1ac2:	df 93       	push	r29
    1ac4:	cf 93       	push	r28
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
    1aca:	60 97       	sbiw	r28, 0x10	; 16
    1acc:	0f b6       	in	r0, 0x3f	; 63
    1ace:	f8 94       	cli
    1ad0:	de bf       	out	0x3e, r29	; 62
    1ad2:	0f be       	out	0x3f, r0	; 63
    1ad4:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	64 e0       	ldi	r22, 0x04	; 4
    1ada:	40 e0       	ldi	r20, 0x00	; 0
    1adc:	0e 94 23 0a 	call	0x1446	; 0x1446 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	65 e0       	ldi	r22, 0x05	; 5
    1ae4:	40 e0       	ldi	r20, 0x00	; 0
    1ae6:	0e 94 23 0a 	call	0x1446	; 0x1446 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	66 e0       	ldi	r22, 0x06	; 6
    1aee:	40 e0       	ldi	r20, 0x00	; 0
    1af0:	0e 94 23 0a 	call	0x1446	; 0x1446 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	67 e0       	ldi	r22, 0x07	; 7
    1af8:	40 e0       	ldi	r20, 0x00	; 0
    1afa:	0e 94 23 0a 	call	0x1446	; 0x1446 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1afe:	83 e0       	ldi	r24, 0x03	; 3
    1b00:	62 e0       	ldi	r22, 0x02	; 2
    1b02:	40 e0       	ldi	r20, 0x00	; 0
    1b04:	0e 94 23 0a 	call	0x1446	; 0x1446 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1b08:	83 e0       	ldi	r24, 0x03	; 3
    1b0a:	63 e0       	ldi	r22, 0x03	; 3
    1b0c:	40 e0       	ldi	r20, 0x00	; 0
    1b0e:	0e 94 23 0a 	call	0x1446	; 0x1446 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1b12:	83 e0       	ldi	r24, 0x03	; 3
    1b14:	64 e0       	ldi	r22, 0x04	; 4
    1b16:	40 e0       	ldi	r20, 0x00	; 0
    1b18:	0e 94 23 0a 	call	0x1446	; 0x1446 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1b1c:	83 e0       	ldi	r24, 0x03	; 3
    1b1e:	65 e0       	ldi	r22, 0x05	; 5
    1b20:	40 e0       	ldi	r20, 0x00	; 0
    1b22:	0e 94 23 0a 	call	0x1446	; 0x1446 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1b26:	1f 86       	std	Y+15, r1	; 0x0f
    1b28:	b4 c0       	rjmp	.+360    	; 0x1c92 <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1b2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b2c:	98 2f       	mov	r25, r24
    1b2e:	9c 5f       	subi	r25, 0xFC	; 252
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	69 2f       	mov	r22, r25
    1b34:	41 e0       	ldi	r20, 0x01	; 1
    1b36:	0e 94 23 0a 	call	0x1446	; 0x1446 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1b3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b3c:	98 2f       	mov	r25, r24
    1b3e:	9c 5f       	subi	r25, 0xFC	; 252
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	69 2f       	mov	r22, r25
    1b44:	40 e0       	ldi	r20, 0x00	; 0
    1b46:	0e 94 0e 0b 	call	0x161c	; 0x161c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1b4a:	18 8a       	std	Y+16, r1	; 0x10
    1b4c:	22 c0       	rjmp	.+68     	; 0x1b92 <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1b4e:	88 89       	ldd	r24, Y+16	; 0x10
    1b50:	98 2f       	mov	r25, r24
    1b52:	9e 5f       	subi	r25, 0xFE	; 254
    1b54:	83 e0       	ldi	r24, 0x03	; 3
    1b56:	69 2f       	mov	r22, r25
    1b58:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <GPIO_readPin>
    1b5c:	88 23       	and	r24, r24
    1b5e:	b1 f4       	brne	.+44     	; 0x1b8c <KEYPAD_getPressedKey+0xca>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1b60:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b62:	88 2f       	mov	r24, r24
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	88 0f       	add	r24, r24
    1b68:	99 1f       	adc	r25, r25
    1b6a:	88 0f       	add	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	98 2f       	mov	r25, r24
    1b70:	88 89       	ldd	r24, Y+16	; 0x10
    1b72:	89 0f       	add	r24, r25
    1b74:	8f 5f       	subi	r24, 0xFF	; 255
    1b76:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1b7a:	60 96       	adiw	r28, 0x10	; 16
    1b7c:	0f b6       	in	r0, 0x3f	; 63
    1b7e:	f8 94       	cli
    1b80:	de bf       	out	0x3e, r29	; 62
    1b82:	0f be       	out	0x3f, r0	; 63
    1b84:	cd bf       	out	0x3d, r28	; 61
    1b86:	cf 91       	pop	r28
    1b88:	df 91       	pop	r29
    1b8a:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1b8c:	88 89       	ldd	r24, Y+16	; 0x10
    1b8e:	8f 5f       	subi	r24, 0xFF	; 255
    1b90:	88 8b       	std	Y+16, r24	; 0x10
    1b92:	88 89       	ldd	r24, Y+16	; 0x10
    1b94:	84 30       	cpi	r24, 0x04	; 4
    1b96:	d8 f2       	brcs	.-74     	; 0x1b4e <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1b98:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b9a:	98 2f       	mov	r25, r24
    1b9c:	9c 5f       	subi	r25, 0xFC	; 252
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	69 2f       	mov	r22, r25
    1ba2:	40 e0       	ldi	r20, 0x00	; 0
    1ba4:	0e 94 23 0a 	call	0x1446	; 0x1446 <GPIO_setupPinDirection>
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	a0 ea       	ldi	r26, 0xA0	; 160
    1bae:	b0 e4       	ldi	r27, 0x40	; 64
    1bb0:	8b 87       	std	Y+11, r24	; 0x0b
    1bb2:	9c 87       	std	Y+12, r25	; 0x0c
    1bb4:	ad 87       	std	Y+13, r26	; 0x0d
    1bb6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	4a ef       	ldi	r20, 0xFA	; 250
    1bc6:	54 e4       	ldi	r21, 0x44	; 68
    1bc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	8f 83       	std	Y+7, r24	; 0x07
    1bd2:	98 87       	std	Y+8, r25	; 0x08
    1bd4:	a9 87       	std	Y+9, r26	; 0x09
    1bd6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bda:	78 85       	ldd	r23, Y+8	; 0x08
    1bdc:	89 85       	ldd	r24, Y+9	; 0x09
    1bde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	40 e8       	ldi	r20, 0x80	; 128
    1be6:	5f e3       	ldi	r21, 0x3F	; 63
    1be8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bec:	88 23       	and	r24, r24
    1bee:	2c f4       	brge	.+10     	; 0x1bfa <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	9e 83       	std	Y+6, r25	; 0x06
    1bf6:	8d 83       	std	Y+5, r24	; 0x05
    1bf8:	3f c0       	rjmp	.+126    	; 0x1c78 <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    1bfa:	6f 81       	ldd	r22, Y+7	; 0x07
    1bfc:	78 85       	ldd	r23, Y+8	; 0x08
    1bfe:	89 85       	ldd	r24, Y+9	; 0x09
    1c00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	3f ef       	ldi	r19, 0xFF	; 255
    1c06:	4f e7       	ldi	r20, 0x7F	; 127
    1c08:	57 e4       	ldi	r21, 0x47	; 71
    1c0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c0e:	18 16       	cp	r1, r24
    1c10:	4c f5       	brge	.+82     	; 0x1c64 <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c12:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c14:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c16:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c18:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	40 e2       	ldi	r20, 0x20	; 32
    1c20:	51 e4       	ldi	r21, 0x41	; 65
    1c22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	bc 01       	movw	r22, r24
    1c2c:	cd 01       	movw	r24, r26
    1c2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	9e 83       	std	Y+6, r25	; 0x06
    1c38:	8d 83       	std	Y+5, r24	; 0x05
    1c3a:	0f c0       	rjmp	.+30     	; 0x1c5a <KEYPAD_getPressedKey+0x198>
    1c3c:	88 ec       	ldi	r24, 0xC8	; 200
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	9c 83       	std	Y+4, r25	; 0x04
    1c42:	8b 83       	std	Y+3, r24	; 0x03
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	9c 81       	ldd	r25, Y+4	; 0x04
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	f1 f7       	brne	.-4      	; 0x1c48 <KEYPAD_getPressedKey+0x186>
    1c4c:	9c 83       	std	Y+4, r25	; 0x04
    1c4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c50:	8d 81       	ldd	r24, Y+5	; 0x05
    1c52:	9e 81       	ldd	r25, Y+6	; 0x06
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	9e 83       	std	Y+6, r25	; 0x06
    1c58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c5e:	00 97       	sbiw	r24, 0x00	; 0
    1c60:	69 f7       	brne	.-38     	; 0x1c3c <KEYPAD_getPressedKey+0x17a>
    1c62:	14 c0       	rjmp	.+40     	; 0x1c8c <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c64:	6f 81       	ldd	r22, Y+7	; 0x07
    1c66:	78 85       	ldd	r23, Y+8	; 0x08
    1c68:	89 85       	ldd	r24, Y+9	; 0x09
    1c6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	9e 83       	std	Y+6, r25	; 0x06
    1c76:	8d 83       	std	Y+5, r24	; 0x05
    1c78:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7c:	9a 83       	std	Y+2, r25	; 0x02
    1c7e:	89 83       	std	Y+1, r24	; 0x01
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	9a 81       	ldd	r25, Y+2	; 0x02
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	f1 f7       	brne	.-4      	; 0x1c84 <KEYPAD_getPressedKey+0x1c2>
    1c88:	9a 83       	std	Y+2, r25	; 0x02
    1c8a:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1c8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c8e:	8f 5f       	subi	r24, 0xFF	; 255
    1c90:	8f 87       	std	Y+15, r24	; 0x0f
    1c92:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c94:	84 30       	cpi	r24, 0x04	; 4
    1c96:	08 f4       	brcc	.+2      	; 0x1c9a <KEYPAD_getPressedKey+0x1d8>
    1c98:	48 cf       	rjmp	.-368    	; 0x1b2a <KEYPAD_getPressedKey+0x68>
    1c9a:	45 cf       	rjmp	.-374    	; 0x1b26 <KEYPAD_getPressedKey+0x64>

00001c9c <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1c9c:	df 93       	push	r29
    1c9e:	cf 93       	push	r28
    1ca0:	00 d0       	rcall	.+0      	; 0x1ca2 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1ca2:	00 d0       	rcall	.+0      	; 0x1ca4 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1ca4:	cd b7       	in	r28, 0x3d	; 61
    1ca6:	de b7       	in	r29, 0x3e	; 62
    1ca8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1caa:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1cac:	8a 81       	ldd	r24, Y+2	; 0x02
    1cae:	28 2f       	mov	r18, r24
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	3c 83       	std	Y+4, r19	; 0x04
    1cb4:	2b 83       	std	Y+3, r18	; 0x03
    1cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cba:	88 30       	cpi	r24, 0x08	; 8
    1cbc:	91 05       	cpc	r25, r1
    1cbe:	09 f4       	brne	.+2      	; 0x1cc2 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1cc0:	70 c0       	rjmp	.+224    	; 0x1da2 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1cc2:	2b 81       	ldd	r18, Y+3	; 0x03
    1cc4:	3c 81       	ldd	r19, Y+4	; 0x04
    1cc6:	29 30       	cpi	r18, 0x09	; 9
    1cc8:	31 05       	cpc	r19, r1
    1cca:	5c f5       	brge	.+86     	; 0x1d22 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cce:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd0:	84 30       	cpi	r24, 0x04	; 4
    1cd2:	91 05       	cpc	r25, r1
    1cd4:	09 f4       	brne	.+2      	; 0x1cd8 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1cd6:	59 c0       	rjmp	.+178    	; 0x1d8a <KEYPAD_4x4_adjustKeyNumber+0xee>
    1cd8:	2b 81       	ldd	r18, Y+3	; 0x03
    1cda:	3c 81       	ldd	r19, Y+4	; 0x04
    1cdc:	25 30       	cpi	r18, 0x05	; 5
    1cde:	31 05       	cpc	r19, r1
    1ce0:	9c f4       	brge	.+38     	; 0x1d08 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce6:	82 30       	cpi	r24, 0x02	; 2
    1ce8:	91 05       	cpc	r25, r1
    1cea:	09 f4       	brne	.+2      	; 0x1cee <KEYPAD_4x4_adjustKeyNumber+0x52>
    1cec:	48 c0       	rjmp	.+144    	; 0x1d7e <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1cee:	2b 81       	ldd	r18, Y+3	; 0x03
    1cf0:	3c 81       	ldd	r19, Y+4	; 0x04
    1cf2:	23 30       	cpi	r18, 0x03	; 3
    1cf4:	31 05       	cpc	r19, r1
    1cf6:	0c f0       	brlt	.+2      	; 0x1cfa <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1cf8:	45 c0       	rjmp	.+138    	; 0x1d84 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfe:	81 30       	cpi	r24, 0x01	; 1
    1d00:	91 05       	cpc	r25, r1
    1d02:	09 f4       	brne	.+2      	; 0x1d06 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1d04:	39 c0       	rjmp	.+114    	; 0x1d78 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1d06:	67 c0       	rjmp	.+206    	; 0x1dd6 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1d08:	2b 81       	ldd	r18, Y+3	; 0x03
    1d0a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d0c:	26 30       	cpi	r18, 0x06	; 6
    1d0e:	31 05       	cpc	r19, r1
    1d10:	09 f4       	brne	.+2      	; 0x1d14 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1d12:	41 c0       	rjmp	.+130    	; 0x1d96 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	9c 81       	ldd	r25, Y+4	; 0x04
    1d18:	87 30       	cpi	r24, 0x07	; 7
    1d1a:	91 05       	cpc	r25, r1
    1d1c:	0c f0       	brlt	.+2      	; 0x1d20 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1d1e:	3e c0       	rjmp	.+124    	; 0x1d9c <KEYPAD_4x4_adjustKeyNumber+0x100>
    1d20:	37 c0       	rjmp	.+110    	; 0x1d90 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1d22:	2b 81       	ldd	r18, Y+3	; 0x03
    1d24:	3c 81       	ldd	r19, Y+4	; 0x04
    1d26:	2c 30       	cpi	r18, 0x0C	; 12
    1d28:	31 05       	cpc	r19, r1
    1d2a:	09 f4       	brne	.+2      	; 0x1d2e <KEYPAD_4x4_adjustKeyNumber+0x92>
    1d2c:	46 c0       	rjmp	.+140    	; 0x1dba <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	9c 81       	ldd	r25, Y+4	; 0x04
    1d32:	8d 30       	cpi	r24, 0x0D	; 13
    1d34:	91 05       	cpc	r25, r1
    1d36:	5c f4       	brge	.+22     	; 0x1d4e <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1d38:	2b 81       	ldd	r18, Y+3	; 0x03
    1d3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d3c:	2a 30       	cpi	r18, 0x0A	; 10
    1d3e:	31 05       	cpc	r19, r1
    1d40:	b1 f1       	breq	.+108    	; 0x1dae <KEYPAD_4x4_adjustKeyNumber+0x112>
    1d42:	8b 81       	ldd	r24, Y+3	; 0x03
    1d44:	9c 81       	ldd	r25, Y+4	; 0x04
    1d46:	8b 30       	cpi	r24, 0x0B	; 11
    1d48:	91 05       	cpc	r25, r1
    1d4a:	a4 f5       	brge	.+104    	; 0x1db4 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1d4c:	2d c0       	rjmp	.+90     	; 0x1da8 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1d4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d50:	3c 81       	ldd	r19, Y+4	; 0x04
    1d52:	2e 30       	cpi	r18, 0x0E	; 14
    1d54:	31 05       	cpc	r19, r1
    1d56:	b9 f1       	breq	.+110    	; 0x1dc6 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1d58:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5c:	8e 30       	cpi	r24, 0x0E	; 14
    1d5e:	91 05       	cpc	r25, r1
    1d60:	7c f1       	brlt	.+94     	; 0x1dc0 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1d62:	2b 81       	ldd	r18, Y+3	; 0x03
    1d64:	3c 81       	ldd	r19, Y+4	; 0x04
    1d66:	2f 30       	cpi	r18, 0x0F	; 15
    1d68:	31 05       	cpc	r19, r1
    1d6a:	79 f1       	breq	.+94     	; 0x1dca <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d70:	80 31       	cpi	r24, 0x10	; 16
    1d72:	91 05       	cpc	r25, r1
    1d74:	69 f1       	breq	.+90     	; 0x1dd0 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1d76:	2f c0       	rjmp	.+94     	; 0x1dd6 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1d78:	87 e0       	ldi	r24, 0x07	; 7
    1d7a:	89 83       	std	Y+1, r24	; 0x01
    1d7c:	2e c0       	rjmp	.+92     	; 0x1dda <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1d7e:	88 e0       	ldi	r24, 0x08	; 8
    1d80:	89 83       	std	Y+1, r24	; 0x01
    1d82:	2b c0       	rjmp	.+86     	; 0x1dda <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1d84:	89 e0       	ldi	r24, 0x09	; 9
    1d86:	89 83       	std	Y+1, r24	; 0x01
    1d88:	28 c0       	rjmp	.+80     	; 0x1dda <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1d8a:	85 e2       	ldi	r24, 0x25	; 37
    1d8c:	89 83       	std	Y+1, r24	; 0x01
    1d8e:	25 c0       	rjmp	.+74     	; 0x1dda <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1d90:	84 e0       	ldi	r24, 0x04	; 4
    1d92:	89 83       	std	Y+1, r24	; 0x01
    1d94:	22 c0       	rjmp	.+68     	; 0x1dda <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1d96:	85 e0       	ldi	r24, 0x05	; 5
    1d98:	89 83       	std	Y+1, r24	; 0x01
    1d9a:	1f c0       	rjmp	.+62     	; 0x1dda <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1d9c:	86 e0       	ldi	r24, 0x06	; 6
    1d9e:	89 83       	std	Y+1, r24	; 0x01
    1da0:	1c c0       	rjmp	.+56     	; 0x1dda <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1da2:	8a e2       	ldi	r24, 0x2A	; 42
    1da4:	89 83       	std	Y+1, r24	; 0x01
    1da6:	19 c0       	rjmp	.+50     	; 0x1dda <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	89 83       	std	Y+1, r24	; 0x01
    1dac:	16 c0       	rjmp	.+44     	; 0x1dda <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1dae:	82 e0       	ldi	r24, 0x02	; 2
    1db0:	89 83       	std	Y+1, r24	; 0x01
    1db2:	13 c0       	rjmp	.+38     	; 0x1dda <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1db4:	83 e0       	ldi	r24, 0x03	; 3
    1db6:	89 83       	std	Y+1, r24	; 0x01
    1db8:	10 c0       	rjmp	.+32     	; 0x1dda <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1dba:	8d e2       	ldi	r24, 0x2D	; 45
    1dbc:	89 83       	std	Y+1, r24	; 0x01
    1dbe:	0d c0       	rjmp	.+26     	; 0x1dda <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1dc0:	8d e0       	ldi	r24, 0x0D	; 13
    1dc2:	89 83       	std	Y+1, r24	; 0x01
    1dc4:	0a c0       	rjmp	.+20     	; 0x1dda <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1dc6:	19 82       	std	Y+1, r1	; 0x01
    1dc8:	08 c0       	rjmp	.+16     	; 0x1dda <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1dca:	8d e3       	ldi	r24, 0x3D	; 61
    1dcc:	89 83       	std	Y+1, r24	; 0x01
    1dce:	05 c0       	rjmp	.+10     	; 0x1dda <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1dd0:	8b e2       	ldi	r24, 0x2B	; 43
    1dd2:	89 83       	std	Y+1, r24	; 0x01
    1dd4:	02 c0       	rjmp	.+4      	; 0x1dda <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd8:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	cf 91       	pop	r28
    1de6:	df 91       	pop	r29
    1de8:	08 95       	ret

00001dea <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
    1df2:	2e 97       	sbiw	r28, 0x0e	; 14
    1df4:	0f b6       	in	r0, 0x3f	; 63
    1df6:	f8 94       	cli
    1df8:	de bf       	out	0x3e, r29	; 62
    1dfa:	0f be       	out	0x3f, r0	; 63
    1dfc:	cd bf       	out	0x3d, r28	; 61

	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1dfe:	82 e0       	ldi	r24, 0x02	; 2
    1e00:	60 e0       	ldi	r22, 0x00	; 0
    1e02:	41 e0       	ldi	r20, 0x01	; 1
    1e04:	0e 94 23 0a 	call	0x1446	; 0x1446 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1e08:	82 e0       	ldi	r24, 0x02	; 2
    1e0a:	62 e0       	ldi	r22, 0x02	; 2
    1e0c:	41 e0       	ldi	r20, 0x01	; 1
    1e0e:	0e 94 23 0a 	call	0x1446	; 0x1446 <GPIO_setupPinDirection>
    1e12:	80 e0       	ldi	r24, 0x00	; 0
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	a0 ea       	ldi	r26, 0xA0	; 160
    1e18:	b1 e4       	ldi	r27, 0x41	; 65
    1e1a:	8b 87       	std	Y+11, r24	; 0x0b
    1e1c:	9c 87       	std	Y+12, r25	; 0x0c
    1e1e:	ad 87       	std	Y+13, r26	; 0x0d
    1e20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e22:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e24:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e26:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e28:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	4a ef       	ldi	r20, 0xFA	; 250
    1e30:	54 e4       	ldi	r21, 0x44	; 68
    1e32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	8f 83       	std	Y+7, r24	; 0x07
    1e3c:	98 87       	std	Y+8, r25	; 0x08
    1e3e:	a9 87       	std	Y+9, r26	; 0x09
    1e40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e42:	6f 81       	ldd	r22, Y+7	; 0x07
    1e44:	78 85       	ldd	r23, Y+8	; 0x08
    1e46:	89 85       	ldd	r24, Y+9	; 0x09
    1e48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	40 e8       	ldi	r20, 0x80	; 128
    1e50:	5f e3       	ldi	r21, 0x3F	; 63
    1e52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e56:	88 23       	and	r24, r24
    1e58:	2c f4       	brge	.+10     	; 0x1e64 <LCD_init+0x7a>
		__ticks = 1;
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	9e 83       	std	Y+6, r25	; 0x06
    1e60:	8d 83       	std	Y+5, r24	; 0x05
    1e62:	3f c0       	rjmp	.+126    	; 0x1ee2 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1e64:	6f 81       	ldd	r22, Y+7	; 0x07
    1e66:	78 85       	ldd	r23, Y+8	; 0x08
    1e68:	89 85       	ldd	r24, Y+9	; 0x09
    1e6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	3f ef       	ldi	r19, 0xFF	; 255
    1e70:	4f e7       	ldi	r20, 0x7F	; 127
    1e72:	57 e4       	ldi	r21, 0x47	; 71
    1e74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e78:	18 16       	cp	r1, r24
    1e7a:	4c f5       	brge	.+82     	; 0x1ece <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	40 e2       	ldi	r20, 0x20	; 32
    1e8a:	51 e4       	ldi	r21, 0x41	; 65
    1e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e90:	dc 01       	movw	r26, r24
    1e92:	cb 01       	movw	r24, r22
    1e94:	bc 01       	movw	r22, r24
    1e96:	cd 01       	movw	r24, r26
    1e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	9e 83       	std	Y+6, r25	; 0x06
    1ea2:	8d 83       	std	Y+5, r24	; 0x05
    1ea4:	0f c0       	rjmp	.+30     	; 0x1ec4 <LCD_init+0xda>
    1ea6:	88 ec       	ldi	r24, 0xC8	; 200
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	9c 83       	std	Y+4, r25	; 0x04
    1eac:	8b 83       	std	Y+3, r24	; 0x03
    1eae:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb2:	01 97       	sbiw	r24, 0x01	; 1
    1eb4:	f1 f7       	brne	.-4      	; 0x1eb2 <LCD_init+0xc8>
    1eb6:	9c 83       	std	Y+4, r25	; 0x04
    1eb8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eba:	8d 81       	ldd	r24, Y+5	; 0x05
    1ebc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ebe:	01 97       	sbiw	r24, 0x01	; 1
    1ec0:	9e 83       	std	Y+6, r25	; 0x06
    1ec2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec8:	00 97       	sbiw	r24, 0x00	; 0
    1eca:	69 f7       	brne	.-38     	; 0x1ea6 <LCD_init+0xbc>
    1ecc:	14 c0       	rjmp	.+40     	; 0x1ef6 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ece:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed0:	78 85       	ldd	r23, Y+8	; 0x08
    1ed2:	89 85       	ldd	r24, Y+9	; 0x09
    1ed4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	9e 83       	std	Y+6, r25	; 0x06
    1ee0:	8d 83       	std	Y+5, r24	; 0x05
    1ee2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee6:	9a 83       	std	Y+2, r25	; 0x02
    1ee8:	89 83       	std	Y+1, r24	; 0x01
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
    1eec:	9a 81       	ldd	r25, Y+2	; 0x02
    1eee:	01 97       	sbiw	r24, 0x01	; 1
    1ef0:	f1 f7       	brne	.-4      	; 0x1eee <LCD_init+0x104>
    1ef2:	9a 83       	std	Y+2, r25	; 0x02
    1ef4:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1ef6:	82 e0       	ldi	r24, 0x02	; 2
    1ef8:	64 e0       	ldi	r22, 0x04	; 4
    1efa:	41 e0       	ldi	r20, 0x01	; 1
    1efc:	0e 94 23 0a 	call	0x1446	; 0x1446 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1f00:	82 e0       	ldi	r24, 0x02	; 2
    1f02:	65 e0       	ldi	r22, 0x05	; 5
    1f04:	41 e0       	ldi	r20, 0x01	; 1
    1f06:	0e 94 23 0a 	call	0x1446	; 0x1446 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1f0a:	82 e0       	ldi	r24, 0x02	; 2
    1f0c:	66 e0       	ldi	r22, 0x06	; 6
    1f0e:	41 e0       	ldi	r20, 0x01	; 1
    1f10:	0e 94 23 0a 	call	0x1446	; 0x1446 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1f14:	82 e0       	ldi	r24, 0x02	; 2
    1f16:	67 e0       	ldi	r22, 0x07	; 7
    1f18:	41 e0       	ldi	r20, 0x01	; 1
    1f1a:	0e 94 23 0a 	call	0x1446	; 0x1446 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1f1e:	83 e3       	ldi	r24, 0x33	; 51
    1f20:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1f24:	82 e3       	ldi	r24, 0x32	; 50
    1f26:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1f2a:	88 e2       	ldi	r24, 0x28	; 40
    1f2c:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1f30:	8c e0       	ldi	r24, 0x0C	; 12
    1f32:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_sendCommand>

	timer1_is_init=0;//for LCD timer
    1f3c:	10 92 e3 00 	sts	0x00E3, r1
	lcd_closing_door=0;
    1f40:	10 92 ef 00 	sts	0x00EF, r1
}
    1f44:	2e 96       	adiw	r28, 0x0e	; 14
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	f8 94       	cli
    1f4a:	de bf       	out	0x3e, r29	; 62
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	cd bf       	out	0x3d, r28	; 61
    1f50:	cf 91       	pop	r28
    1f52:	df 91       	pop	r29
    1f54:	08 95       	ret

00001f56 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1f56:	0f 93       	push	r16
    1f58:	1f 93       	push	r17
    1f5a:	df 93       	push	r29
    1f5c:	cf 93       	push	r28
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
    1f62:	c3 56       	subi	r28, 0x63	; 99
    1f64:	d0 40       	sbci	r29, 0x00	; 0
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	f8 94       	cli
    1f6a:	de bf       	out	0x3e, r29	; 62
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	cd bf       	out	0x3d, r28	; 61
    1f70:	fe 01       	movw	r30, r28
    1f72:	ed 59       	subi	r30, 0x9D	; 157
    1f74:	ff 4f       	sbci	r31, 0xFF	; 255
    1f76:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1f78:	82 e0       	ldi	r24, 0x02	; 2
    1f7a:	60 e0       	ldi	r22, 0x00	; 0
    1f7c:	40 e0       	ldi	r20, 0x00	; 0
    1f7e:	0e 94 0e 0b 	call	0x161c	; 0x161c <GPIO_writePin>
    1f82:	fe 01       	movw	r30, r28
    1f84:	e1 5a       	subi	r30, 0xA1	; 161
    1f86:	ff 4f       	sbci	r31, 0xFF	; 255
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	a0 e8       	ldi	r26, 0x80	; 128
    1f8e:	bf e3       	ldi	r27, 0x3F	; 63
    1f90:	80 83       	st	Z, r24
    1f92:	91 83       	std	Z+1, r25	; 0x01
    1f94:	a2 83       	std	Z+2, r26	; 0x02
    1f96:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f98:	8e 01       	movw	r16, r28
    1f9a:	05 5a       	subi	r16, 0xA5	; 165
    1f9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f9e:	fe 01       	movw	r30, r28
    1fa0:	e1 5a       	subi	r30, 0xA1	; 161
    1fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa4:	60 81       	ld	r22, Z
    1fa6:	71 81       	ldd	r23, Z+1	; 0x01
    1fa8:	82 81       	ldd	r24, Z+2	; 0x02
    1faa:	93 81       	ldd	r25, Z+3	; 0x03
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	4a ef       	ldi	r20, 0xFA	; 250
    1fb2:	54 e4       	ldi	r21, 0x44	; 68
    1fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	f8 01       	movw	r30, r16
    1fbe:	80 83       	st	Z, r24
    1fc0:	91 83       	std	Z+1, r25	; 0x01
    1fc2:	a2 83       	std	Z+2, r26	; 0x02
    1fc4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	e5 5a       	subi	r30, 0xA5	; 165
    1fca:	ff 4f       	sbci	r31, 0xFF	; 255
    1fcc:	60 81       	ld	r22, Z
    1fce:	71 81       	ldd	r23, Z+1	; 0x01
    1fd0:	82 81       	ldd	r24, Z+2	; 0x02
    1fd2:	93 81       	ldd	r25, Z+3	; 0x03
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	40 e8       	ldi	r20, 0x80	; 128
    1fda:	5f e3       	ldi	r21, 0x3F	; 63
    1fdc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fe0:	88 23       	and	r24, r24
    1fe2:	44 f4       	brge	.+16     	; 0x1ff4 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	e7 5a       	subi	r30, 0xA7	; 167
    1fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	91 83       	std	Z+1, r25	; 0x01
    1ff0:	80 83       	st	Z, r24
    1ff2:	64 c0       	rjmp	.+200    	; 0x20bc <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	e5 5a       	subi	r30, 0xA5	; 165
    1ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffa:	60 81       	ld	r22, Z
    1ffc:	71 81       	ldd	r23, Z+1	; 0x01
    1ffe:	82 81       	ldd	r24, Z+2	; 0x02
    2000:	93 81       	ldd	r25, Z+3	; 0x03
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	3f ef       	ldi	r19, 0xFF	; 255
    2006:	4f e7       	ldi	r20, 0x7F	; 127
    2008:	57 e4       	ldi	r21, 0x47	; 71
    200a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    200e:	18 16       	cp	r1, r24
    2010:	0c f0       	brlt	.+2      	; 0x2014 <LCD_sendCommand+0xbe>
    2012:	43 c0       	rjmp	.+134    	; 0x209a <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2014:	fe 01       	movw	r30, r28
    2016:	e1 5a       	subi	r30, 0xA1	; 161
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	60 81       	ld	r22, Z
    201c:	71 81       	ldd	r23, Z+1	; 0x01
    201e:	82 81       	ldd	r24, Z+2	; 0x02
    2020:	93 81       	ldd	r25, Z+3	; 0x03
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	40 e2       	ldi	r20, 0x20	; 32
    2028:	51 e4       	ldi	r21, 0x41	; 65
    202a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	8e 01       	movw	r16, r28
    2034:	07 5a       	subi	r16, 0xA7	; 167
    2036:	1f 4f       	sbci	r17, 0xFF	; 255
    2038:	bc 01       	movw	r22, r24
    203a:	cd 01       	movw	r24, r26
    203c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	f8 01       	movw	r30, r16
    2046:	91 83       	std	Z+1, r25	; 0x01
    2048:	80 83       	st	Z, r24
    204a:	1f c0       	rjmp	.+62     	; 0x208a <LCD_sendCommand+0x134>
    204c:	fe 01       	movw	r30, r28
    204e:	e9 5a       	subi	r30, 0xA9	; 169
    2050:	ff 4f       	sbci	r31, 0xFF	; 255
    2052:	88 ec       	ldi	r24, 0xC8	; 200
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	91 83       	std	Z+1, r25	; 0x01
    2058:	80 83       	st	Z, r24
    205a:	fe 01       	movw	r30, r28
    205c:	e9 5a       	subi	r30, 0xA9	; 169
    205e:	ff 4f       	sbci	r31, 0xFF	; 255
    2060:	80 81       	ld	r24, Z
    2062:	91 81       	ldd	r25, Z+1	; 0x01
    2064:	01 97       	sbiw	r24, 0x01	; 1
    2066:	f1 f7       	brne	.-4      	; 0x2064 <LCD_sendCommand+0x10e>
    2068:	fe 01       	movw	r30, r28
    206a:	e9 5a       	subi	r30, 0xA9	; 169
    206c:	ff 4f       	sbci	r31, 0xFF	; 255
    206e:	91 83       	std	Z+1, r25	; 0x01
    2070:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2072:	de 01       	movw	r26, r28
    2074:	a7 5a       	subi	r26, 0xA7	; 167
    2076:	bf 4f       	sbci	r27, 0xFF	; 255
    2078:	fe 01       	movw	r30, r28
    207a:	e7 5a       	subi	r30, 0xA7	; 167
    207c:	ff 4f       	sbci	r31, 0xFF	; 255
    207e:	80 81       	ld	r24, Z
    2080:	91 81       	ldd	r25, Z+1	; 0x01
    2082:	01 97       	sbiw	r24, 0x01	; 1
    2084:	11 96       	adiw	r26, 0x01	; 1
    2086:	9c 93       	st	X, r25
    2088:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    208a:	fe 01       	movw	r30, r28
    208c:	e7 5a       	subi	r30, 0xA7	; 167
    208e:	ff 4f       	sbci	r31, 0xFF	; 255
    2090:	80 81       	ld	r24, Z
    2092:	91 81       	ldd	r25, Z+1	; 0x01
    2094:	00 97       	sbiw	r24, 0x00	; 0
    2096:	d1 f6       	brne	.-76     	; 0x204c <LCD_sendCommand+0xf6>
    2098:	27 c0       	rjmp	.+78     	; 0x20e8 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    209a:	8e 01       	movw	r16, r28
    209c:	07 5a       	subi	r16, 0xA7	; 167
    209e:	1f 4f       	sbci	r17, 0xFF	; 255
    20a0:	fe 01       	movw	r30, r28
    20a2:	e5 5a       	subi	r30, 0xA5	; 165
    20a4:	ff 4f       	sbci	r31, 0xFF	; 255
    20a6:	60 81       	ld	r22, Z
    20a8:	71 81       	ldd	r23, Z+1	; 0x01
    20aa:	82 81       	ldd	r24, Z+2	; 0x02
    20ac:	93 81       	ldd	r25, Z+3	; 0x03
    20ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	f8 01       	movw	r30, r16
    20b8:	91 83       	std	Z+1, r25	; 0x01
    20ba:	80 83       	st	Z, r24
    20bc:	de 01       	movw	r26, r28
    20be:	ab 5a       	subi	r26, 0xAB	; 171
    20c0:	bf 4f       	sbci	r27, 0xFF	; 255
    20c2:	fe 01       	movw	r30, r28
    20c4:	e7 5a       	subi	r30, 0xA7	; 167
    20c6:	ff 4f       	sbci	r31, 0xFF	; 255
    20c8:	80 81       	ld	r24, Z
    20ca:	91 81       	ldd	r25, Z+1	; 0x01
    20cc:	8d 93       	st	X+, r24
    20ce:	9c 93       	st	X, r25
    20d0:	fe 01       	movw	r30, r28
    20d2:	eb 5a       	subi	r30, 0xAB	; 171
    20d4:	ff 4f       	sbci	r31, 0xFF	; 255
    20d6:	80 81       	ld	r24, Z
    20d8:	91 81       	ldd	r25, Z+1	; 0x01
    20da:	01 97       	sbiw	r24, 0x01	; 1
    20dc:	f1 f7       	brne	.-4      	; 0x20da <LCD_sendCommand+0x184>
    20de:	fe 01       	movw	r30, r28
    20e0:	eb 5a       	subi	r30, 0xAB	; 171
    20e2:	ff 4f       	sbci	r31, 0xFF	; 255
    20e4:	91 83       	std	Z+1, r25	; 0x01
    20e6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    20e8:	82 e0       	ldi	r24, 0x02	; 2
    20ea:	62 e0       	ldi	r22, 0x02	; 2
    20ec:	41 e0       	ldi	r20, 0x01	; 1
    20ee:	0e 94 0e 0b 	call	0x161c	; 0x161c <GPIO_writePin>
    20f2:	fe 01       	movw	r30, r28
    20f4:	ef 5a       	subi	r30, 0xAF	; 175
    20f6:	ff 4f       	sbci	r31, 0xFF	; 255
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	a0 e8       	ldi	r26, 0x80	; 128
    20fe:	bf e3       	ldi	r27, 0x3F	; 63
    2100:	80 83       	st	Z, r24
    2102:	91 83       	std	Z+1, r25	; 0x01
    2104:	a2 83       	std	Z+2, r26	; 0x02
    2106:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2108:	8e 01       	movw	r16, r28
    210a:	03 5b       	subi	r16, 0xB3	; 179
    210c:	1f 4f       	sbci	r17, 0xFF	; 255
    210e:	fe 01       	movw	r30, r28
    2110:	ef 5a       	subi	r30, 0xAF	; 175
    2112:	ff 4f       	sbci	r31, 0xFF	; 255
    2114:	60 81       	ld	r22, Z
    2116:	71 81       	ldd	r23, Z+1	; 0x01
    2118:	82 81       	ldd	r24, Z+2	; 0x02
    211a:	93 81       	ldd	r25, Z+3	; 0x03
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	4a ef       	ldi	r20, 0xFA	; 250
    2122:	54 e4       	ldi	r21, 0x44	; 68
    2124:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2128:	dc 01       	movw	r26, r24
    212a:	cb 01       	movw	r24, r22
    212c:	f8 01       	movw	r30, r16
    212e:	80 83       	st	Z, r24
    2130:	91 83       	std	Z+1, r25	; 0x01
    2132:	a2 83       	std	Z+2, r26	; 0x02
    2134:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2136:	fe 01       	movw	r30, r28
    2138:	e3 5b       	subi	r30, 0xB3	; 179
    213a:	ff 4f       	sbci	r31, 0xFF	; 255
    213c:	60 81       	ld	r22, Z
    213e:	71 81       	ldd	r23, Z+1	; 0x01
    2140:	82 81       	ldd	r24, Z+2	; 0x02
    2142:	93 81       	ldd	r25, Z+3	; 0x03
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	40 e8       	ldi	r20, 0x80	; 128
    214a:	5f e3       	ldi	r21, 0x3F	; 63
    214c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2150:	88 23       	and	r24, r24
    2152:	44 f4       	brge	.+16     	; 0x2164 <LCD_sendCommand+0x20e>
		__ticks = 1;
    2154:	fe 01       	movw	r30, r28
    2156:	e5 5b       	subi	r30, 0xB5	; 181
    2158:	ff 4f       	sbci	r31, 0xFF	; 255
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	91 83       	std	Z+1, r25	; 0x01
    2160:	80 83       	st	Z, r24
    2162:	64 c0       	rjmp	.+200    	; 0x222c <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    2164:	fe 01       	movw	r30, r28
    2166:	e3 5b       	subi	r30, 0xB3	; 179
    2168:	ff 4f       	sbci	r31, 0xFF	; 255
    216a:	60 81       	ld	r22, Z
    216c:	71 81       	ldd	r23, Z+1	; 0x01
    216e:	82 81       	ldd	r24, Z+2	; 0x02
    2170:	93 81       	ldd	r25, Z+3	; 0x03
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	3f ef       	ldi	r19, 0xFF	; 255
    2176:	4f e7       	ldi	r20, 0x7F	; 127
    2178:	57 e4       	ldi	r21, 0x47	; 71
    217a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    217e:	18 16       	cp	r1, r24
    2180:	0c f0       	brlt	.+2      	; 0x2184 <LCD_sendCommand+0x22e>
    2182:	43 c0       	rjmp	.+134    	; 0x220a <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2184:	fe 01       	movw	r30, r28
    2186:	ef 5a       	subi	r30, 0xAF	; 175
    2188:	ff 4f       	sbci	r31, 0xFF	; 255
    218a:	60 81       	ld	r22, Z
    218c:	71 81       	ldd	r23, Z+1	; 0x01
    218e:	82 81       	ldd	r24, Z+2	; 0x02
    2190:	93 81       	ldd	r25, Z+3	; 0x03
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	40 e2       	ldi	r20, 0x20	; 32
    2198:	51 e4       	ldi	r21, 0x41	; 65
    219a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	8e 01       	movw	r16, r28
    21a4:	05 5b       	subi	r16, 0xB5	; 181
    21a6:	1f 4f       	sbci	r17, 0xFF	; 255
    21a8:	bc 01       	movw	r22, r24
    21aa:	cd 01       	movw	r24, r26
    21ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	f8 01       	movw	r30, r16
    21b6:	91 83       	std	Z+1, r25	; 0x01
    21b8:	80 83       	st	Z, r24
    21ba:	1f c0       	rjmp	.+62     	; 0x21fa <LCD_sendCommand+0x2a4>
    21bc:	fe 01       	movw	r30, r28
    21be:	e7 5b       	subi	r30, 0xB7	; 183
    21c0:	ff 4f       	sbci	r31, 0xFF	; 255
    21c2:	88 ec       	ldi	r24, 0xC8	; 200
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	91 83       	std	Z+1, r25	; 0x01
    21c8:	80 83       	st	Z, r24
    21ca:	fe 01       	movw	r30, r28
    21cc:	e7 5b       	subi	r30, 0xB7	; 183
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	80 81       	ld	r24, Z
    21d2:	91 81       	ldd	r25, Z+1	; 0x01
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	f1 f7       	brne	.-4      	; 0x21d4 <LCD_sendCommand+0x27e>
    21d8:	fe 01       	movw	r30, r28
    21da:	e7 5b       	subi	r30, 0xB7	; 183
    21dc:	ff 4f       	sbci	r31, 0xFF	; 255
    21de:	91 83       	std	Z+1, r25	; 0x01
    21e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e2:	de 01       	movw	r26, r28
    21e4:	a5 5b       	subi	r26, 0xB5	; 181
    21e6:	bf 4f       	sbci	r27, 0xFF	; 255
    21e8:	fe 01       	movw	r30, r28
    21ea:	e5 5b       	subi	r30, 0xB5	; 181
    21ec:	ff 4f       	sbci	r31, 0xFF	; 255
    21ee:	80 81       	ld	r24, Z
    21f0:	91 81       	ldd	r25, Z+1	; 0x01
    21f2:	01 97       	sbiw	r24, 0x01	; 1
    21f4:	11 96       	adiw	r26, 0x01	; 1
    21f6:	9c 93       	st	X, r25
    21f8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21fa:	fe 01       	movw	r30, r28
    21fc:	e5 5b       	subi	r30, 0xB5	; 181
    21fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2200:	80 81       	ld	r24, Z
    2202:	91 81       	ldd	r25, Z+1	; 0x01
    2204:	00 97       	sbiw	r24, 0x00	; 0
    2206:	d1 f6       	brne	.-76     	; 0x21bc <LCD_sendCommand+0x266>
    2208:	27 c0       	rjmp	.+78     	; 0x2258 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    220a:	8e 01       	movw	r16, r28
    220c:	05 5b       	subi	r16, 0xB5	; 181
    220e:	1f 4f       	sbci	r17, 0xFF	; 255
    2210:	fe 01       	movw	r30, r28
    2212:	e3 5b       	subi	r30, 0xB3	; 179
    2214:	ff 4f       	sbci	r31, 0xFF	; 255
    2216:	60 81       	ld	r22, Z
    2218:	71 81       	ldd	r23, Z+1	; 0x01
    221a:	82 81       	ldd	r24, Z+2	; 0x02
    221c:	93 81       	ldd	r25, Z+3	; 0x03
    221e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	f8 01       	movw	r30, r16
    2228:	91 83       	std	Z+1, r25	; 0x01
    222a:	80 83       	st	Z, r24
    222c:	de 01       	movw	r26, r28
    222e:	a9 5b       	subi	r26, 0xB9	; 185
    2230:	bf 4f       	sbci	r27, 0xFF	; 255
    2232:	fe 01       	movw	r30, r28
    2234:	e5 5b       	subi	r30, 0xB5	; 181
    2236:	ff 4f       	sbci	r31, 0xFF	; 255
    2238:	80 81       	ld	r24, Z
    223a:	91 81       	ldd	r25, Z+1	; 0x01
    223c:	8d 93       	st	X+, r24
    223e:	9c 93       	st	X, r25
    2240:	fe 01       	movw	r30, r28
    2242:	e9 5b       	subi	r30, 0xB9	; 185
    2244:	ff 4f       	sbci	r31, 0xFF	; 255
    2246:	80 81       	ld	r24, Z
    2248:	91 81       	ldd	r25, Z+1	; 0x01
    224a:	01 97       	sbiw	r24, 0x01	; 1
    224c:	f1 f7       	brne	.-4      	; 0x224a <LCD_sendCommand+0x2f4>
    224e:	fe 01       	movw	r30, r28
    2250:	e9 5b       	subi	r30, 0xB9	; 185
    2252:	ff 4f       	sbci	r31, 0xFF	; 255
    2254:	91 83       	std	Z+1, r25	; 0x01
    2256:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    2258:	fe 01       	movw	r30, r28
    225a:	ed 59       	subi	r30, 0x9D	; 157
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	80 81       	ld	r24, Z
    2260:	88 2f       	mov	r24, r24
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	80 71       	andi	r24, 0x10	; 16
    2266:	90 70       	andi	r25, 0x00	; 0
    2268:	95 95       	asr	r25
    226a:	87 95       	ror	r24
    226c:	95 95       	asr	r25
    226e:	87 95       	ror	r24
    2270:	95 95       	asr	r25
    2272:	87 95       	ror	r24
    2274:	95 95       	asr	r25
    2276:	87 95       	ror	r24
    2278:	98 2f       	mov	r25, r24
    227a:	82 e0       	ldi	r24, 0x02	; 2
    227c:	64 e0       	ldi	r22, 0x04	; 4
    227e:	49 2f       	mov	r20, r25
    2280:	0e 94 0e 0b 	call	0x161c	; 0x161c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    2284:	fe 01       	movw	r30, r28
    2286:	ed 59       	subi	r30, 0x9D	; 157
    2288:	ff 4f       	sbci	r31, 0xFF	; 255
    228a:	80 81       	ld	r24, Z
    228c:	88 2f       	mov	r24, r24
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	80 72       	andi	r24, 0x20	; 32
    2292:	90 70       	andi	r25, 0x00	; 0
    2294:	95 95       	asr	r25
    2296:	87 95       	ror	r24
    2298:	95 95       	asr	r25
    229a:	87 95       	ror	r24
    229c:	95 95       	asr	r25
    229e:	87 95       	ror	r24
    22a0:	95 95       	asr	r25
    22a2:	87 95       	ror	r24
    22a4:	95 95       	asr	r25
    22a6:	87 95       	ror	r24
    22a8:	98 2f       	mov	r25, r24
    22aa:	82 e0       	ldi	r24, 0x02	; 2
    22ac:	65 e0       	ldi	r22, 0x05	; 5
    22ae:	49 2f       	mov	r20, r25
    22b0:	0e 94 0e 0b 	call	0x161c	; 0x161c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    22b4:	fe 01       	movw	r30, r28
    22b6:	ed 59       	subi	r30, 0x9D	; 157
    22b8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ba:	80 81       	ld	r24, Z
    22bc:	88 2f       	mov	r24, r24
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	80 74       	andi	r24, 0x40	; 64
    22c2:	90 70       	andi	r25, 0x00	; 0
    22c4:	08 2e       	mov	r0, r24
    22c6:	89 2f       	mov	r24, r25
    22c8:	00 0c       	add	r0, r0
    22ca:	88 1f       	adc	r24, r24
    22cc:	99 0b       	sbc	r25, r25
    22ce:	00 0c       	add	r0, r0
    22d0:	88 1f       	adc	r24, r24
    22d2:	99 1f       	adc	r25, r25
    22d4:	98 2f       	mov	r25, r24
    22d6:	82 e0       	ldi	r24, 0x02	; 2
    22d8:	66 e0       	ldi	r22, 0x06	; 6
    22da:	49 2f       	mov	r20, r25
    22dc:	0e 94 0e 0b 	call	0x161c	; 0x161c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    22e0:	fe 01       	movw	r30, r28
    22e2:	ed 59       	subi	r30, 0x9D	; 157
    22e4:	ff 4f       	sbci	r31, 0xFF	; 255
    22e6:	80 81       	ld	r24, Z
    22e8:	98 2f       	mov	r25, r24
    22ea:	99 1f       	adc	r25, r25
    22ec:	99 27       	eor	r25, r25
    22ee:	99 1f       	adc	r25, r25
    22f0:	82 e0       	ldi	r24, 0x02	; 2
    22f2:	67 e0       	ldi	r22, 0x07	; 7
    22f4:	49 2f       	mov	r20, r25
    22f6:	0e 94 0e 0b 	call	0x161c	; 0x161c <GPIO_writePin>
    22fa:	fe 01       	movw	r30, r28
    22fc:	ed 5b       	subi	r30, 0xBD	; 189
    22fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	a0 e8       	ldi	r26, 0x80	; 128
    2306:	bf e3       	ldi	r27, 0x3F	; 63
    2308:	80 83       	st	Z, r24
    230a:	91 83       	std	Z+1, r25	; 0x01
    230c:	a2 83       	std	Z+2, r26	; 0x02
    230e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2310:	8e 01       	movw	r16, r28
    2312:	01 5c       	subi	r16, 0xC1	; 193
    2314:	1f 4f       	sbci	r17, 0xFF	; 255
    2316:	fe 01       	movw	r30, r28
    2318:	ed 5b       	subi	r30, 0xBD	; 189
    231a:	ff 4f       	sbci	r31, 0xFF	; 255
    231c:	60 81       	ld	r22, Z
    231e:	71 81       	ldd	r23, Z+1	; 0x01
    2320:	82 81       	ldd	r24, Z+2	; 0x02
    2322:	93 81       	ldd	r25, Z+3	; 0x03
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	4a ef       	ldi	r20, 0xFA	; 250
    232a:	54 e4       	ldi	r21, 0x44	; 68
    232c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	f8 01       	movw	r30, r16
    2336:	80 83       	st	Z, r24
    2338:	91 83       	std	Z+1, r25	; 0x01
    233a:	a2 83       	std	Z+2, r26	; 0x02
    233c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    233e:	fe 01       	movw	r30, r28
    2340:	ff 96       	adiw	r30, 0x3f	; 63
    2342:	60 81       	ld	r22, Z
    2344:	71 81       	ldd	r23, Z+1	; 0x01
    2346:	82 81       	ldd	r24, Z+2	; 0x02
    2348:	93 81       	ldd	r25, Z+3	; 0x03
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	40 e8       	ldi	r20, 0x80	; 128
    2350:	5f e3       	ldi	r21, 0x3F	; 63
    2352:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2356:	88 23       	and	r24, r24
    2358:	2c f4       	brge	.+10     	; 0x2364 <LCD_sendCommand+0x40e>
		__ticks = 1;
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	9e af       	std	Y+62, r25	; 0x3e
    2360:	8d af       	std	Y+61, r24	; 0x3d
    2362:	46 c0       	rjmp	.+140    	; 0x23f0 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    2364:	fe 01       	movw	r30, r28
    2366:	ff 96       	adiw	r30, 0x3f	; 63
    2368:	60 81       	ld	r22, Z
    236a:	71 81       	ldd	r23, Z+1	; 0x01
    236c:	82 81       	ldd	r24, Z+2	; 0x02
    236e:	93 81       	ldd	r25, Z+3	; 0x03
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	3f ef       	ldi	r19, 0xFF	; 255
    2374:	4f e7       	ldi	r20, 0x7F	; 127
    2376:	57 e4       	ldi	r21, 0x47	; 71
    2378:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    237c:	18 16       	cp	r1, r24
    237e:	64 f5       	brge	.+88     	; 0x23d8 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2380:	fe 01       	movw	r30, r28
    2382:	ed 5b       	subi	r30, 0xBD	; 189
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	60 81       	ld	r22, Z
    2388:	71 81       	ldd	r23, Z+1	; 0x01
    238a:	82 81       	ldd	r24, Z+2	; 0x02
    238c:	93 81       	ldd	r25, Z+3	; 0x03
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	40 e2       	ldi	r20, 0x20	; 32
    2394:	51 e4       	ldi	r21, 0x41	; 65
    2396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	bc 01       	movw	r22, r24
    23a0:	cd 01       	movw	r24, r26
    23a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	9e af       	std	Y+62, r25	; 0x3e
    23ac:	8d af       	std	Y+61, r24	; 0x3d
    23ae:	0f c0       	rjmp	.+30     	; 0x23ce <LCD_sendCommand+0x478>
    23b0:	88 ec       	ldi	r24, 0xC8	; 200
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	9c af       	std	Y+60, r25	; 0x3c
    23b6:	8b af       	std	Y+59, r24	; 0x3b
    23b8:	8b ad       	ldd	r24, Y+59	; 0x3b
    23ba:	9c ad       	ldd	r25, Y+60	; 0x3c
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	f1 f7       	brne	.-4      	; 0x23bc <LCD_sendCommand+0x466>
    23c0:	9c af       	std	Y+60, r25	; 0x3c
    23c2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    23c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	9e af       	std	Y+62, r25	; 0x3e
    23cc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ce:	8d ad       	ldd	r24, Y+61	; 0x3d
    23d0:	9e ad       	ldd	r25, Y+62	; 0x3e
    23d2:	00 97       	sbiw	r24, 0x00	; 0
    23d4:	69 f7       	brne	.-38     	; 0x23b0 <LCD_sendCommand+0x45a>
    23d6:	16 c0       	rjmp	.+44     	; 0x2404 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d8:	fe 01       	movw	r30, r28
    23da:	ff 96       	adiw	r30, 0x3f	; 63
    23dc:	60 81       	ld	r22, Z
    23de:	71 81       	ldd	r23, Z+1	; 0x01
    23e0:	82 81       	ldd	r24, Z+2	; 0x02
    23e2:	93 81       	ldd	r25, Z+3	; 0x03
    23e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	9e af       	std	Y+62, r25	; 0x3e
    23ee:	8d af       	std	Y+61, r24	; 0x3d
    23f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    23f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    23f4:	9a af       	std	Y+58, r25	; 0x3a
    23f6:	89 af       	std	Y+57, r24	; 0x39
    23f8:	89 ad       	ldd	r24, Y+57	; 0x39
    23fa:	9a ad       	ldd	r25, Y+58	; 0x3a
    23fc:	01 97       	sbiw	r24, 0x01	; 1
    23fe:	f1 f7       	brne	.-4      	; 0x23fc <LCD_sendCommand+0x4a6>
    2400:	9a af       	std	Y+58, r25	; 0x3a
    2402:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2404:	82 e0       	ldi	r24, 0x02	; 2
    2406:	62 e0       	ldi	r22, 0x02	; 2
    2408:	40 e0       	ldi	r20, 0x00	; 0
    240a:	0e 94 0e 0b 	call	0x161c	; 0x161c <GPIO_writePin>
    240e:	80 e0       	ldi	r24, 0x00	; 0
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	a0 e8       	ldi	r26, 0x80	; 128
    2414:	bf e3       	ldi	r27, 0x3F	; 63
    2416:	8d ab       	std	Y+53, r24	; 0x35
    2418:	9e ab       	std	Y+54, r25	; 0x36
    241a:	af ab       	std	Y+55, r26	; 0x37
    241c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    241e:	6d a9       	ldd	r22, Y+53	; 0x35
    2420:	7e a9       	ldd	r23, Y+54	; 0x36
    2422:	8f a9       	ldd	r24, Y+55	; 0x37
    2424:	98 ad       	ldd	r25, Y+56	; 0x38
    2426:	20 e0       	ldi	r18, 0x00	; 0
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	4a ef       	ldi	r20, 0xFA	; 250
    242c:	54 e4       	ldi	r21, 0x44	; 68
    242e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	89 ab       	std	Y+49, r24	; 0x31
    2438:	9a ab       	std	Y+50, r25	; 0x32
    243a:	ab ab       	std	Y+51, r26	; 0x33
    243c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    243e:	69 a9       	ldd	r22, Y+49	; 0x31
    2440:	7a a9       	ldd	r23, Y+50	; 0x32
    2442:	8b a9       	ldd	r24, Y+51	; 0x33
    2444:	9c a9       	ldd	r25, Y+52	; 0x34
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	40 e8       	ldi	r20, 0x80	; 128
    244c:	5f e3       	ldi	r21, 0x3F	; 63
    244e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2452:	88 23       	and	r24, r24
    2454:	2c f4       	brge	.+10     	; 0x2460 <LCD_sendCommand+0x50a>
		__ticks = 1;
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	98 ab       	std	Y+48, r25	; 0x30
    245c:	8f a7       	std	Y+47, r24	; 0x2f
    245e:	3f c0       	rjmp	.+126    	; 0x24de <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    2460:	69 a9       	ldd	r22, Y+49	; 0x31
    2462:	7a a9       	ldd	r23, Y+50	; 0x32
    2464:	8b a9       	ldd	r24, Y+51	; 0x33
    2466:	9c a9       	ldd	r25, Y+52	; 0x34
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	3f ef       	ldi	r19, 0xFF	; 255
    246c:	4f e7       	ldi	r20, 0x7F	; 127
    246e:	57 e4       	ldi	r21, 0x47	; 71
    2470:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2474:	18 16       	cp	r1, r24
    2476:	4c f5       	brge	.+82     	; 0x24ca <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2478:	6d a9       	ldd	r22, Y+53	; 0x35
    247a:	7e a9       	ldd	r23, Y+54	; 0x36
    247c:	8f a9       	ldd	r24, Y+55	; 0x37
    247e:	98 ad       	ldd	r25, Y+56	; 0x38
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	40 e2       	ldi	r20, 0x20	; 32
    2486:	51 e4       	ldi	r21, 0x41	; 65
    2488:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	bc 01       	movw	r22, r24
    2492:	cd 01       	movw	r24, r26
    2494:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	98 ab       	std	Y+48, r25	; 0x30
    249e:	8f a7       	std	Y+47, r24	; 0x2f
    24a0:	0f c0       	rjmp	.+30     	; 0x24c0 <LCD_sendCommand+0x56a>
    24a2:	88 ec       	ldi	r24, 0xC8	; 200
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	9e a7       	std	Y+46, r25	; 0x2e
    24a8:	8d a7       	std	Y+45, r24	; 0x2d
    24aa:	8d a5       	ldd	r24, Y+45	; 0x2d
    24ac:	9e a5       	ldd	r25, Y+46	; 0x2e
    24ae:	01 97       	sbiw	r24, 0x01	; 1
    24b0:	f1 f7       	brne	.-4      	; 0x24ae <LCD_sendCommand+0x558>
    24b2:	9e a7       	std	Y+46, r25	; 0x2e
    24b4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    24b8:	98 a9       	ldd	r25, Y+48	; 0x30
    24ba:	01 97       	sbiw	r24, 0x01	; 1
    24bc:	98 ab       	std	Y+48, r25	; 0x30
    24be:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    24c2:	98 a9       	ldd	r25, Y+48	; 0x30
    24c4:	00 97       	sbiw	r24, 0x00	; 0
    24c6:	69 f7       	brne	.-38     	; 0x24a2 <LCD_sendCommand+0x54c>
    24c8:	14 c0       	rjmp	.+40     	; 0x24f2 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ca:	69 a9       	ldd	r22, Y+49	; 0x31
    24cc:	7a a9       	ldd	r23, Y+50	; 0x32
    24ce:	8b a9       	ldd	r24, Y+51	; 0x33
    24d0:	9c a9       	ldd	r25, Y+52	; 0x34
    24d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	98 ab       	std	Y+48, r25	; 0x30
    24dc:	8f a7       	std	Y+47, r24	; 0x2f
    24de:	8f a5       	ldd	r24, Y+47	; 0x2f
    24e0:	98 a9       	ldd	r25, Y+48	; 0x30
    24e2:	9c a7       	std	Y+44, r25	; 0x2c
    24e4:	8b a7       	std	Y+43, r24	; 0x2b
    24e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    24e8:	9c a5       	ldd	r25, Y+44	; 0x2c
    24ea:	01 97       	sbiw	r24, 0x01	; 1
    24ec:	f1 f7       	brne	.-4      	; 0x24ea <LCD_sendCommand+0x594>
    24ee:	9c a7       	std	Y+44, r25	; 0x2c
    24f0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    24f2:	82 e0       	ldi	r24, 0x02	; 2
    24f4:	62 e0       	ldi	r22, 0x02	; 2
    24f6:	41 e0       	ldi	r20, 0x01	; 1
    24f8:	0e 94 0e 0b 	call	0x161c	; 0x161c <GPIO_writePin>
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	a0 e8       	ldi	r26, 0x80	; 128
    2502:	bf e3       	ldi	r27, 0x3F	; 63
    2504:	8f a3       	std	Y+39, r24	; 0x27
    2506:	98 a7       	std	Y+40, r25	; 0x28
    2508:	a9 a7       	std	Y+41, r26	; 0x29
    250a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    250c:	6f a1       	ldd	r22, Y+39	; 0x27
    250e:	78 a5       	ldd	r23, Y+40	; 0x28
    2510:	89 a5       	ldd	r24, Y+41	; 0x29
    2512:	9a a5       	ldd	r25, Y+42	; 0x2a
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	4a ef       	ldi	r20, 0xFA	; 250
    251a:	54 e4       	ldi	r21, 0x44	; 68
    251c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	8b a3       	std	Y+35, r24	; 0x23
    2526:	9c a3       	std	Y+36, r25	; 0x24
    2528:	ad a3       	std	Y+37, r26	; 0x25
    252a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    252c:	6b a1       	ldd	r22, Y+35	; 0x23
    252e:	7c a1       	ldd	r23, Y+36	; 0x24
    2530:	8d a1       	ldd	r24, Y+37	; 0x25
    2532:	9e a1       	ldd	r25, Y+38	; 0x26
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	40 e8       	ldi	r20, 0x80	; 128
    253a:	5f e3       	ldi	r21, 0x3F	; 63
    253c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2540:	88 23       	and	r24, r24
    2542:	2c f4       	brge	.+10     	; 0x254e <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	9a a3       	std	Y+34, r25	; 0x22
    254a:	89 a3       	std	Y+33, r24	; 0x21
    254c:	3f c0       	rjmp	.+126    	; 0x25cc <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    254e:	6b a1       	ldd	r22, Y+35	; 0x23
    2550:	7c a1       	ldd	r23, Y+36	; 0x24
    2552:	8d a1       	ldd	r24, Y+37	; 0x25
    2554:	9e a1       	ldd	r25, Y+38	; 0x26
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	3f ef       	ldi	r19, 0xFF	; 255
    255a:	4f e7       	ldi	r20, 0x7F	; 127
    255c:	57 e4       	ldi	r21, 0x47	; 71
    255e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2562:	18 16       	cp	r1, r24
    2564:	4c f5       	brge	.+82     	; 0x25b8 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2566:	6f a1       	ldd	r22, Y+39	; 0x27
    2568:	78 a5       	ldd	r23, Y+40	; 0x28
    256a:	89 a5       	ldd	r24, Y+41	; 0x29
    256c:	9a a5       	ldd	r25, Y+42	; 0x2a
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	40 e2       	ldi	r20, 0x20	; 32
    2574:	51 e4       	ldi	r21, 0x41	; 65
    2576:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257a:	dc 01       	movw	r26, r24
    257c:	cb 01       	movw	r24, r22
    257e:	bc 01       	movw	r22, r24
    2580:	cd 01       	movw	r24, r26
    2582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	9a a3       	std	Y+34, r25	; 0x22
    258c:	89 a3       	std	Y+33, r24	; 0x21
    258e:	0f c0       	rjmp	.+30     	; 0x25ae <LCD_sendCommand+0x658>
    2590:	88 ec       	ldi	r24, 0xC8	; 200
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	98 a3       	std	Y+32, r25	; 0x20
    2596:	8f 8f       	std	Y+31, r24	; 0x1f
    2598:	8f 8d       	ldd	r24, Y+31	; 0x1f
    259a:	98 a1       	ldd	r25, Y+32	; 0x20
    259c:	01 97       	sbiw	r24, 0x01	; 1
    259e:	f1 f7       	brne	.-4      	; 0x259c <LCD_sendCommand+0x646>
    25a0:	98 a3       	std	Y+32, r25	; 0x20
    25a2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a4:	89 a1       	ldd	r24, Y+33	; 0x21
    25a6:	9a a1       	ldd	r25, Y+34	; 0x22
    25a8:	01 97       	sbiw	r24, 0x01	; 1
    25aa:	9a a3       	std	Y+34, r25	; 0x22
    25ac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ae:	89 a1       	ldd	r24, Y+33	; 0x21
    25b0:	9a a1       	ldd	r25, Y+34	; 0x22
    25b2:	00 97       	sbiw	r24, 0x00	; 0
    25b4:	69 f7       	brne	.-38     	; 0x2590 <LCD_sendCommand+0x63a>
    25b6:	14 c0       	rjmp	.+40     	; 0x25e0 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b8:	6b a1       	ldd	r22, Y+35	; 0x23
    25ba:	7c a1       	ldd	r23, Y+36	; 0x24
    25bc:	8d a1       	ldd	r24, Y+37	; 0x25
    25be:	9e a1       	ldd	r25, Y+38	; 0x26
    25c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	9a a3       	std	Y+34, r25	; 0x22
    25ca:	89 a3       	std	Y+33, r24	; 0x21
    25cc:	89 a1       	ldd	r24, Y+33	; 0x21
    25ce:	9a a1       	ldd	r25, Y+34	; 0x22
    25d0:	9e 8f       	std	Y+30, r25	; 0x1e
    25d2:	8d 8f       	std	Y+29, r24	; 0x1d
    25d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25d8:	01 97       	sbiw	r24, 0x01	; 1
    25da:	f1 f7       	brne	.-4      	; 0x25d8 <LCD_sendCommand+0x682>
    25dc:	9e 8f       	std	Y+30, r25	; 0x1e
    25de:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    25e0:	fe 01       	movw	r30, r28
    25e2:	ed 59       	subi	r30, 0x9D	; 157
    25e4:	ff 4f       	sbci	r31, 0xFF	; 255
    25e6:	80 81       	ld	r24, Z
    25e8:	98 2f       	mov	r25, r24
    25ea:	91 70       	andi	r25, 0x01	; 1
    25ec:	82 e0       	ldi	r24, 0x02	; 2
    25ee:	64 e0       	ldi	r22, 0x04	; 4
    25f0:	49 2f       	mov	r20, r25
    25f2:	0e 94 0e 0b 	call	0x161c	; 0x161c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    25f6:	fe 01       	movw	r30, r28
    25f8:	ed 59       	subi	r30, 0x9D	; 157
    25fa:	ff 4f       	sbci	r31, 0xFF	; 255
    25fc:	80 81       	ld	r24, Z
    25fe:	88 2f       	mov	r24, r24
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	82 70       	andi	r24, 0x02	; 2
    2604:	90 70       	andi	r25, 0x00	; 0
    2606:	95 95       	asr	r25
    2608:	87 95       	ror	r24
    260a:	98 2f       	mov	r25, r24
    260c:	82 e0       	ldi	r24, 0x02	; 2
    260e:	65 e0       	ldi	r22, 0x05	; 5
    2610:	49 2f       	mov	r20, r25
    2612:	0e 94 0e 0b 	call	0x161c	; 0x161c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2616:	fe 01       	movw	r30, r28
    2618:	ed 59       	subi	r30, 0x9D	; 157
    261a:	ff 4f       	sbci	r31, 0xFF	; 255
    261c:	80 81       	ld	r24, Z
    261e:	88 2f       	mov	r24, r24
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	84 70       	andi	r24, 0x04	; 4
    2624:	90 70       	andi	r25, 0x00	; 0
    2626:	95 95       	asr	r25
    2628:	87 95       	ror	r24
    262a:	95 95       	asr	r25
    262c:	87 95       	ror	r24
    262e:	98 2f       	mov	r25, r24
    2630:	82 e0       	ldi	r24, 0x02	; 2
    2632:	66 e0       	ldi	r22, 0x06	; 6
    2634:	49 2f       	mov	r20, r25
    2636:	0e 94 0e 0b 	call	0x161c	; 0x161c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    263a:	fe 01       	movw	r30, r28
    263c:	ed 59       	subi	r30, 0x9D	; 157
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	80 81       	ld	r24, Z
    2642:	88 2f       	mov	r24, r24
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	88 70       	andi	r24, 0x08	; 8
    2648:	90 70       	andi	r25, 0x00	; 0
    264a:	95 95       	asr	r25
    264c:	87 95       	ror	r24
    264e:	95 95       	asr	r25
    2650:	87 95       	ror	r24
    2652:	95 95       	asr	r25
    2654:	87 95       	ror	r24
    2656:	98 2f       	mov	r25, r24
    2658:	82 e0       	ldi	r24, 0x02	; 2
    265a:	67 e0       	ldi	r22, 0x07	; 7
    265c:	49 2f       	mov	r20, r25
    265e:	0e 94 0e 0b 	call	0x161c	; 0x161c <GPIO_writePin>
    2662:	80 e0       	ldi	r24, 0x00	; 0
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	a0 e8       	ldi	r26, 0x80	; 128
    2668:	bf e3       	ldi	r27, 0x3F	; 63
    266a:	89 8f       	std	Y+25, r24	; 0x19
    266c:	9a 8f       	std	Y+26, r25	; 0x1a
    266e:	ab 8f       	std	Y+27, r26	; 0x1b
    2670:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2672:	69 8d       	ldd	r22, Y+25	; 0x19
    2674:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2676:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2678:	9c 8d       	ldd	r25, Y+28	; 0x1c
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	4a ef       	ldi	r20, 0xFA	; 250
    2680:	54 e4       	ldi	r21, 0x44	; 68
    2682:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2686:	dc 01       	movw	r26, r24
    2688:	cb 01       	movw	r24, r22
    268a:	8d 8b       	std	Y+21, r24	; 0x15
    268c:	9e 8b       	std	Y+22, r25	; 0x16
    268e:	af 8b       	std	Y+23, r26	; 0x17
    2690:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2692:	6d 89       	ldd	r22, Y+21	; 0x15
    2694:	7e 89       	ldd	r23, Y+22	; 0x16
    2696:	8f 89       	ldd	r24, Y+23	; 0x17
    2698:	98 8d       	ldd	r25, Y+24	; 0x18
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	40 e8       	ldi	r20, 0x80	; 128
    26a0:	5f e3       	ldi	r21, 0x3F	; 63
    26a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26a6:	88 23       	and	r24, r24
    26a8:	2c f4       	brge	.+10     	; 0x26b4 <LCD_sendCommand+0x75e>
		__ticks = 1;
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	9c 8b       	std	Y+20, r25	; 0x14
    26b0:	8b 8b       	std	Y+19, r24	; 0x13
    26b2:	3f c0       	rjmp	.+126    	; 0x2732 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    26b4:	6d 89       	ldd	r22, Y+21	; 0x15
    26b6:	7e 89       	ldd	r23, Y+22	; 0x16
    26b8:	8f 89       	ldd	r24, Y+23	; 0x17
    26ba:	98 8d       	ldd	r25, Y+24	; 0x18
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	3f ef       	ldi	r19, 0xFF	; 255
    26c0:	4f e7       	ldi	r20, 0x7F	; 127
    26c2:	57 e4       	ldi	r21, 0x47	; 71
    26c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26c8:	18 16       	cp	r1, r24
    26ca:	4c f5       	brge	.+82     	; 0x271e <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26cc:	69 8d       	ldd	r22, Y+25	; 0x19
    26ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26d4:	20 e0       	ldi	r18, 0x00	; 0
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	40 e2       	ldi	r20, 0x20	; 32
    26da:	51 e4       	ldi	r21, 0x41	; 65
    26dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e0:	dc 01       	movw	r26, r24
    26e2:	cb 01       	movw	r24, r22
    26e4:	bc 01       	movw	r22, r24
    26e6:	cd 01       	movw	r24, r26
    26e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	9c 8b       	std	Y+20, r25	; 0x14
    26f2:	8b 8b       	std	Y+19, r24	; 0x13
    26f4:	0f c0       	rjmp	.+30     	; 0x2714 <LCD_sendCommand+0x7be>
    26f6:	88 ec       	ldi	r24, 0xC8	; 200
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	9a 8b       	std	Y+18, r25	; 0x12
    26fc:	89 8b       	std	Y+17, r24	; 0x11
    26fe:	89 89       	ldd	r24, Y+17	; 0x11
    2700:	9a 89       	ldd	r25, Y+18	; 0x12
    2702:	01 97       	sbiw	r24, 0x01	; 1
    2704:	f1 f7       	brne	.-4      	; 0x2702 <LCD_sendCommand+0x7ac>
    2706:	9a 8b       	std	Y+18, r25	; 0x12
    2708:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    270a:	8b 89       	ldd	r24, Y+19	; 0x13
    270c:	9c 89       	ldd	r25, Y+20	; 0x14
    270e:	01 97       	sbiw	r24, 0x01	; 1
    2710:	9c 8b       	std	Y+20, r25	; 0x14
    2712:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2714:	8b 89       	ldd	r24, Y+19	; 0x13
    2716:	9c 89       	ldd	r25, Y+20	; 0x14
    2718:	00 97       	sbiw	r24, 0x00	; 0
    271a:	69 f7       	brne	.-38     	; 0x26f6 <LCD_sendCommand+0x7a0>
    271c:	14 c0       	rjmp	.+40     	; 0x2746 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    271e:	6d 89       	ldd	r22, Y+21	; 0x15
    2720:	7e 89       	ldd	r23, Y+22	; 0x16
    2722:	8f 89       	ldd	r24, Y+23	; 0x17
    2724:	98 8d       	ldd	r25, Y+24	; 0x18
    2726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	9c 8b       	std	Y+20, r25	; 0x14
    2730:	8b 8b       	std	Y+19, r24	; 0x13
    2732:	8b 89       	ldd	r24, Y+19	; 0x13
    2734:	9c 89       	ldd	r25, Y+20	; 0x14
    2736:	98 8b       	std	Y+16, r25	; 0x10
    2738:	8f 87       	std	Y+15, r24	; 0x0f
    273a:	8f 85       	ldd	r24, Y+15	; 0x0f
    273c:	98 89       	ldd	r25, Y+16	; 0x10
    273e:	01 97       	sbiw	r24, 0x01	; 1
    2740:	f1 f7       	brne	.-4      	; 0x273e <LCD_sendCommand+0x7e8>
    2742:	98 8b       	std	Y+16, r25	; 0x10
    2744:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2746:	82 e0       	ldi	r24, 0x02	; 2
    2748:	62 e0       	ldi	r22, 0x02	; 2
    274a:	40 e0       	ldi	r20, 0x00	; 0
    274c:	0e 94 0e 0b 	call	0x161c	; 0x161c <GPIO_writePin>
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	a0 e8       	ldi	r26, 0x80	; 128
    2756:	bf e3       	ldi	r27, 0x3F	; 63
    2758:	8b 87       	std	Y+11, r24	; 0x0b
    275a:	9c 87       	std	Y+12, r25	; 0x0c
    275c:	ad 87       	std	Y+13, r26	; 0x0d
    275e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2760:	6b 85       	ldd	r22, Y+11	; 0x0b
    2762:	7c 85       	ldd	r23, Y+12	; 0x0c
    2764:	8d 85       	ldd	r24, Y+13	; 0x0d
    2766:	9e 85       	ldd	r25, Y+14	; 0x0e
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	4a ef       	ldi	r20, 0xFA	; 250
    276e:	54 e4       	ldi	r21, 0x44	; 68
    2770:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	8f 83       	std	Y+7, r24	; 0x07
    277a:	98 87       	std	Y+8, r25	; 0x08
    277c:	a9 87       	std	Y+9, r26	; 0x09
    277e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2780:	6f 81       	ldd	r22, Y+7	; 0x07
    2782:	78 85       	ldd	r23, Y+8	; 0x08
    2784:	89 85       	ldd	r24, Y+9	; 0x09
    2786:	9a 85       	ldd	r25, Y+10	; 0x0a
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	40 e8       	ldi	r20, 0x80	; 128
    278e:	5f e3       	ldi	r21, 0x3F	; 63
    2790:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2794:	88 23       	and	r24, r24
    2796:	2c f4       	brge	.+10     	; 0x27a2 <LCD_sendCommand+0x84c>
		__ticks = 1;
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	9e 83       	std	Y+6, r25	; 0x06
    279e:	8d 83       	std	Y+5, r24	; 0x05
    27a0:	3f c0       	rjmp	.+126    	; 0x2820 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    27a2:	6f 81       	ldd	r22, Y+7	; 0x07
    27a4:	78 85       	ldd	r23, Y+8	; 0x08
    27a6:	89 85       	ldd	r24, Y+9	; 0x09
    27a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27aa:	20 e0       	ldi	r18, 0x00	; 0
    27ac:	3f ef       	ldi	r19, 0xFF	; 255
    27ae:	4f e7       	ldi	r20, 0x7F	; 127
    27b0:	57 e4       	ldi	r21, 0x47	; 71
    27b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27b6:	18 16       	cp	r1, r24
    27b8:	4c f5       	brge	.+82     	; 0x280c <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    27bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    27be:	8d 85       	ldd	r24, Y+13	; 0x0d
    27c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	40 e2       	ldi	r20, 0x20	; 32
    27c8:	51 e4       	ldi	r21, 0x41	; 65
    27ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	bc 01       	movw	r22, r24
    27d4:	cd 01       	movw	r24, r26
    27d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27da:	dc 01       	movw	r26, r24
    27dc:	cb 01       	movw	r24, r22
    27de:	9e 83       	std	Y+6, r25	; 0x06
    27e0:	8d 83       	std	Y+5, r24	; 0x05
    27e2:	0f c0       	rjmp	.+30     	; 0x2802 <LCD_sendCommand+0x8ac>
    27e4:	88 ec       	ldi	r24, 0xC8	; 200
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	9c 83       	std	Y+4, r25	; 0x04
    27ea:	8b 83       	std	Y+3, r24	; 0x03
    27ec:	8b 81       	ldd	r24, Y+3	; 0x03
    27ee:	9c 81       	ldd	r25, Y+4	; 0x04
    27f0:	01 97       	sbiw	r24, 0x01	; 1
    27f2:	f1 f7       	brne	.-4      	; 0x27f0 <LCD_sendCommand+0x89a>
    27f4:	9c 83       	std	Y+4, r25	; 0x04
    27f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f8:	8d 81       	ldd	r24, Y+5	; 0x05
    27fa:	9e 81       	ldd	r25, Y+6	; 0x06
    27fc:	01 97       	sbiw	r24, 0x01	; 1
    27fe:	9e 83       	std	Y+6, r25	; 0x06
    2800:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2802:	8d 81       	ldd	r24, Y+5	; 0x05
    2804:	9e 81       	ldd	r25, Y+6	; 0x06
    2806:	00 97       	sbiw	r24, 0x00	; 0
    2808:	69 f7       	brne	.-38     	; 0x27e4 <LCD_sendCommand+0x88e>
    280a:	14 c0       	rjmp	.+40     	; 0x2834 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    280c:	6f 81       	ldd	r22, Y+7	; 0x07
    280e:	78 85       	ldd	r23, Y+8	; 0x08
    2810:	89 85       	ldd	r24, Y+9	; 0x09
    2812:	9a 85       	ldd	r25, Y+10	; 0x0a
    2814:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	9e 83       	std	Y+6, r25	; 0x06
    281e:	8d 83       	std	Y+5, r24	; 0x05
    2820:	8d 81       	ldd	r24, Y+5	; 0x05
    2822:	9e 81       	ldd	r25, Y+6	; 0x06
    2824:	9a 83       	std	Y+2, r25	; 0x02
    2826:	89 83       	std	Y+1, r24	; 0x01
    2828:	89 81       	ldd	r24, Y+1	; 0x01
    282a:	9a 81       	ldd	r25, Y+2	; 0x02
    282c:	01 97       	sbiw	r24, 0x01	; 1
    282e:	f1 f7       	brne	.-4      	; 0x282c <LCD_sendCommand+0x8d6>
    2830:	9a 83       	std	Y+2, r25	; 0x02
    2832:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2834:	cd 59       	subi	r28, 0x9D	; 157
    2836:	df 4f       	sbci	r29, 0xFF	; 255
    2838:	0f b6       	in	r0, 0x3f	; 63
    283a:	f8 94       	cli
    283c:	de bf       	out	0x3e, r29	; 62
    283e:	0f be       	out	0x3f, r0	; 63
    2840:	cd bf       	out	0x3d, r28	; 61
    2842:	cf 91       	pop	r28
    2844:	df 91       	pop	r29
    2846:	1f 91       	pop	r17
    2848:	0f 91       	pop	r16
    284a:	08 95       	ret

0000284c <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    284c:	0f 93       	push	r16
    284e:	1f 93       	push	r17
    2850:	df 93       	push	r29
    2852:	cf 93       	push	r28
    2854:	cd b7       	in	r28, 0x3d	; 61
    2856:	de b7       	in	r29, 0x3e	; 62
    2858:	c3 56       	subi	r28, 0x63	; 99
    285a:	d0 40       	sbci	r29, 0x00	; 0
    285c:	0f b6       	in	r0, 0x3f	; 63
    285e:	f8 94       	cli
    2860:	de bf       	out	0x3e, r29	; 62
    2862:	0f be       	out	0x3f, r0	; 63
    2864:	cd bf       	out	0x3d, r28	; 61
    2866:	fe 01       	movw	r30, r28
    2868:	ed 59       	subi	r30, 0x9D	; 157
    286a:	ff 4f       	sbci	r31, 0xFF	; 255
    286c:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    286e:	82 e0       	ldi	r24, 0x02	; 2
    2870:	60 e0       	ldi	r22, 0x00	; 0
    2872:	41 e0       	ldi	r20, 0x01	; 1
    2874:	0e 94 0e 0b 	call	0x161c	; 0x161c <GPIO_writePin>
    2878:	fe 01       	movw	r30, r28
    287a:	e1 5a       	subi	r30, 0xA1	; 161
    287c:	ff 4f       	sbci	r31, 0xFF	; 255
    287e:	80 e0       	ldi	r24, 0x00	; 0
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	a0 e8       	ldi	r26, 0x80	; 128
    2884:	bf e3       	ldi	r27, 0x3F	; 63
    2886:	80 83       	st	Z, r24
    2888:	91 83       	std	Z+1, r25	; 0x01
    288a:	a2 83       	std	Z+2, r26	; 0x02
    288c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    288e:	8e 01       	movw	r16, r28
    2890:	05 5a       	subi	r16, 0xA5	; 165
    2892:	1f 4f       	sbci	r17, 0xFF	; 255
    2894:	fe 01       	movw	r30, r28
    2896:	e1 5a       	subi	r30, 0xA1	; 161
    2898:	ff 4f       	sbci	r31, 0xFF	; 255
    289a:	60 81       	ld	r22, Z
    289c:	71 81       	ldd	r23, Z+1	; 0x01
    289e:	82 81       	ldd	r24, Z+2	; 0x02
    28a0:	93 81       	ldd	r25, Z+3	; 0x03
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	4a ef       	ldi	r20, 0xFA	; 250
    28a8:	54 e4       	ldi	r21, 0x44	; 68
    28aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ae:	dc 01       	movw	r26, r24
    28b0:	cb 01       	movw	r24, r22
    28b2:	f8 01       	movw	r30, r16
    28b4:	80 83       	st	Z, r24
    28b6:	91 83       	std	Z+1, r25	; 0x01
    28b8:	a2 83       	std	Z+2, r26	; 0x02
    28ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28bc:	fe 01       	movw	r30, r28
    28be:	e5 5a       	subi	r30, 0xA5	; 165
    28c0:	ff 4f       	sbci	r31, 0xFF	; 255
    28c2:	60 81       	ld	r22, Z
    28c4:	71 81       	ldd	r23, Z+1	; 0x01
    28c6:	82 81       	ldd	r24, Z+2	; 0x02
    28c8:	93 81       	ldd	r25, Z+3	; 0x03
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	40 e8       	ldi	r20, 0x80	; 128
    28d0:	5f e3       	ldi	r21, 0x3F	; 63
    28d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28d6:	88 23       	and	r24, r24
    28d8:	44 f4       	brge	.+16     	; 0x28ea <LCD_displayCharacter+0x9e>
		__ticks = 1;
    28da:	fe 01       	movw	r30, r28
    28dc:	e7 5a       	subi	r30, 0xA7	; 167
    28de:	ff 4f       	sbci	r31, 0xFF	; 255
    28e0:	81 e0       	ldi	r24, 0x01	; 1
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	91 83       	std	Z+1, r25	; 0x01
    28e6:	80 83       	st	Z, r24
    28e8:	64 c0       	rjmp	.+200    	; 0x29b2 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    28ea:	fe 01       	movw	r30, r28
    28ec:	e5 5a       	subi	r30, 0xA5	; 165
    28ee:	ff 4f       	sbci	r31, 0xFF	; 255
    28f0:	60 81       	ld	r22, Z
    28f2:	71 81       	ldd	r23, Z+1	; 0x01
    28f4:	82 81       	ldd	r24, Z+2	; 0x02
    28f6:	93 81       	ldd	r25, Z+3	; 0x03
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	3f ef       	ldi	r19, 0xFF	; 255
    28fc:	4f e7       	ldi	r20, 0x7F	; 127
    28fe:	57 e4       	ldi	r21, 0x47	; 71
    2900:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2904:	18 16       	cp	r1, r24
    2906:	0c f0       	brlt	.+2      	; 0x290a <LCD_displayCharacter+0xbe>
    2908:	43 c0       	rjmp	.+134    	; 0x2990 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    290a:	fe 01       	movw	r30, r28
    290c:	e1 5a       	subi	r30, 0xA1	; 161
    290e:	ff 4f       	sbci	r31, 0xFF	; 255
    2910:	60 81       	ld	r22, Z
    2912:	71 81       	ldd	r23, Z+1	; 0x01
    2914:	82 81       	ldd	r24, Z+2	; 0x02
    2916:	93 81       	ldd	r25, Z+3	; 0x03
    2918:	20 e0       	ldi	r18, 0x00	; 0
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	40 e2       	ldi	r20, 0x20	; 32
    291e:	51 e4       	ldi	r21, 0x41	; 65
    2920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2924:	dc 01       	movw	r26, r24
    2926:	cb 01       	movw	r24, r22
    2928:	8e 01       	movw	r16, r28
    292a:	07 5a       	subi	r16, 0xA7	; 167
    292c:	1f 4f       	sbci	r17, 0xFF	; 255
    292e:	bc 01       	movw	r22, r24
    2930:	cd 01       	movw	r24, r26
    2932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2936:	dc 01       	movw	r26, r24
    2938:	cb 01       	movw	r24, r22
    293a:	f8 01       	movw	r30, r16
    293c:	91 83       	std	Z+1, r25	; 0x01
    293e:	80 83       	st	Z, r24
    2940:	1f c0       	rjmp	.+62     	; 0x2980 <LCD_displayCharacter+0x134>
    2942:	fe 01       	movw	r30, r28
    2944:	e9 5a       	subi	r30, 0xA9	; 169
    2946:	ff 4f       	sbci	r31, 0xFF	; 255
    2948:	88 ec       	ldi	r24, 0xC8	; 200
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	91 83       	std	Z+1, r25	; 0x01
    294e:	80 83       	st	Z, r24
    2950:	fe 01       	movw	r30, r28
    2952:	e9 5a       	subi	r30, 0xA9	; 169
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	80 81       	ld	r24, Z
    2958:	91 81       	ldd	r25, Z+1	; 0x01
    295a:	01 97       	sbiw	r24, 0x01	; 1
    295c:	f1 f7       	brne	.-4      	; 0x295a <LCD_displayCharacter+0x10e>
    295e:	fe 01       	movw	r30, r28
    2960:	e9 5a       	subi	r30, 0xA9	; 169
    2962:	ff 4f       	sbci	r31, 0xFF	; 255
    2964:	91 83       	std	Z+1, r25	; 0x01
    2966:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2968:	de 01       	movw	r26, r28
    296a:	a7 5a       	subi	r26, 0xA7	; 167
    296c:	bf 4f       	sbci	r27, 0xFF	; 255
    296e:	fe 01       	movw	r30, r28
    2970:	e7 5a       	subi	r30, 0xA7	; 167
    2972:	ff 4f       	sbci	r31, 0xFF	; 255
    2974:	80 81       	ld	r24, Z
    2976:	91 81       	ldd	r25, Z+1	; 0x01
    2978:	01 97       	sbiw	r24, 0x01	; 1
    297a:	11 96       	adiw	r26, 0x01	; 1
    297c:	9c 93       	st	X, r25
    297e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2980:	fe 01       	movw	r30, r28
    2982:	e7 5a       	subi	r30, 0xA7	; 167
    2984:	ff 4f       	sbci	r31, 0xFF	; 255
    2986:	80 81       	ld	r24, Z
    2988:	91 81       	ldd	r25, Z+1	; 0x01
    298a:	00 97       	sbiw	r24, 0x00	; 0
    298c:	d1 f6       	brne	.-76     	; 0x2942 <LCD_displayCharacter+0xf6>
    298e:	27 c0       	rjmp	.+78     	; 0x29de <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2990:	8e 01       	movw	r16, r28
    2992:	07 5a       	subi	r16, 0xA7	; 167
    2994:	1f 4f       	sbci	r17, 0xFF	; 255
    2996:	fe 01       	movw	r30, r28
    2998:	e5 5a       	subi	r30, 0xA5	; 165
    299a:	ff 4f       	sbci	r31, 0xFF	; 255
    299c:	60 81       	ld	r22, Z
    299e:	71 81       	ldd	r23, Z+1	; 0x01
    29a0:	82 81       	ldd	r24, Z+2	; 0x02
    29a2:	93 81       	ldd	r25, Z+3	; 0x03
    29a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	f8 01       	movw	r30, r16
    29ae:	91 83       	std	Z+1, r25	; 0x01
    29b0:	80 83       	st	Z, r24
    29b2:	de 01       	movw	r26, r28
    29b4:	ab 5a       	subi	r26, 0xAB	; 171
    29b6:	bf 4f       	sbci	r27, 0xFF	; 255
    29b8:	fe 01       	movw	r30, r28
    29ba:	e7 5a       	subi	r30, 0xA7	; 167
    29bc:	ff 4f       	sbci	r31, 0xFF	; 255
    29be:	80 81       	ld	r24, Z
    29c0:	91 81       	ldd	r25, Z+1	; 0x01
    29c2:	8d 93       	st	X+, r24
    29c4:	9c 93       	st	X, r25
    29c6:	fe 01       	movw	r30, r28
    29c8:	eb 5a       	subi	r30, 0xAB	; 171
    29ca:	ff 4f       	sbci	r31, 0xFF	; 255
    29cc:	80 81       	ld	r24, Z
    29ce:	91 81       	ldd	r25, Z+1	; 0x01
    29d0:	01 97       	sbiw	r24, 0x01	; 1
    29d2:	f1 f7       	brne	.-4      	; 0x29d0 <LCD_displayCharacter+0x184>
    29d4:	fe 01       	movw	r30, r28
    29d6:	eb 5a       	subi	r30, 0xAB	; 171
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	91 83       	std	Z+1, r25	; 0x01
    29dc:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    29de:	82 e0       	ldi	r24, 0x02	; 2
    29e0:	62 e0       	ldi	r22, 0x02	; 2
    29e2:	41 e0       	ldi	r20, 0x01	; 1
    29e4:	0e 94 0e 0b 	call	0x161c	; 0x161c <GPIO_writePin>
    29e8:	fe 01       	movw	r30, r28
    29ea:	ef 5a       	subi	r30, 0xAF	; 175
    29ec:	ff 4f       	sbci	r31, 0xFF	; 255
    29ee:	80 e0       	ldi	r24, 0x00	; 0
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	a0 e8       	ldi	r26, 0x80	; 128
    29f4:	bf e3       	ldi	r27, 0x3F	; 63
    29f6:	80 83       	st	Z, r24
    29f8:	91 83       	std	Z+1, r25	; 0x01
    29fa:	a2 83       	std	Z+2, r26	; 0x02
    29fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29fe:	8e 01       	movw	r16, r28
    2a00:	03 5b       	subi	r16, 0xB3	; 179
    2a02:	1f 4f       	sbci	r17, 0xFF	; 255
    2a04:	fe 01       	movw	r30, r28
    2a06:	ef 5a       	subi	r30, 0xAF	; 175
    2a08:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0a:	60 81       	ld	r22, Z
    2a0c:	71 81       	ldd	r23, Z+1	; 0x01
    2a0e:	82 81       	ldd	r24, Z+2	; 0x02
    2a10:	93 81       	ldd	r25, Z+3	; 0x03
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	4a ef       	ldi	r20, 0xFA	; 250
    2a18:	54 e4       	ldi	r21, 0x44	; 68
    2a1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
    2a22:	f8 01       	movw	r30, r16
    2a24:	80 83       	st	Z, r24
    2a26:	91 83       	std	Z+1, r25	; 0x01
    2a28:	a2 83       	std	Z+2, r26	; 0x02
    2a2a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a2c:	fe 01       	movw	r30, r28
    2a2e:	e3 5b       	subi	r30, 0xB3	; 179
    2a30:	ff 4f       	sbci	r31, 0xFF	; 255
    2a32:	60 81       	ld	r22, Z
    2a34:	71 81       	ldd	r23, Z+1	; 0x01
    2a36:	82 81       	ldd	r24, Z+2	; 0x02
    2a38:	93 81       	ldd	r25, Z+3	; 0x03
    2a3a:	20 e0       	ldi	r18, 0x00	; 0
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	40 e8       	ldi	r20, 0x80	; 128
    2a40:	5f e3       	ldi	r21, 0x3F	; 63
    2a42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a46:	88 23       	and	r24, r24
    2a48:	44 f4       	brge	.+16     	; 0x2a5a <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2a4a:	fe 01       	movw	r30, r28
    2a4c:	e5 5b       	subi	r30, 0xB5	; 181
    2a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	91 83       	std	Z+1, r25	; 0x01
    2a56:	80 83       	st	Z, r24
    2a58:	64 c0       	rjmp	.+200    	; 0x2b22 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2a5a:	fe 01       	movw	r30, r28
    2a5c:	e3 5b       	subi	r30, 0xB3	; 179
    2a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a60:	60 81       	ld	r22, Z
    2a62:	71 81       	ldd	r23, Z+1	; 0x01
    2a64:	82 81       	ldd	r24, Z+2	; 0x02
    2a66:	93 81       	ldd	r25, Z+3	; 0x03
    2a68:	20 e0       	ldi	r18, 0x00	; 0
    2a6a:	3f ef       	ldi	r19, 0xFF	; 255
    2a6c:	4f e7       	ldi	r20, 0x7F	; 127
    2a6e:	57 e4       	ldi	r21, 0x47	; 71
    2a70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a74:	18 16       	cp	r1, r24
    2a76:	0c f0       	brlt	.+2      	; 0x2a7a <LCD_displayCharacter+0x22e>
    2a78:	43 c0       	rjmp	.+134    	; 0x2b00 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a7a:	fe 01       	movw	r30, r28
    2a7c:	ef 5a       	subi	r30, 0xAF	; 175
    2a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a80:	60 81       	ld	r22, Z
    2a82:	71 81       	ldd	r23, Z+1	; 0x01
    2a84:	82 81       	ldd	r24, Z+2	; 0x02
    2a86:	93 81       	ldd	r25, Z+3	; 0x03
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	40 e2       	ldi	r20, 0x20	; 32
    2a8e:	51 e4       	ldi	r21, 0x41	; 65
    2a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a94:	dc 01       	movw	r26, r24
    2a96:	cb 01       	movw	r24, r22
    2a98:	8e 01       	movw	r16, r28
    2a9a:	05 5b       	subi	r16, 0xB5	; 181
    2a9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a9e:	bc 01       	movw	r22, r24
    2aa0:	cd 01       	movw	r24, r26
    2aa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa6:	dc 01       	movw	r26, r24
    2aa8:	cb 01       	movw	r24, r22
    2aaa:	f8 01       	movw	r30, r16
    2aac:	91 83       	std	Z+1, r25	; 0x01
    2aae:	80 83       	st	Z, r24
    2ab0:	1f c0       	rjmp	.+62     	; 0x2af0 <LCD_displayCharacter+0x2a4>
    2ab2:	fe 01       	movw	r30, r28
    2ab4:	e7 5b       	subi	r30, 0xB7	; 183
    2ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab8:	88 ec       	ldi	r24, 0xC8	; 200
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	91 83       	std	Z+1, r25	; 0x01
    2abe:	80 83       	st	Z, r24
    2ac0:	fe 01       	movw	r30, r28
    2ac2:	e7 5b       	subi	r30, 0xB7	; 183
    2ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac6:	80 81       	ld	r24, Z
    2ac8:	91 81       	ldd	r25, Z+1	; 0x01
    2aca:	01 97       	sbiw	r24, 0x01	; 1
    2acc:	f1 f7       	brne	.-4      	; 0x2aca <LCD_displayCharacter+0x27e>
    2ace:	fe 01       	movw	r30, r28
    2ad0:	e7 5b       	subi	r30, 0xB7	; 183
    2ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad4:	91 83       	std	Z+1, r25	; 0x01
    2ad6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ad8:	de 01       	movw	r26, r28
    2ada:	a5 5b       	subi	r26, 0xB5	; 181
    2adc:	bf 4f       	sbci	r27, 0xFF	; 255
    2ade:	fe 01       	movw	r30, r28
    2ae0:	e5 5b       	subi	r30, 0xB5	; 181
    2ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae4:	80 81       	ld	r24, Z
    2ae6:	91 81       	ldd	r25, Z+1	; 0x01
    2ae8:	01 97       	sbiw	r24, 0x01	; 1
    2aea:	11 96       	adiw	r26, 0x01	; 1
    2aec:	9c 93       	st	X, r25
    2aee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2af0:	fe 01       	movw	r30, r28
    2af2:	e5 5b       	subi	r30, 0xB5	; 181
    2af4:	ff 4f       	sbci	r31, 0xFF	; 255
    2af6:	80 81       	ld	r24, Z
    2af8:	91 81       	ldd	r25, Z+1	; 0x01
    2afa:	00 97       	sbiw	r24, 0x00	; 0
    2afc:	d1 f6       	brne	.-76     	; 0x2ab2 <LCD_displayCharacter+0x266>
    2afe:	27 c0       	rjmp	.+78     	; 0x2b4e <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b00:	8e 01       	movw	r16, r28
    2b02:	05 5b       	subi	r16, 0xB5	; 181
    2b04:	1f 4f       	sbci	r17, 0xFF	; 255
    2b06:	fe 01       	movw	r30, r28
    2b08:	e3 5b       	subi	r30, 0xB3	; 179
    2b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0c:	60 81       	ld	r22, Z
    2b0e:	71 81       	ldd	r23, Z+1	; 0x01
    2b10:	82 81       	ldd	r24, Z+2	; 0x02
    2b12:	93 81       	ldd	r25, Z+3	; 0x03
    2b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b18:	dc 01       	movw	r26, r24
    2b1a:	cb 01       	movw	r24, r22
    2b1c:	f8 01       	movw	r30, r16
    2b1e:	91 83       	std	Z+1, r25	; 0x01
    2b20:	80 83       	st	Z, r24
    2b22:	de 01       	movw	r26, r28
    2b24:	a9 5b       	subi	r26, 0xB9	; 185
    2b26:	bf 4f       	sbci	r27, 0xFF	; 255
    2b28:	fe 01       	movw	r30, r28
    2b2a:	e5 5b       	subi	r30, 0xB5	; 181
    2b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2e:	80 81       	ld	r24, Z
    2b30:	91 81       	ldd	r25, Z+1	; 0x01
    2b32:	8d 93       	st	X+, r24
    2b34:	9c 93       	st	X, r25
    2b36:	fe 01       	movw	r30, r28
    2b38:	e9 5b       	subi	r30, 0xB9	; 185
    2b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3c:	80 81       	ld	r24, Z
    2b3e:	91 81       	ldd	r25, Z+1	; 0x01
    2b40:	01 97       	sbiw	r24, 0x01	; 1
    2b42:	f1 f7       	brne	.-4      	; 0x2b40 <LCD_displayCharacter+0x2f4>
    2b44:	fe 01       	movw	r30, r28
    2b46:	e9 5b       	subi	r30, 0xB9	; 185
    2b48:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4a:	91 83       	std	Z+1, r25	; 0x01
    2b4c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2b4e:	fe 01       	movw	r30, r28
    2b50:	ed 59       	subi	r30, 0x9D	; 157
    2b52:	ff 4f       	sbci	r31, 0xFF	; 255
    2b54:	80 81       	ld	r24, Z
    2b56:	88 2f       	mov	r24, r24
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	80 71       	andi	r24, 0x10	; 16
    2b5c:	90 70       	andi	r25, 0x00	; 0
    2b5e:	95 95       	asr	r25
    2b60:	87 95       	ror	r24
    2b62:	95 95       	asr	r25
    2b64:	87 95       	ror	r24
    2b66:	95 95       	asr	r25
    2b68:	87 95       	ror	r24
    2b6a:	95 95       	asr	r25
    2b6c:	87 95       	ror	r24
    2b6e:	98 2f       	mov	r25, r24
    2b70:	82 e0       	ldi	r24, 0x02	; 2
    2b72:	64 e0       	ldi	r22, 0x04	; 4
    2b74:	49 2f       	mov	r20, r25
    2b76:	0e 94 0e 0b 	call	0x161c	; 0x161c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2b7a:	fe 01       	movw	r30, r28
    2b7c:	ed 59       	subi	r30, 0x9D	; 157
    2b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b80:	80 81       	ld	r24, Z
    2b82:	88 2f       	mov	r24, r24
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	80 72       	andi	r24, 0x20	; 32
    2b88:	90 70       	andi	r25, 0x00	; 0
    2b8a:	95 95       	asr	r25
    2b8c:	87 95       	ror	r24
    2b8e:	95 95       	asr	r25
    2b90:	87 95       	ror	r24
    2b92:	95 95       	asr	r25
    2b94:	87 95       	ror	r24
    2b96:	95 95       	asr	r25
    2b98:	87 95       	ror	r24
    2b9a:	95 95       	asr	r25
    2b9c:	87 95       	ror	r24
    2b9e:	98 2f       	mov	r25, r24
    2ba0:	82 e0       	ldi	r24, 0x02	; 2
    2ba2:	65 e0       	ldi	r22, 0x05	; 5
    2ba4:	49 2f       	mov	r20, r25
    2ba6:	0e 94 0e 0b 	call	0x161c	; 0x161c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2baa:	fe 01       	movw	r30, r28
    2bac:	ed 59       	subi	r30, 0x9D	; 157
    2bae:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb0:	80 81       	ld	r24, Z
    2bb2:	88 2f       	mov	r24, r24
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	80 74       	andi	r24, 0x40	; 64
    2bb8:	90 70       	andi	r25, 0x00	; 0
    2bba:	08 2e       	mov	r0, r24
    2bbc:	89 2f       	mov	r24, r25
    2bbe:	00 0c       	add	r0, r0
    2bc0:	88 1f       	adc	r24, r24
    2bc2:	99 0b       	sbc	r25, r25
    2bc4:	00 0c       	add	r0, r0
    2bc6:	88 1f       	adc	r24, r24
    2bc8:	99 1f       	adc	r25, r25
    2bca:	98 2f       	mov	r25, r24
    2bcc:	82 e0       	ldi	r24, 0x02	; 2
    2bce:	66 e0       	ldi	r22, 0x06	; 6
    2bd0:	49 2f       	mov	r20, r25
    2bd2:	0e 94 0e 0b 	call	0x161c	; 0x161c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2bd6:	fe 01       	movw	r30, r28
    2bd8:	ed 59       	subi	r30, 0x9D	; 157
    2bda:	ff 4f       	sbci	r31, 0xFF	; 255
    2bdc:	80 81       	ld	r24, Z
    2bde:	98 2f       	mov	r25, r24
    2be0:	99 1f       	adc	r25, r25
    2be2:	99 27       	eor	r25, r25
    2be4:	99 1f       	adc	r25, r25
    2be6:	82 e0       	ldi	r24, 0x02	; 2
    2be8:	67 e0       	ldi	r22, 0x07	; 7
    2bea:	49 2f       	mov	r20, r25
    2bec:	0e 94 0e 0b 	call	0x161c	; 0x161c <GPIO_writePin>
    2bf0:	fe 01       	movw	r30, r28
    2bf2:	ed 5b       	subi	r30, 0xBD	; 189
    2bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf6:	80 e0       	ldi	r24, 0x00	; 0
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	a0 e8       	ldi	r26, 0x80	; 128
    2bfc:	bf e3       	ldi	r27, 0x3F	; 63
    2bfe:	80 83       	st	Z, r24
    2c00:	91 83       	std	Z+1, r25	; 0x01
    2c02:	a2 83       	std	Z+2, r26	; 0x02
    2c04:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c06:	8e 01       	movw	r16, r28
    2c08:	01 5c       	subi	r16, 0xC1	; 193
    2c0a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c0c:	fe 01       	movw	r30, r28
    2c0e:	ed 5b       	subi	r30, 0xBD	; 189
    2c10:	ff 4f       	sbci	r31, 0xFF	; 255
    2c12:	60 81       	ld	r22, Z
    2c14:	71 81       	ldd	r23, Z+1	; 0x01
    2c16:	82 81       	ldd	r24, Z+2	; 0x02
    2c18:	93 81       	ldd	r25, Z+3	; 0x03
    2c1a:	20 e0       	ldi	r18, 0x00	; 0
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	4a ef       	ldi	r20, 0xFA	; 250
    2c20:	54 e4       	ldi	r21, 0x44	; 68
    2c22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c26:	dc 01       	movw	r26, r24
    2c28:	cb 01       	movw	r24, r22
    2c2a:	f8 01       	movw	r30, r16
    2c2c:	80 83       	st	Z, r24
    2c2e:	91 83       	std	Z+1, r25	; 0x01
    2c30:	a2 83       	std	Z+2, r26	; 0x02
    2c32:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c34:	fe 01       	movw	r30, r28
    2c36:	ff 96       	adiw	r30, 0x3f	; 63
    2c38:	60 81       	ld	r22, Z
    2c3a:	71 81       	ldd	r23, Z+1	; 0x01
    2c3c:	82 81       	ldd	r24, Z+2	; 0x02
    2c3e:	93 81       	ldd	r25, Z+3	; 0x03
    2c40:	20 e0       	ldi	r18, 0x00	; 0
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	40 e8       	ldi	r20, 0x80	; 128
    2c46:	5f e3       	ldi	r21, 0x3F	; 63
    2c48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c4c:	88 23       	and	r24, r24
    2c4e:	2c f4       	brge	.+10     	; 0x2c5a <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	9e af       	std	Y+62, r25	; 0x3e
    2c56:	8d af       	std	Y+61, r24	; 0x3d
    2c58:	46 c0       	rjmp	.+140    	; 0x2ce6 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2c5a:	fe 01       	movw	r30, r28
    2c5c:	ff 96       	adiw	r30, 0x3f	; 63
    2c5e:	60 81       	ld	r22, Z
    2c60:	71 81       	ldd	r23, Z+1	; 0x01
    2c62:	82 81       	ldd	r24, Z+2	; 0x02
    2c64:	93 81       	ldd	r25, Z+3	; 0x03
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	3f ef       	ldi	r19, 0xFF	; 255
    2c6a:	4f e7       	ldi	r20, 0x7F	; 127
    2c6c:	57 e4       	ldi	r21, 0x47	; 71
    2c6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c72:	18 16       	cp	r1, r24
    2c74:	64 f5       	brge	.+88     	; 0x2cce <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c76:	fe 01       	movw	r30, r28
    2c78:	ed 5b       	subi	r30, 0xBD	; 189
    2c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7c:	60 81       	ld	r22, Z
    2c7e:	71 81       	ldd	r23, Z+1	; 0x01
    2c80:	82 81       	ldd	r24, Z+2	; 0x02
    2c82:	93 81       	ldd	r25, Z+3	; 0x03
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	40 e2       	ldi	r20, 0x20	; 32
    2c8a:	51 e4       	ldi	r21, 0x41	; 65
    2c8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c90:	dc 01       	movw	r26, r24
    2c92:	cb 01       	movw	r24, r22
    2c94:	bc 01       	movw	r22, r24
    2c96:	cd 01       	movw	r24, r26
    2c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	9e af       	std	Y+62, r25	; 0x3e
    2ca2:	8d af       	std	Y+61, r24	; 0x3d
    2ca4:	0f c0       	rjmp	.+30     	; 0x2cc4 <LCD_displayCharacter+0x478>
    2ca6:	88 ec       	ldi	r24, 0xC8	; 200
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	9c af       	std	Y+60, r25	; 0x3c
    2cac:	8b af       	std	Y+59, r24	; 0x3b
    2cae:	8b ad       	ldd	r24, Y+59	; 0x3b
    2cb0:	9c ad       	ldd	r25, Y+60	; 0x3c
    2cb2:	01 97       	sbiw	r24, 0x01	; 1
    2cb4:	f1 f7       	brne	.-4      	; 0x2cb2 <LCD_displayCharacter+0x466>
    2cb6:	9c af       	std	Y+60, r25	; 0x3c
    2cb8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cba:	8d ad       	ldd	r24, Y+61	; 0x3d
    2cbc:	9e ad       	ldd	r25, Y+62	; 0x3e
    2cbe:	01 97       	sbiw	r24, 0x01	; 1
    2cc0:	9e af       	std	Y+62, r25	; 0x3e
    2cc2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cc4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2cc6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2cc8:	00 97       	sbiw	r24, 0x00	; 0
    2cca:	69 f7       	brne	.-38     	; 0x2ca6 <LCD_displayCharacter+0x45a>
    2ccc:	16 c0       	rjmp	.+44     	; 0x2cfa <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cce:	fe 01       	movw	r30, r28
    2cd0:	ff 96       	adiw	r30, 0x3f	; 63
    2cd2:	60 81       	ld	r22, Z
    2cd4:	71 81       	ldd	r23, Z+1	; 0x01
    2cd6:	82 81       	ldd	r24, Z+2	; 0x02
    2cd8:	93 81       	ldd	r25, Z+3	; 0x03
    2cda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cde:	dc 01       	movw	r26, r24
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	9e af       	std	Y+62, r25	; 0x3e
    2ce4:	8d af       	std	Y+61, r24	; 0x3d
    2ce6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ce8:	9e ad       	ldd	r25, Y+62	; 0x3e
    2cea:	9a af       	std	Y+58, r25	; 0x3a
    2cec:	89 af       	std	Y+57, r24	; 0x39
    2cee:	89 ad       	ldd	r24, Y+57	; 0x39
    2cf0:	9a ad       	ldd	r25, Y+58	; 0x3a
    2cf2:	01 97       	sbiw	r24, 0x01	; 1
    2cf4:	f1 f7       	brne	.-4      	; 0x2cf2 <LCD_displayCharacter+0x4a6>
    2cf6:	9a af       	std	Y+58, r25	; 0x3a
    2cf8:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2cfa:	82 e0       	ldi	r24, 0x02	; 2
    2cfc:	62 e0       	ldi	r22, 0x02	; 2
    2cfe:	40 e0       	ldi	r20, 0x00	; 0
    2d00:	0e 94 0e 0b 	call	0x161c	; 0x161c <GPIO_writePin>
    2d04:	80 e0       	ldi	r24, 0x00	; 0
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	a0 e8       	ldi	r26, 0x80	; 128
    2d0a:	bf e3       	ldi	r27, 0x3F	; 63
    2d0c:	8d ab       	std	Y+53, r24	; 0x35
    2d0e:	9e ab       	std	Y+54, r25	; 0x36
    2d10:	af ab       	std	Y+55, r26	; 0x37
    2d12:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d14:	6d a9       	ldd	r22, Y+53	; 0x35
    2d16:	7e a9       	ldd	r23, Y+54	; 0x36
    2d18:	8f a9       	ldd	r24, Y+55	; 0x37
    2d1a:	98 ad       	ldd	r25, Y+56	; 0x38
    2d1c:	20 e0       	ldi	r18, 0x00	; 0
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	4a ef       	ldi	r20, 0xFA	; 250
    2d22:	54 e4       	ldi	r21, 0x44	; 68
    2d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d28:	dc 01       	movw	r26, r24
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	89 ab       	std	Y+49, r24	; 0x31
    2d2e:	9a ab       	std	Y+50, r25	; 0x32
    2d30:	ab ab       	std	Y+51, r26	; 0x33
    2d32:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d34:	69 a9       	ldd	r22, Y+49	; 0x31
    2d36:	7a a9       	ldd	r23, Y+50	; 0x32
    2d38:	8b a9       	ldd	r24, Y+51	; 0x33
    2d3a:	9c a9       	ldd	r25, Y+52	; 0x34
    2d3c:	20 e0       	ldi	r18, 0x00	; 0
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	40 e8       	ldi	r20, 0x80	; 128
    2d42:	5f e3       	ldi	r21, 0x3F	; 63
    2d44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d48:	88 23       	and	r24, r24
    2d4a:	2c f4       	brge	.+10     	; 0x2d56 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2d4c:	81 e0       	ldi	r24, 0x01	; 1
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	98 ab       	std	Y+48, r25	; 0x30
    2d52:	8f a7       	std	Y+47, r24	; 0x2f
    2d54:	3f c0       	rjmp	.+126    	; 0x2dd4 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2d56:	69 a9       	ldd	r22, Y+49	; 0x31
    2d58:	7a a9       	ldd	r23, Y+50	; 0x32
    2d5a:	8b a9       	ldd	r24, Y+51	; 0x33
    2d5c:	9c a9       	ldd	r25, Y+52	; 0x34
    2d5e:	20 e0       	ldi	r18, 0x00	; 0
    2d60:	3f ef       	ldi	r19, 0xFF	; 255
    2d62:	4f e7       	ldi	r20, 0x7F	; 127
    2d64:	57 e4       	ldi	r21, 0x47	; 71
    2d66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d6a:	18 16       	cp	r1, r24
    2d6c:	4c f5       	brge	.+82     	; 0x2dc0 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d6e:	6d a9       	ldd	r22, Y+53	; 0x35
    2d70:	7e a9       	ldd	r23, Y+54	; 0x36
    2d72:	8f a9       	ldd	r24, Y+55	; 0x37
    2d74:	98 ad       	ldd	r25, Y+56	; 0x38
    2d76:	20 e0       	ldi	r18, 0x00	; 0
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	40 e2       	ldi	r20, 0x20	; 32
    2d7c:	51 e4       	ldi	r21, 0x41	; 65
    2d7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d82:	dc 01       	movw	r26, r24
    2d84:	cb 01       	movw	r24, r22
    2d86:	bc 01       	movw	r22, r24
    2d88:	cd 01       	movw	r24, r26
    2d8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d8e:	dc 01       	movw	r26, r24
    2d90:	cb 01       	movw	r24, r22
    2d92:	98 ab       	std	Y+48, r25	; 0x30
    2d94:	8f a7       	std	Y+47, r24	; 0x2f
    2d96:	0f c0       	rjmp	.+30     	; 0x2db6 <LCD_displayCharacter+0x56a>
    2d98:	88 ec       	ldi	r24, 0xC8	; 200
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	9e a7       	std	Y+46, r25	; 0x2e
    2d9e:	8d a7       	std	Y+45, r24	; 0x2d
    2da0:	8d a5       	ldd	r24, Y+45	; 0x2d
    2da2:	9e a5       	ldd	r25, Y+46	; 0x2e
    2da4:	01 97       	sbiw	r24, 0x01	; 1
    2da6:	f1 f7       	brne	.-4      	; 0x2da4 <LCD_displayCharacter+0x558>
    2da8:	9e a7       	std	Y+46, r25	; 0x2e
    2daa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dac:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dae:	98 a9       	ldd	r25, Y+48	; 0x30
    2db0:	01 97       	sbiw	r24, 0x01	; 1
    2db2:	98 ab       	std	Y+48, r25	; 0x30
    2db4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2db6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2db8:	98 a9       	ldd	r25, Y+48	; 0x30
    2dba:	00 97       	sbiw	r24, 0x00	; 0
    2dbc:	69 f7       	brne	.-38     	; 0x2d98 <LCD_displayCharacter+0x54c>
    2dbe:	14 c0       	rjmp	.+40     	; 0x2de8 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dc0:	69 a9       	ldd	r22, Y+49	; 0x31
    2dc2:	7a a9       	ldd	r23, Y+50	; 0x32
    2dc4:	8b a9       	ldd	r24, Y+51	; 0x33
    2dc6:	9c a9       	ldd	r25, Y+52	; 0x34
    2dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dcc:	dc 01       	movw	r26, r24
    2dce:	cb 01       	movw	r24, r22
    2dd0:	98 ab       	std	Y+48, r25	; 0x30
    2dd2:	8f a7       	std	Y+47, r24	; 0x2f
    2dd4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dd6:	98 a9       	ldd	r25, Y+48	; 0x30
    2dd8:	9c a7       	std	Y+44, r25	; 0x2c
    2dda:	8b a7       	std	Y+43, r24	; 0x2b
    2ddc:	8b a5       	ldd	r24, Y+43	; 0x2b
    2dde:	9c a5       	ldd	r25, Y+44	; 0x2c
    2de0:	01 97       	sbiw	r24, 0x01	; 1
    2de2:	f1 f7       	brne	.-4      	; 0x2de0 <LCD_displayCharacter+0x594>
    2de4:	9c a7       	std	Y+44, r25	; 0x2c
    2de6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2de8:	82 e0       	ldi	r24, 0x02	; 2
    2dea:	62 e0       	ldi	r22, 0x02	; 2
    2dec:	41 e0       	ldi	r20, 0x01	; 1
    2dee:	0e 94 0e 0b 	call	0x161c	; 0x161c <GPIO_writePin>
    2df2:	80 e0       	ldi	r24, 0x00	; 0
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	a0 e8       	ldi	r26, 0x80	; 128
    2df8:	bf e3       	ldi	r27, 0x3F	; 63
    2dfa:	8f a3       	std	Y+39, r24	; 0x27
    2dfc:	98 a7       	std	Y+40, r25	; 0x28
    2dfe:	a9 a7       	std	Y+41, r26	; 0x29
    2e00:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e02:	6f a1       	ldd	r22, Y+39	; 0x27
    2e04:	78 a5       	ldd	r23, Y+40	; 0x28
    2e06:	89 a5       	ldd	r24, Y+41	; 0x29
    2e08:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e0a:	20 e0       	ldi	r18, 0x00	; 0
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
    2e0e:	4a ef       	ldi	r20, 0xFA	; 250
    2e10:	54 e4       	ldi	r21, 0x44	; 68
    2e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e16:	dc 01       	movw	r26, r24
    2e18:	cb 01       	movw	r24, r22
    2e1a:	8b a3       	std	Y+35, r24	; 0x23
    2e1c:	9c a3       	std	Y+36, r25	; 0x24
    2e1e:	ad a3       	std	Y+37, r26	; 0x25
    2e20:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e22:	6b a1       	ldd	r22, Y+35	; 0x23
    2e24:	7c a1       	ldd	r23, Y+36	; 0x24
    2e26:	8d a1       	ldd	r24, Y+37	; 0x25
    2e28:	9e a1       	ldd	r25, Y+38	; 0x26
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	40 e8       	ldi	r20, 0x80	; 128
    2e30:	5f e3       	ldi	r21, 0x3F	; 63
    2e32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e36:	88 23       	and	r24, r24
    2e38:	2c f4       	brge	.+10     	; 0x2e44 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	9a a3       	std	Y+34, r25	; 0x22
    2e40:	89 a3       	std	Y+33, r24	; 0x21
    2e42:	3f c0       	rjmp	.+126    	; 0x2ec2 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2e44:	6b a1       	ldd	r22, Y+35	; 0x23
    2e46:	7c a1       	ldd	r23, Y+36	; 0x24
    2e48:	8d a1       	ldd	r24, Y+37	; 0x25
    2e4a:	9e a1       	ldd	r25, Y+38	; 0x26
    2e4c:	20 e0       	ldi	r18, 0x00	; 0
    2e4e:	3f ef       	ldi	r19, 0xFF	; 255
    2e50:	4f e7       	ldi	r20, 0x7F	; 127
    2e52:	57 e4       	ldi	r21, 0x47	; 71
    2e54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e58:	18 16       	cp	r1, r24
    2e5a:	4c f5       	brge	.+82     	; 0x2eae <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e5c:	6f a1       	ldd	r22, Y+39	; 0x27
    2e5e:	78 a5       	ldd	r23, Y+40	; 0x28
    2e60:	89 a5       	ldd	r24, Y+41	; 0x29
    2e62:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e64:	20 e0       	ldi	r18, 0x00	; 0
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	40 e2       	ldi	r20, 0x20	; 32
    2e6a:	51 e4       	ldi	r21, 0x41	; 65
    2e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e70:	dc 01       	movw	r26, r24
    2e72:	cb 01       	movw	r24, r22
    2e74:	bc 01       	movw	r22, r24
    2e76:	cd 01       	movw	r24, r26
    2e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e7c:	dc 01       	movw	r26, r24
    2e7e:	cb 01       	movw	r24, r22
    2e80:	9a a3       	std	Y+34, r25	; 0x22
    2e82:	89 a3       	std	Y+33, r24	; 0x21
    2e84:	0f c0       	rjmp	.+30     	; 0x2ea4 <LCD_displayCharacter+0x658>
    2e86:	88 ec       	ldi	r24, 0xC8	; 200
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	98 a3       	std	Y+32, r25	; 0x20
    2e8c:	8f 8f       	std	Y+31, r24	; 0x1f
    2e8e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e90:	98 a1       	ldd	r25, Y+32	; 0x20
    2e92:	01 97       	sbiw	r24, 0x01	; 1
    2e94:	f1 f7       	brne	.-4      	; 0x2e92 <LCD_displayCharacter+0x646>
    2e96:	98 a3       	std	Y+32, r25	; 0x20
    2e98:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e9a:	89 a1       	ldd	r24, Y+33	; 0x21
    2e9c:	9a a1       	ldd	r25, Y+34	; 0x22
    2e9e:	01 97       	sbiw	r24, 0x01	; 1
    2ea0:	9a a3       	std	Y+34, r25	; 0x22
    2ea2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ea4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ea6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ea8:	00 97       	sbiw	r24, 0x00	; 0
    2eaa:	69 f7       	brne	.-38     	; 0x2e86 <LCD_displayCharacter+0x63a>
    2eac:	14 c0       	rjmp	.+40     	; 0x2ed6 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eae:	6b a1       	ldd	r22, Y+35	; 0x23
    2eb0:	7c a1       	ldd	r23, Y+36	; 0x24
    2eb2:	8d a1       	ldd	r24, Y+37	; 0x25
    2eb4:	9e a1       	ldd	r25, Y+38	; 0x26
    2eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eba:	dc 01       	movw	r26, r24
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	9a a3       	std	Y+34, r25	; 0x22
    2ec0:	89 a3       	std	Y+33, r24	; 0x21
    2ec2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ec4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ec6:	9e 8f       	std	Y+30, r25	; 0x1e
    2ec8:	8d 8f       	std	Y+29, r24	; 0x1d
    2eca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ecc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ece:	01 97       	sbiw	r24, 0x01	; 1
    2ed0:	f1 f7       	brne	.-4      	; 0x2ece <LCD_displayCharacter+0x682>
    2ed2:	9e 8f       	std	Y+30, r25	; 0x1e
    2ed4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2ed6:	fe 01       	movw	r30, r28
    2ed8:	ed 59       	subi	r30, 0x9D	; 157
    2eda:	ff 4f       	sbci	r31, 0xFF	; 255
    2edc:	80 81       	ld	r24, Z
    2ede:	98 2f       	mov	r25, r24
    2ee0:	91 70       	andi	r25, 0x01	; 1
    2ee2:	82 e0       	ldi	r24, 0x02	; 2
    2ee4:	64 e0       	ldi	r22, 0x04	; 4
    2ee6:	49 2f       	mov	r20, r25
    2ee8:	0e 94 0e 0b 	call	0x161c	; 0x161c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2eec:	fe 01       	movw	r30, r28
    2eee:	ed 59       	subi	r30, 0x9D	; 157
    2ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef2:	80 81       	ld	r24, Z
    2ef4:	88 2f       	mov	r24, r24
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	82 70       	andi	r24, 0x02	; 2
    2efa:	90 70       	andi	r25, 0x00	; 0
    2efc:	95 95       	asr	r25
    2efe:	87 95       	ror	r24
    2f00:	98 2f       	mov	r25, r24
    2f02:	82 e0       	ldi	r24, 0x02	; 2
    2f04:	65 e0       	ldi	r22, 0x05	; 5
    2f06:	49 2f       	mov	r20, r25
    2f08:	0e 94 0e 0b 	call	0x161c	; 0x161c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2f0c:	fe 01       	movw	r30, r28
    2f0e:	ed 59       	subi	r30, 0x9D	; 157
    2f10:	ff 4f       	sbci	r31, 0xFF	; 255
    2f12:	80 81       	ld	r24, Z
    2f14:	88 2f       	mov	r24, r24
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	84 70       	andi	r24, 0x04	; 4
    2f1a:	90 70       	andi	r25, 0x00	; 0
    2f1c:	95 95       	asr	r25
    2f1e:	87 95       	ror	r24
    2f20:	95 95       	asr	r25
    2f22:	87 95       	ror	r24
    2f24:	98 2f       	mov	r25, r24
    2f26:	82 e0       	ldi	r24, 0x02	; 2
    2f28:	66 e0       	ldi	r22, 0x06	; 6
    2f2a:	49 2f       	mov	r20, r25
    2f2c:	0e 94 0e 0b 	call	0x161c	; 0x161c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2f30:	fe 01       	movw	r30, r28
    2f32:	ed 59       	subi	r30, 0x9D	; 157
    2f34:	ff 4f       	sbci	r31, 0xFF	; 255
    2f36:	80 81       	ld	r24, Z
    2f38:	88 2f       	mov	r24, r24
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	88 70       	andi	r24, 0x08	; 8
    2f3e:	90 70       	andi	r25, 0x00	; 0
    2f40:	95 95       	asr	r25
    2f42:	87 95       	ror	r24
    2f44:	95 95       	asr	r25
    2f46:	87 95       	ror	r24
    2f48:	95 95       	asr	r25
    2f4a:	87 95       	ror	r24
    2f4c:	98 2f       	mov	r25, r24
    2f4e:	82 e0       	ldi	r24, 0x02	; 2
    2f50:	67 e0       	ldi	r22, 0x07	; 7
    2f52:	49 2f       	mov	r20, r25
    2f54:	0e 94 0e 0b 	call	0x161c	; 0x161c <GPIO_writePin>
    2f58:	80 e0       	ldi	r24, 0x00	; 0
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	a0 e8       	ldi	r26, 0x80	; 128
    2f5e:	bf e3       	ldi	r27, 0x3F	; 63
    2f60:	89 8f       	std	Y+25, r24	; 0x19
    2f62:	9a 8f       	std	Y+26, r25	; 0x1a
    2f64:	ab 8f       	std	Y+27, r26	; 0x1b
    2f66:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f68:	69 8d       	ldd	r22, Y+25	; 0x19
    2f6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f70:	20 e0       	ldi	r18, 0x00	; 0
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	4a ef       	ldi	r20, 0xFA	; 250
    2f76:	54 e4       	ldi	r21, 0x44	; 68
    2f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f7c:	dc 01       	movw	r26, r24
    2f7e:	cb 01       	movw	r24, r22
    2f80:	8d 8b       	std	Y+21, r24	; 0x15
    2f82:	9e 8b       	std	Y+22, r25	; 0x16
    2f84:	af 8b       	std	Y+23, r26	; 0x17
    2f86:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f88:	6d 89       	ldd	r22, Y+21	; 0x15
    2f8a:	7e 89       	ldd	r23, Y+22	; 0x16
    2f8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2f8e:	98 8d       	ldd	r25, Y+24	; 0x18
    2f90:	20 e0       	ldi	r18, 0x00	; 0
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	40 e8       	ldi	r20, 0x80	; 128
    2f96:	5f e3       	ldi	r21, 0x3F	; 63
    2f98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f9c:	88 23       	and	r24, r24
    2f9e:	2c f4       	brge	.+10     	; 0x2faa <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	9c 8b       	std	Y+20, r25	; 0x14
    2fa6:	8b 8b       	std	Y+19, r24	; 0x13
    2fa8:	3f c0       	rjmp	.+126    	; 0x3028 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2faa:	6d 89       	ldd	r22, Y+21	; 0x15
    2fac:	7e 89       	ldd	r23, Y+22	; 0x16
    2fae:	8f 89       	ldd	r24, Y+23	; 0x17
    2fb0:	98 8d       	ldd	r25, Y+24	; 0x18
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	3f ef       	ldi	r19, 0xFF	; 255
    2fb6:	4f e7       	ldi	r20, 0x7F	; 127
    2fb8:	57 e4       	ldi	r21, 0x47	; 71
    2fba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fbe:	18 16       	cp	r1, r24
    2fc0:	4c f5       	brge	.+82     	; 0x3014 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fc2:	69 8d       	ldd	r22, Y+25	; 0x19
    2fc4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fca:	20 e0       	ldi	r18, 0x00	; 0
    2fcc:	30 e0       	ldi	r19, 0x00	; 0
    2fce:	40 e2       	ldi	r20, 0x20	; 32
    2fd0:	51 e4       	ldi	r21, 0x41	; 65
    2fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	cb 01       	movw	r24, r22
    2fda:	bc 01       	movw	r22, r24
    2fdc:	cd 01       	movw	r24, r26
    2fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	9c 8b       	std	Y+20, r25	; 0x14
    2fe8:	8b 8b       	std	Y+19, r24	; 0x13
    2fea:	0f c0       	rjmp	.+30     	; 0x300a <LCD_displayCharacter+0x7be>
    2fec:	88 ec       	ldi	r24, 0xC8	; 200
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	9a 8b       	std	Y+18, r25	; 0x12
    2ff2:	89 8b       	std	Y+17, r24	; 0x11
    2ff4:	89 89       	ldd	r24, Y+17	; 0x11
    2ff6:	9a 89       	ldd	r25, Y+18	; 0x12
    2ff8:	01 97       	sbiw	r24, 0x01	; 1
    2ffa:	f1 f7       	brne	.-4      	; 0x2ff8 <LCD_displayCharacter+0x7ac>
    2ffc:	9a 8b       	std	Y+18, r25	; 0x12
    2ffe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3000:	8b 89       	ldd	r24, Y+19	; 0x13
    3002:	9c 89       	ldd	r25, Y+20	; 0x14
    3004:	01 97       	sbiw	r24, 0x01	; 1
    3006:	9c 8b       	std	Y+20, r25	; 0x14
    3008:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    300a:	8b 89       	ldd	r24, Y+19	; 0x13
    300c:	9c 89       	ldd	r25, Y+20	; 0x14
    300e:	00 97       	sbiw	r24, 0x00	; 0
    3010:	69 f7       	brne	.-38     	; 0x2fec <LCD_displayCharacter+0x7a0>
    3012:	14 c0       	rjmp	.+40     	; 0x303c <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3014:	6d 89       	ldd	r22, Y+21	; 0x15
    3016:	7e 89       	ldd	r23, Y+22	; 0x16
    3018:	8f 89       	ldd	r24, Y+23	; 0x17
    301a:	98 8d       	ldd	r25, Y+24	; 0x18
    301c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3020:	dc 01       	movw	r26, r24
    3022:	cb 01       	movw	r24, r22
    3024:	9c 8b       	std	Y+20, r25	; 0x14
    3026:	8b 8b       	std	Y+19, r24	; 0x13
    3028:	8b 89       	ldd	r24, Y+19	; 0x13
    302a:	9c 89       	ldd	r25, Y+20	; 0x14
    302c:	98 8b       	std	Y+16, r25	; 0x10
    302e:	8f 87       	std	Y+15, r24	; 0x0f
    3030:	8f 85       	ldd	r24, Y+15	; 0x0f
    3032:	98 89       	ldd	r25, Y+16	; 0x10
    3034:	01 97       	sbiw	r24, 0x01	; 1
    3036:	f1 f7       	brne	.-4      	; 0x3034 <LCD_displayCharacter+0x7e8>
    3038:	98 8b       	std	Y+16, r25	; 0x10
    303a:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    303c:	82 e0       	ldi	r24, 0x02	; 2
    303e:	62 e0       	ldi	r22, 0x02	; 2
    3040:	40 e0       	ldi	r20, 0x00	; 0
    3042:	0e 94 0e 0b 	call	0x161c	; 0x161c <GPIO_writePin>
    3046:	80 e0       	ldi	r24, 0x00	; 0
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	a0 e8       	ldi	r26, 0x80	; 128
    304c:	bf e3       	ldi	r27, 0x3F	; 63
    304e:	8b 87       	std	Y+11, r24	; 0x0b
    3050:	9c 87       	std	Y+12, r25	; 0x0c
    3052:	ad 87       	std	Y+13, r26	; 0x0d
    3054:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3056:	6b 85       	ldd	r22, Y+11	; 0x0b
    3058:	7c 85       	ldd	r23, Y+12	; 0x0c
    305a:	8d 85       	ldd	r24, Y+13	; 0x0d
    305c:	9e 85       	ldd	r25, Y+14	; 0x0e
    305e:	20 e0       	ldi	r18, 0x00	; 0
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	4a ef       	ldi	r20, 0xFA	; 250
    3064:	54 e4       	ldi	r21, 0x44	; 68
    3066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    306a:	dc 01       	movw	r26, r24
    306c:	cb 01       	movw	r24, r22
    306e:	8f 83       	std	Y+7, r24	; 0x07
    3070:	98 87       	std	Y+8, r25	; 0x08
    3072:	a9 87       	std	Y+9, r26	; 0x09
    3074:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3076:	6f 81       	ldd	r22, Y+7	; 0x07
    3078:	78 85       	ldd	r23, Y+8	; 0x08
    307a:	89 85       	ldd	r24, Y+9	; 0x09
    307c:	9a 85       	ldd	r25, Y+10	; 0x0a
    307e:	20 e0       	ldi	r18, 0x00	; 0
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	40 e8       	ldi	r20, 0x80	; 128
    3084:	5f e3       	ldi	r21, 0x3F	; 63
    3086:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    308a:	88 23       	and	r24, r24
    308c:	2c f4       	brge	.+10     	; 0x3098 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    308e:	81 e0       	ldi	r24, 0x01	; 1
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	9e 83       	std	Y+6, r25	; 0x06
    3094:	8d 83       	std	Y+5, r24	; 0x05
    3096:	3f c0       	rjmp	.+126    	; 0x3116 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    3098:	6f 81       	ldd	r22, Y+7	; 0x07
    309a:	78 85       	ldd	r23, Y+8	; 0x08
    309c:	89 85       	ldd	r24, Y+9	; 0x09
    309e:	9a 85       	ldd	r25, Y+10	; 0x0a
    30a0:	20 e0       	ldi	r18, 0x00	; 0
    30a2:	3f ef       	ldi	r19, 0xFF	; 255
    30a4:	4f e7       	ldi	r20, 0x7F	; 127
    30a6:	57 e4       	ldi	r21, 0x47	; 71
    30a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30ac:	18 16       	cp	r1, r24
    30ae:	4c f5       	brge	.+82     	; 0x3102 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    30b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    30b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    30b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	40 e2       	ldi	r20, 0x20	; 32
    30be:	51 e4       	ldi	r21, 0x41	; 65
    30c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c4:	dc 01       	movw	r26, r24
    30c6:	cb 01       	movw	r24, r22
    30c8:	bc 01       	movw	r22, r24
    30ca:	cd 01       	movw	r24, r26
    30cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d0:	dc 01       	movw	r26, r24
    30d2:	cb 01       	movw	r24, r22
    30d4:	9e 83       	std	Y+6, r25	; 0x06
    30d6:	8d 83       	std	Y+5, r24	; 0x05
    30d8:	0f c0       	rjmp	.+30     	; 0x30f8 <LCD_displayCharacter+0x8ac>
    30da:	88 ec       	ldi	r24, 0xC8	; 200
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	9c 83       	std	Y+4, r25	; 0x04
    30e0:	8b 83       	std	Y+3, r24	; 0x03
    30e2:	8b 81       	ldd	r24, Y+3	; 0x03
    30e4:	9c 81       	ldd	r25, Y+4	; 0x04
    30e6:	01 97       	sbiw	r24, 0x01	; 1
    30e8:	f1 f7       	brne	.-4      	; 0x30e6 <LCD_displayCharacter+0x89a>
    30ea:	9c 83       	std	Y+4, r25	; 0x04
    30ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ee:	8d 81       	ldd	r24, Y+5	; 0x05
    30f0:	9e 81       	ldd	r25, Y+6	; 0x06
    30f2:	01 97       	sbiw	r24, 0x01	; 1
    30f4:	9e 83       	std	Y+6, r25	; 0x06
    30f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30f8:	8d 81       	ldd	r24, Y+5	; 0x05
    30fa:	9e 81       	ldd	r25, Y+6	; 0x06
    30fc:	00 97       	sbiw	r24, 0x00	; 0
    30fe:	69 f7       	brne	.-38     	; 0x30da <LCD_displayCharacter+0x88e>
    3100:	14 c0       	rjmp	.+40     	; 0x312a <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3102:	6f 81       	ldd	r22, Y+7	; 0x07
    3104:	78 85       	ldd	r23, Y+8	; 0x08
    3106:	89 85       	ldd	r24, Y+9	; 0x09
    3108:	9a 85       	ldd	r25, Y+10	; 0x0a
    310a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310e:	dc 01       	movw	r26, r24
    3110:	cb 01       	movw	r24, r22
    3112:	9e 83       	std	Y+6, r25	; 0x06
    3114:	8d 83       	std	Y+5, r24	; 0x05
    3116:	8d 81       	ldd	r24, Y+5	; 0x05
    3118:	9e 81       	ldd	r25, Y+6	; 0x06
    311a:	9a 83       	std	Y+2, r25	; 0x02
    311c:	89 83       	std	Y+1, r24	; 0x01
    311e:	89 81       	ldd	r24, Y+1	; 0x01
    3120:	9a 81       	ldd	r25, Y+2	; 0x02
    3122:	01 97       	sbiw	r24, 0x01	; 1
    3124:	f1 f7       	brne	.-4      	; 0x3122 <LCD_displayCharacter+0x8d6>
    3126:	9a 83       	std	Y+2, r25	; 0x02
    3128:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    312a:	cd 59       	subi	r28, 0x9D	; 157
    312c:	df 4f       	sbci	r29, 0xFF	; 255
    312e:	0f b6       	in	r0, 0x3f	; 63
    3130:	f8 94       	cli
    3132:	de bf       	out	0x3e, r29	; 62
    3134:	0f be       	out	0x3f, r0	; 63
    3136:	cd bf       	out	0x3d, r28	; 61
    3138:	cf 91       	pop	r28
    313a:	df 91       	pop	r29
    313c:	1f 91       	pop	r17
    313e:	0f 91       	pop	r16
    3140:	08 95       	ret

00003142 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3142:	df 93       	push	r29
    3144:	cf 93       	push	r28
    3146:	00 d0       	rcall	.+0      	; 0x3148 <LCD_displayString+0x6>
    3148:	0f 92       	push	r0
    314a:	cd b7       	in	r28, 0x3d	; 61
    314c:	de b7       	in	r29, 0x3e	; 62
    314e:	9b 83       	std	Y+3, r25	; 0x03
    3150:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3152:	19 82       	std	Y+1, r1	; 0x01
    3154:	0e c0       	rjmp	.+28     	; 0x3172 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3156:	89 81       	ldd	r24, Y+1	; 0x01
    3158:	28 2f       	mov	r18, r24
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	8a 81       	ldd	r24, Y+2	; 0x02
    315e:	9b 81       	ldd	r25, Y+3	; 0x03
    3160:	fc 01       	movw	r30, r24
    3162:	e2 0f       	add	r30, r18
    3164:	f3 1f       	adc	r31, r19
    3166:	80 81       	ld	r24, Z
    3168:	0e 94 26 14 	call	0x284c	; 0x284c <LCD_displayCharacter>
		i++;
    316c:	89 81       	ldd	r24, Y+1	; 0x01
    316e:	8f 5f       	subi	r24, 0xFF	; 255
    3170:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3172:	89 81       	ldd	r24, Y+1	; 0x01
    3174:	28 2f       	mov	r18, r24
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	8a 81       	ldd	r24, Y+2	; 0x02
    317a:	9b 81       	ldd	r25, Y+3	; 0x03
    317c:	fc 01       	movw	r30, r24
    317e:	e2 0f       	add	r30, r18
    3180:	f3 1f       	adc	r31, r19
    3182:	80 81       	ld	r24, Z
    3184:	88 23       	and	r24, r24
    3186:	39 f7       	brne	.-50     	; 0x3156 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3188:	0f 90       	pop	r0
    318a:	0f 90       	pop	r0
    318c:	0f 90       	pop	r0
    318e:	cf 91       	pop	r28
    3190:	df 91       	pop	r29
    3192:	08 95       	ret

00003194 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3194:	df 93       	push	r29
    3196:	cf 93       	push	r28
    3198:	00 d0       	rcall	.+0      	; 0x319a <LCD_moveCursor+0x6>
    319a:	00 d0       	rcall	.+0      	; 0x319c <LCD_moveCursor+0x8>
    319c:	0f 92       	push	r0
    319e:	cd b7       	in	r28, 0x3d	; 61
    31a0:	de b7       	in	r29, 0x3e	; 62
    31a2:	8a 83       	std	Y+2, r24	; 0x02
    31a4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    31a6:	8a 81       	ldd	r24, Y+2	; 0x02
    31a8:	28 2f       	mov	r18, r24
    31aa:	30 e0       	ldi	r19, 0x00	; 0
    31ac:	3d 83       	std	Y+5, r19	; 0x05
    31ae:	2c 83       	std	Y+4, r18	; 0x04
    31b0:	8c 81       	ldd	r24, Y+4	; 0x04
    31b2:	9d 81       	ldd	r25, Y+5	; 0x05
    31b4:	81 30       	cpi	r24, 0x01	; 1
    31b6:	91 05       	cpc	r25, r1
    31b8:	c1 f0       	breq	.+48     	; 0x31ea <LCD_moveCursor+0x56>
    31ba:	2c 81       	ldd	r18, Y+4	; 0x04
    31bc:	3d 81       	ldd	r19, Y+5	; 0x05
    31be:	22 30       	cpi	r18, 0x02	; 2
    31c0:	31 05       	cpc	r19, r1
    31c2:	2c f4       	brge	.+10     	; 0x31ce <LCD_moveCursor+0x3a>
    31c4:	8c 81       	ldd	r24, Y+4	; 0x04
    31c6:	9d 81       	ldd	r25, Y+5	; 0x05
    31c8:	00 97       	sbiw	r24, 0x00	; 0
    31ca:	61 f0       	breq	.+24     	; 0x31e4 <LCD_moveCursor+0x50>
    31cc:	19 c0       	rjmp	.+50     	; 0x3200 <LCD_moveCursor+0x6c>
    31ce:	2c 81       	ldd	r18, Y+4	; 0x04
    31d0:	3d 81       	ldd	r19, Y+5	; 0x05
    31d2:	22 30       	cpi	r18, 0x02	; 2
    31d4:	31 05       	cpc	r19, r1
    31d6:	69 f0       	breq	.+26     	; 0x31f2 <LCD_moveCursor+0x5e>
    31d8:	8c 81       	ldd	r24, Y+4	; 0x04
    31da:	9d 81       	ldd	r25, Y+5	; 0x05
    31dc:	83 30       	cpi	r24, 0x03	; 3
    31de:	91 05       	cpc	r25, r1
    31e0:	61 f0       	breq	.+24     	; 0x31fa <LCD_moveCursor+0x66>
    31e2:	0e c0       	rjmp	.+28     	; 0x3200 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    31e4:	8b 81       	ldd	r24, Y+3	; 0x03
    31e6:	89 83       	std	Y+1, r24	; 0x01
    31e8:	0b c0       	rjmp	.+22     	; 0x3200 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    31ea:	8b 81       	ldd	r24, Y+3	; 0x03
    31ec:	80 5c       	subi	r24, 0xC0	; 192
    31ee:	89 83       	std	Y+1, r24	; 0x01
    31f0:	07 c0       	rjmp	.+14     	; 0x3200 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    31f2:	8b 81       	ldd	r24, Y+3	; 0x03
    31f4:	80 5f       	subi	r24, 0xF0	; 240
    31f6:	89 83       	std	Y+1, r24	; 0x01
    31f8:	03 c0       	rjmp	.+6      	; 0x3200 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    31fa:	8b 81       	ldd	r24, Y+3	; 0x03
    31fc:	80 5b       	subi	r24, 0xB0	; 176
    31fe:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3200:	89 81       	ldd	r24, Y+1	; 0x01
    3202:	80 68       	ori	r24, 0x80	; 128
    3204:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_sendCommand>
}
    3208:	0f 90       	pop	r0
    320a:	0f 90       	pop	r0
    320c:	0f 90       	pop	r0
    320e:	0f 90       	pop	r0
    3210:	0f 90       	pop	r0
    3212:	cf 91       	pop	r28
    3214:	df 91       	pop	r29
    3216:	08 95       	ret

00003218 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3218:	df 93       	push	r29
    321a:	cf 93       	push	r28
    321c:	00 d0       	rcall	.+0      	; 0x321e <LCD_displayStringRowColumn+0x6>
    321e:	00 d0       	rcall	.+0      	; 0x3220 <LCD_displayStringRowColumn+0x8>
    3220:	cd b7       	in	r28, 0x3d	; 61
    3222:	de b7       	in	r29, 0x3e	; 62
    3224:	89 83       	std	Y+1, r24	; 0x01
    3226:	6a 83       	std	Y+2, r22	; 0x02
    3228:	5c 83       	std	Y+4, r21	; 0x04
    322a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    322c:	89 81       	ldd	r24, Y+1	; 0x01
    322e:	6a 81       	ldd	r22, Y+2	; 0x02
    3230:	0e 94 ca 18 	call	0x3194	; 0x3194 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3234:	8b 81       	ldd	r24, Y+3	; 0x03
    3236:	9c 81       	ldd	r25, Y+4	; 0x04
    3238:	0e 94 a1 18 	call	0x3142	; 0x3142 <LCD_displayString>
}
    323c:	0f 90       	pop	r0
    323e:	0f 90       	pop	r0
    3240:	0f 90       	pop	r0
    3242:	0f 90       	pop	r0
    3244:	cf 91       	pop	r28
    3246:	df 91       	pop	r29
    3248:	08 95       	ret

0000324a <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    324a:	df 93       	push	r29
    324c:	cf 93       	push	r28
    324e:	cd b7       	in	r28, 0x3d	; 61
    3250:	de b7       	in	r29, 0x3e	; 62
    3252:	62 97       	sbiw	r28, 0x12	; 18
    3254:	0f b6       	in	r0, 0x3f	; 63
    3256:	f8 94       	cli
    3258:	de bf       	out	0x3e, r29	; 62
    325a:	0f be       	out	0x3f, r0	; 63
    325c:	cd bf       	out	0x3d, r28	; 61
    325e:	9a 8b       	std	Y+18, r25	; 0x12
    3260:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3262:	89 89       	ldd	r24, Y+17	; 0x11
    3264:	9a 89       	ldd	r25, Y+18	; 0x12
    3266:	9e 01       	movw	r18, r28
    3268:	2f 5f       	subi	r18, 0xFF	; 255
    326a:	3f 4f       	sbci	r19, 0xFF	; 255
    326c:	b9 01       	movw	r22, r18
    326e:	4a e0       	ldi	r20, 0x0A	; 10
    3270:	50 e0       	ldi	r21, 0x00	; 0
    3272:	0e 94 88 1b 	call	0x3710	; 0x3710 <itoa>
   LCD_displayString(buff); /* Display the string */
    3276:	ce 01       	movw	r24, r28
    3278:	01 96       	adiw	r24, 0x01	; 1
    327a:	0e 94 a1 18 	call	0x3142	; 0x3142 <LCD_displayString>
}
    327e:	62 96       	adiw	r28, 0x12	; 18
    3280:	0f b6       	in	r0, 0x3f	; 63
    3282:	f8 94       	cli
    3284:	de bf       	out	0x3e, r29	; 62
    3286:	0f be       	out	0x3f, r0	; 63
    3288:	cd bf       	out	0x3d, r28	; 61
    328a:	cf 91       	pop	r28
    328c:	df 91       	pop	r29
    328e:	08 95       	ret

00003290 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3290:	df 93       	push	r29
    3292:	cf 93       	push	r28
    3294:	cd b7       	in	r28, 0x3d	; 61
    3296:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3298:	81 e0       	ldi	r24, 0x01	; 1
    329a:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_sendCommand>
}
    329e:	cf 91       	pop	r28
    32a0:	df 91       	pop	r29
    32a2:	08 95       	ret

000032a4 <Start_LCD_TIMER1>:


/***************************************FOR LCD tIMER***********************************/
void Start_LCD_TIMER1(void){
    32a4:	df 93       	push	r29
    32a6:	cf 93       	push	r28
    32a8:	cd b7       	in	r28, 0x3d	; 61
    32aa:	de b7       	in	r29, 0x3e	; 62
	/************Initialize TIMER1*******************/
	timer1config.initial_value = 0;
    32ac:	10 92 de 00 	sts	0x00DE, r1
    32b0:	10 92 dd 00 	sts	0x00DD, r1
			timer1config.compare_value =7812;
    32b4:	84 e8       	ldi	r24, 0x84	; 132
    32b6:	9e e1       	ldi	r25, 0x1E	; 30
    32b8:	90 93 e0 00 	sts	0x00E0, r25
    32bc:	80 93 df 00 	sts	0x00DF, r24
			timer1config.prescaler = PRESCALER__1024;
    32c0:	85 e0       	ldi	r24, 0x05	; 5
    32c2:	80 93 e1 00 	sts	0x00E1, r24
			timer1config.mode = CTC_TOP_OCR1A;
    32c6:	84 e0       	ldi	r24, 0x04	; 4
    32c8:	80 93 e2 00 	sts	0x00E2, r24
			Timer1_init(&timer1config);
    32cc:	8d ed       	ldi	r24, 0xDD	; 221
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	0e 94 a5 09 	call	0x134a	; 0x134a <Timer1_init>
			timer1_is_init++;
    32d4:	80 91 e3 00 	lds	r24, 0x00E3
    32d8:	8f 5f       	subi	r24, 0xFF	; 255
    32da:	80 93 e3 00 	sts	0x00E3, r24
		Timer1_setCallBack(&LCD_timer_finished);
    32de:	86 e7       	ldi	r24, 0x76	; 118
    32e0:	99 e1       	ldi	r25, 0x19	; 25
    32e2:	0e 94 11 0a 	call	0x1422	; 0x1422 <Timer1_setCallBack>
}
    32e6:	cf 91       	pop	r28
    32e8:	df 91       	pop	r29
    32ea:	08 95       	ret

000032ec <LCD_timer_finished>:

void LCD_timer_finished(void){
    32ec:	df 93       	push	r29
    32ee:	cf 93       	push	r28
    32f0:	cd b7       	in	r28, 0x3d	; 61
    32f2:	de b7       	in	r29, 0x3e	; 62
    32f4:	2e 97       	sbiw	r28, 0x0e	; 14
    32f6:	0f b6       	in	r0, 0x3f	; 63
    32f8:	f8 94       	cli
    32fa:	de bf       	out	0x3e, r29	; 62
    32fc:	0f be       	out	0x3f, r0	; 63
    32fe:	cd bf       	out	0x3d, r28	; 61
	if(lcd_closing_door==1){//door closed
    3300:	80 91 ef 00 	lds	r24, 0x00EF
    3304:	81 30       	cpi	r24, 0x01	; 1
    3306:	19 f4       	brne	.+6      	; 0x330e <LCD_timer_finished+0x22>
		LCD_clearScreen();
    3308:	0e 94 48 19 	call	0x3290	; 0x3290 <LCD_clearScreen>
    330c:	7f c0       	rjmp	.+254    	; 0x340c <LCD_timer_finished+0x120>
	}
	else{
	LCD_clearScreen();
    330e:	0e 94 48 19 	call	0x3290	; 0x3290 <LCD_clearScreen>
    3312:	80 e0       	ldi	r24, 0x00	; 0
    3314:	90 e8       	ldi	r25, 0x80	; 128
    3316:	ab e3       	ldi	r26, 0x3B	; 59
    3318:	b5 e4       	ldi	r27, 0x45	; 69
    331a:	8b 87       	std	Y+11, r24	; 0x0b
    331c:	9c 87       	std	Y+12, r25	; 0x0c
    331e:	ad 87       	std	Y+13, r26	; 0x0d
    3320:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3322:	6b 85       	ldd	r22, Y+11	; 0x0b
    3324:	7c 85       	ldd	r23, Y+12	; 0x0c
    3326:	8d 85       	ldd	r24, Y+13	; 0x0d
    3328:	9e 85       	ldd	r25, Y+14	; 0x0e
    332a:	20 e0       	ldi	r18, 0x00	; 0
    332c:	30 e0       	ldi	r19, 0x00	; 0
    332e:	4a ef       	ldi	r20, 0xFA	; 250
    3330:	54 e4       	ldi	r21, 0x44	; 68
    3332:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3336:	dc 01       	movw	r26, r24
    3338:	cb 01       	movw	r24, r22
    333a:	8f 83       	std	Y+7, r24	; 0x07
    333c:	98 87       	std	Y+8, r25	; 0x08
    333e:	a9 87       	std	Y+9, r26	; 0x09
    3340:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3342:	6f 81       	ldd	r22, Y+7	; 0x07
    3344:	78 85       	ldd	r23, Y+8	; 0x08
    3346:	89 85       	ldd	r24, Y+9	; 0x09
    3348:	9a 85       	ldd	r25, Y+10	; 0x0a
    334a:	20 e0       	ldi	r18, 0x00	; 0
    334c:	30 e0       	ldi	r19, 0x00	; 0
    334e:	40 e8       	ldi	r20, 0x80	; 128
    3350:	5f e3       	ldi	r21, 0x3F	; 63
    3352:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3356:	88 23       	and	r24, r24
    3358:	2c f4       	brge	.+10     	; 0x3364 <LCD_timer_finished+0x78>
		__ticks = 1;
    335a:	81 e0       	ldi	r24, 0x01	; 1
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	9e 83       	std	Y+6, r25	; 0x06
    3360:	8d 83       	std	Y+5, r24	; 0x05
    3362:	3f c0       	rjmp	.+126    	; 0x33e2 <LCD_timer_finished+0xf6>
	else if (__tmp > 65535)
    3364:	6f 81       	ldd	r22, Y+7	; 0x07
    3366:	78 85       	ldd	r23, Y+8	; 0x08
    3368:	89 85       	ldd	r24, Y+9	; 0x09
    336a:	9a 85       	ldd	r25, Y+10	; 0x0a
    336c:	20 e0       	ldi	r18, 0x00	; 0
    336e:	3f ef       	ldi	r19, 0xFF	; 255
    3370:	4f e7       	ldi	r20, 0x7F	; 127
    3372:	57 e4       	ldi	r21, 0x47	; 71
    3374:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3378:	18 16       	cp	r1, r24
    337a:	4c f5       	brge	.+82     	; 0x33ce <LCD_timer_finished+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    337c:	6b 85       	ldd	r22, Y+11	; 0x0b
    337e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3380:	8d 85       	ldd	r24, Y+13	; 0x0d
    3382:	9e 85       	ldd	r25, Y+14	; 0x0e
    3384:	20 e0       	ldi	r18, 0x00	; 0
    3386:	30 e0       	ldi	r19, 0x00	; 0
    3388:	40 e2       	ldi	r20, 0x20	; 32
    338a:	51 e4       	ldi	r21, 0x41	; 65
    338c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3390:	dc 01       	movw	r26, r24
    3392:	cb 01       	movw	r24, r22
    3394:	bc 01       	movw	r22, r24
    3396:	cd 01       	movw	r24, r26
    3398:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    339c:	dc 01       	movw	r26, r24
    339e:	cb 01       	movw	r24, r22
    33a0:	9e 83       	std	Y+6, r25	; 0x06
    33a2:	8d 83       	std	Y+5, r24	; 0x05
    33a4:	0f c0       	rjmp	.+30     	; 0x33c4 <LCD_timer_finished+0xd8>
    33a6:	88 ec       	ldi	r24, 0xC8	; 200
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	9c 83       	std	Y+4, r25	; 0x04
    33ac:	8b 83       	std	Y+3, r24	; 0x03
    33ae:	8b 81       	ldd	r24, Y+3	; 0x03
    33b0:	9c 81       	ldd	r25, Y+4	; 0x04
    33b2:	01 97       	sbiw	r24, 0x01	; 1
    33b4:	f1 f7       	brne	.-4      	; 0x33b2 <LCD_timer_finished+0xc6>
    33b6:	9c 83       	std	Y+4, r25	; 0x04
    33b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ba:	8d 81       	ldd	r24, Y+5	; 0x05
    33bc:	9e 81       	ldd	r25, Y+6	; 0x06
    33be:	01 97       	sbiw	r24, 0x01	; 1
    33c0:	9e 83       	std	Y+6, r25	; 0x06
    33c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33c4:	8d 81       	ldd	r24, Y+5	; 0x05
    33c6:	9e 81       	ldd	r25, Y+6	; 0x06
    33c8:	00 97       	sbiw	r24, 0x00	; 0
    33ca:	69 f7       	brne	.-38     	; 0x33a6 <LCD_timer_finished+0xba>
    33cc:	14 c0       	rjmp	.+40     	; 0x33f6 <LCD_timer_finished+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ce:	6f 81       	ldd	r22, Y+7	; 0x07
    33d0:	78 85       	ldd	r23, Y+8	; 0x08
    33d2:	89 85       	ldd	r24, Y+9	; 0x09
    33d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    33d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33da:	dc 01       	movw	r26, r24
    33dc:	cb 01       	movw	r24, r22
    33de:	9e 83       	std	Y+6, r25	; 0x06
    33e0:	8d 83       	std	Y+5, r24	; 0x05
    33e2:	8d 81       	ldd	r24, Y+5	; 0x05
    33e4:	9e 81       	ldd	r25, Y+6	; 0x06
    33e6:	9a 83       	std	Y+2, r25	; 0x02
    33e8:	89 83       	std	Y+1, r24	; 0x01
    33ea:	89 81       	ldd	r24, Y+1	; 0x01
    33ec:	9a 81       	ldd	r25, Y+2	; 0x02
    33ee:	01 97       	sbiw	r24, 0x01	; 1
    33f0:	f1 f7       	brne	.-4      	; 0x33ee <LCD_timer_finished+0x102>
    33f2:	9a 83       	std	Y+2, r25	; 0x02
    33f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3000);//hold the motor f0r 3 seconds
	 LCD_moveCursor(0,0);
    33f6:	80 e0       	ldi	r24, 0x00	; 0
    33f8:	60 e0       	ldi	r22, 0x00	; 0
    33fa:	0e 94 ca 18 	call	0x3194	; 0x3194 <LCD_moveCursor>
	LCD_displayString("Door is Locking");
    33fe:	81 ec       	ldi	r24, 0xC1	; 193
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	0e 94 a1 18 	call	0x3142	; 0x3142 <LCD_displayString>
	lcd_closing_door=1;
    3406:	81 e0       	ldi	r24, 0x01	; 1
    3408:	80 93 ef 00 	sts	0x00EF, r24
	}

}
    340c:	2e 96       	adiw	r28, 0x0e	; 14
    340e:	0f b6       	in	r0, 0x3f	; 63
    3410:	f8 94       	cli
    3412:	de bf       	out	0x3e, r29	; 62
    3414:	0f be       	out	0x3f, r0	; 63
    3416:	cd bf       	out	0x3d, r28	; 61
    3418:	cf 91       	pop	r28
    341a:	df 91       	pop	r29
    341c:	08 95       	ret

0000341e <UART_init>:

#include"uart_mine.h"
#include"Common_Macros.h"
#include "avr/io.h" /* To use the UART Registers */

void UART_init(const UART_ConfigType *Config_Ptr){
    341e:	df 93       	push	r29
    3420:	cf 93       	push	r28
    3422:	00 d0       	rcall	.+0      	; 0x3424 <UART_init+0x6>
    3424:	00 d0       	rcall	.+0      	; 0x3426 <UART_init+0x8>
    3426:	00 d0       	rcall	.+0      	; 0x3428 <UART_init+0xa>
    3428:	cd b7       	in	r28, 0x3d	; 61
    342a:	de b7       	in	r29, 0x3e	; 62
    342c:	9e 83       	std	Y+6, r25	; 0x06
    342e:	8d 83       	std	Y+5, r24	; 0x05

	uint16 ubrr_value = 0;/*UBRR RGISTER INTIAL VALUE*/
    3430:	1c 82       	std	Y+4, r1	; 0x04
    3432:	1b 82       	std	Y+3, r1	; 0x03
	uint16 baud_rate_value=0;
    3434:	1a 82       	std	Y+2, r1	; 0x02
    3436:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	SET_BIT(UCSRA,U2X);
    3438:	ab e2       	ldi	r26, 0x2B	; 43
    343a:	b0 e0       	ldi	r27, 0x00	; 0
    343c:	eb e2       	ldi	r30, 0x2B	; 43
    343e:	f0 e0       	ldi	r31, 0x00	; 0
    3440:	80 81       	ld	r24, Z
    3442:	82 60       	ori	r24, 0x02	; 2
    3444:	8c 93       	st	X, r24
		 * RXEN  = 1 Receiver Enable
		 * RXEN  = 1 Transmitter Enable
		 * UCSZ2 = 0 For 8-bit data mode
		 * RXB8 & TXB8 not used for 8-bit data mode
		 ***********************************************************************/
	SET_BIT(UCSRB,RXEN);
    3446:	aa e2       	ldi	r26, 0x2A	; 42
    3448:	b0 e0       	ldi	r27, 0x00	; 0
    344a:	ea e2       	ldi	r30, 0x2A	; 42
    344c:	f0 e0       	ldi	r31, 0x00	; 0
    344e:	80 81       	ld	r24, Z
    3450:	80 61       	ori	r24, 0x10	; 16
    3452:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
    3454:	aa e2       	ldi	r26, 0x2A	; 42
    3456:	b0 e0       	ldi	r27, 0x00	; 0
    3458:	ea e2       	ldi	r30, 0x2A	; 42
    345a:	f0 e0       	ldi	r31, 0x00	; 0
    345c:	80 81       	ld	r24, Z
    345e:	88 60       	ori	r24, 0x08	; 8
    3460:	8c 93       	st	X, r24
		 * UPM1:0  = 00 Disable parity bit
		 * USBS    = 0 One stop bit
		 * UCSZ1:0 = 11 For 8-bit data mode
		 * UCPOL   = 0 Used with the Synchronous operation only
		 ***********************************************************************/
	SET_BIT(UCSRC,URSEL);/*The URSEL must be one when writing the UCSRC*/
    3462:	a0 e4       	ldi	r26, 0x40	; 64
    3464:	b0 e0       	ldi	r27, 0x00	; 0
    3466:	e0 e4       	ldi	r30, 0x40	; 64
    3468:	f0 e0       	ldi	r31, 0x00	; 0
    346a:	80 81       	ld	r24, Z
    346c:	80 68       	ori	r24, 0x80	; 128
    346e:	8c 93       	st	X, r24
CLEAR_BIT(UCSRC,UMSEL);//for Asynchronous Operation
    3470:	a0 e4       	ldi	r26, 0x40	; 64
    3472:	b0 e0       	ldi	r27, 0x00	; 0
    3474:	e0 e4       	ldi	r30, 0x40	; 64
    3476:	f0 e0       	ldi	r31, 0x00	; 0
    3478:	80 81       	ld	r24, Z
    347a:	8f 7b       	andi	r24, 0xBF	; 191
    347c:	8c 93       	st	X, r24
/*Character size(bite mode)(bite size)*/
UCSRC=(UCSRC|0xF9)|((Config_Ptr->bit_data) &0x9F);
    347e:	a0 e4       	ldi	r26, 0x40	; 64
    3480:	b0 e0       	ldi	r27, 0x00	; 0
    3482:	e0 e4       	ldi	r30, 0x40	; 64
    3484:	f0 e0       	ldi	r31, 0x00	; 0
    3486:	80 81       	ld	r24, Z
    3488:	89 6f       	ori	r24, 0xF9	; 249
    348a:	98 2f       	mov	r25, r24
    348c:	ed 81       	ldd	r30, Y+5	; 0x05
    348e:	fe 81       	ldd	r31, Y+6	; 0x06
    3490:	80 81       	ld	r24, Z
    3492:	8f 79       	andi	r24, 0x9F	; 159
    3494:	89 2b       	or	r24, r25
    3496:	8c 93       	st	X, r24
/*parity*/
UCSRC=(UCSRC|0xCF)|((Config_Ptr->parity) &0xFC);
    3498:	a0 e4       	ldi	r26, 0x40	; 64
    349a:	b0 e0       	ldi	r27, 0x00	; 0
    349c:	e0 e4       	ldi	r30, 0x40	; 64
    349e:	f0 e0       	ldi	r31, 0x00	; 0
    34a0:	80 81       	ld	r24, Z
    34a2:	8f 6c       	ori	r24, 0xCF	; 207
    34a4:	98 2f       	mov	r25, r24
    34a6:	ed 81       	ldd	r30, Y+5	; 0x05
    34a8:	fe 81       	ldd	r31, Y+6	; 0x06
    34aa:	81 81       	ldd	r24, Z+1	; 0x01
    34ac:	8c 7f       	andi	r24, 0xFC	; 252
    34ae:	89 2b       	or	r24, r25
    34b0:	8c 93       	st	X, r24
/*stop bit*/
UCSRC=(UCSRC|0xF7)|((Config_Ptr->stop_bit) &0x7F);
    34b2:	a0 e4       	ldi	r26, 0x40	; 64
    34b4:	b0 e0       	ldi	r27, 0x00	; 0
    34b6:	e0 e4       	ldi	r30, 0x40	; 64
    34b8:	f0 e0       	ldi	r31, 0x00	; 0
    34ba:	80 81       	ld	r24, Z
    34bc:	87 6f       	ori	r24, 0xF7	; 247
    34be:	98 2f       	mov	r25, r24
    34c0:	ed 81       	ldd	r30, Y+5	; 0x05
    34c2:	fe 81       	ldd	r31, Y+6	; 0x06
    34c4:	82 81       	ldd	r24, Z+2	; 0x02
    34c6:	8f 77       	andi	r24, 0x7F	; 127
    34c8:	89 2b       	or	r24, r25
    34ca:	8c 93       	st	X, r24
CLEAR_BIT(UCSRC,UMSEL);//for Asynchronous Operation
    34cc:	a0 e4       	ldi	r26, 0x40	; 64
    34ce:	b0 e0       	ldi	r27, 0x00	; 0
    34d0:	e0 e4       	ldi	r30, 0x40	; 64
    34d2:	f0 e0       	ldi	r31, 0x00	; 0
    34d4:	80 81       	ld	r24, Z
    34d6:	8f 7b       	andi	r24, 0xBF	; 191
    34d8:	8c 93       	st	X, r24
SET_BIT(UCSRB,UCSZ2);
SET_BIT(UCSRC,UCSZ1);
SET_BIT(UCSRC,UCSZ0);
#endif

	baud_rate_value=Config_Ptr->baud_rate;
    34da:	ed 81       	ldd	r30, Y+5	; 0x05
    34dc:	fe 81       	ldd	r31, Y+6	; 0x06
    34de:	83 81       	ldd	r24, Z+3	; 0x03
    34e0:	94 81       	ldd	r25, Z+4	; 0x04
    34e2:	a5 81       	ldd	r26, Z+5	; 0x05
    34e4:	b6 81       	ldd	r27, Z+6	; 0x06
    34e6:	9a 83       	std	Y+2, r25	; 0x02
    34e8:	89 83       	std	Y+1, r24	; 0x01
	/* Calculate the UBRR register value */
	ubrr_value= (uint16)(((F_CPU / (baud_rate_value * 8UL))) - 1);
    34ea:	89 81       	ldd	r24, Y+1	; 0x01
    34ec:	9a 81       	ldd	r25, Y+2	; 0x02
    34ee:	cc 01       	movw	r24, r24
    34f0:	a0 e0       	ldi	r26, 0x00	; 0
    34f2:	b0 e0       	ldi	r27, 0x00	; 0
    34f4:	88 0f       	add	r24, r24
    34f6:	99 1f       	adc	r25, r25
    34f8:	aa 1f       	adc	r26, r26
    34fa:	bb 1f       	adc	r27, r27
    34fc:	88 0f       	add	r24, r24
    34fe:	99 1f       	adc	r25, r25
    3500:	aa 1f       	adc	r26, r26
    3502:	bb 1f       	adc	r27, r27
    3504:	88 0f       	add	r24, r24
    3506:	99 1f       	adc	r25, r25
    3508:	aa 1f       	adc	r26, r26
    350a:	bb 1f       	adc	r27, r27
    350c:	9c 01       	movw	r18, r24
    350e:	ad 01       	movw	r20, r26
    3510:	80 e0       	ldi	r24, 0x00	; 0
    3512:	92 e1       	ldi	r25, 0x12	; 18
    3514:	aa e7       	ldi	r26, 0x7A	; 122
    3516:	b0 e0       	ldi	r27, 0x00	; 0
    3518:	bc 01       	movw	r22, r24
    351a:	cd 01       	movw	r24, r26
    351c:	0e 94 2f 1b 	call	0x365e	; 0x365e <__udivmodsi4>
    3520:	da 01       	movw	r26, r20
    3522:	c9 01       	movw	r24, r18
    3524:	01 97       	sbiw	r24, 0x01	; 1
    3526:	9c 83       	std	Y+4, r25	; 0x04
    3528:	8b 83       	std	Y+3, r24	; 0x03
		 *  By specifying 8UL, the code ensures that the division operation (F_CPU / (baud_rate * 8UL)) is performed with enough precision to accurately calculate the required baud rate divisor.*/
	//(uint16): This casts the result to a 16-bit unsigned integer type. This is likely because the UBRR (USART Baud Rate Register) is typically a 16-bit register.


	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    352a:	e0 e4       	ldi	r30, 0x40	; 64
    352c:	f0 e0       	ldi	r31, 0x00	; 0
    352e:	8b 81       	ldd	r24, Y+3	; 0x03
    3530:	9c 81       	ldd	r25, Y+4	; 0x04
    3532:	89 2f       	mov	r24, r25
    3534:	99 27       	eor	r25, r25
    3536:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3538:	e9 e2       	ldi	r30, 0x29	; 41
    353a:	f0 e0       	ldi	r31, 0x00	; 0
    353c:	8b 81       	ldd	r24, Y+3	; 0x03
    353e:	80 83       	st	Z, r24
}
    3540:	26 96       	adiw	r28, 0x06	; 6
    3542:	0f b6       	in	r0, 0x3f	; 63
    3544:	f8 94       	cli
    3546:	de bf       	out	0x3e, r29	; 62
    3548:	0f be       	out	0x3f, r0	; 63
    354a:	cd bf       	out	0x3d, r28	; 61
    354c:	cf 91       	pop	r28
    354e:	df 91       	pop	r29
    3550:	08 95       	ret

00003552 <UART_sendByte>:


void UART_sendByte(const uint8 data){
    3552:	df 93       	push	r29
    3554:	cf 93       	push	r28
    3556:	0f 92       	push	r0
    3558:	cd b7       	in	r28, 0x3d	; 61
    355a:	de b7       	in	r29, 0x3e	; 62
    355c:	89 83       	std	Y+1, r24	; 0x01
	/*
		 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
		 * transmitting a new byte so wait until this flag is set to one
		 */
		while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    355e:	eb e2       	ldi	r30, 0x2B	; 43
    3560:	f0 e0       	ldi	r31, 0x00	; 0
    3562:	80 81       	ld	r24, Z
    3564:	88 2f       	mov	r24, r24
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	80 72       	andi	r24, 0x20	; 32
    356a:	90 70       	andi	r25, 0x00	; 0
    356c:	00 97       	sbiw	r24, 0x00	; 0
    356e:	b9 f3       	breq	.-18     	; 0x355e <UART_sendByte+0xc>

		/*
		 * Put the required data in the UDR register and it also clear the UDRE flag as
		 * the UDR register is not empty now
		 */
		UDR = data;
    3570:	ec e2       	ldi	r30, 0x2C	; 44
    3572:	f0 e0       	ldi	r31, 0x00	; 0
    3574:	89 81       	ldd	r24, Y+1	; 0x01
    3576:	80 83       	st	Z, r24
}
    3578:	0f 90       	pop	r0
    357a:	cf 91       	pop	r28
    357c:	df 91       	pop	r29
    357e:	08 95       	ret

00003580 <UART_recieveByte>:
uint8 UART_recieveByte(void){
    3580:	df 93       	push	r29
    3582:	cf 93       	push	r28
    3584:	cd b7       	in	r28, 0x3d	; 61
    3586:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
		while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3588:	eb e2       	ldi	r30, 0x2B	; 43
    358a:	f0 e0       	ldi	r31, 0x00	; 0
    358c:	80 81       	ld	r24, Z
    358e:	88 23       	and	r24, r24
    3590:	dc f7       	brge	.-10     	; 0x3588 <UART_recieveByte+0x8>

		/*
		 * Read the received data from the Rx buffer (UDR)
		 * The RXC flag will be cleared after read the data
		 */
	    return UDR;
    3592:	ec e2       	ldi	r30, 0x2C	; 44
    3594:	f0 e0       	ldi	r31, 0x00	; 0
    3596:	80 81       	ld	r24, Z
}
    3598:	cf 91       	pop	r28
    359a:	df 91       	pop	r29
    359c:	08 95       	ret

0000359e <UART_sendString>:
void UART_sendString(const uint8 *Str)
{
    359e:	df 93       	push	r29
    35a0:	cf 93       	push	r28
    35a2:	00 d0       	rcall	.+0      	; 0x35a4 <UART_sendString+0x6>
    35a4:	0f 92       	push	r0
    35a6:	cd b7       	in	r28, 0x3d	; 61
    35a8:	de b7       	in	r29, 0x3e	; 62
    35aa:	9b 83       	std	Y+3, r25	; 0x03
    35ac:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    35ae:	19 82       	std	Y+1, r1	; 0x01
    35b0:	0e c0       	rjmp	.+28     	; 0x35ce <UART_sendString+0x30>

		/* Send the whole string */
		while(Str[i] != '\0')
		{
			UART_sendByte(Str[i]);
    35b2:	89 81       	ldd	r24, Y+1	; 0x01
    35b4:	28 2f       	mov	r18, r24
    35b6:	30 e0       	ldi	r19, 0x00	; 0
    35b8:	8a 81       	ldd	r24, Y+2	; 0x02
    35ba:	9b 81       	ldd	r25, Y+3	; 0x03
    35bc:	fc 01       	movw	r30, r24
    35be:	e2 0f       	add	r30, r18
    35c0:	f3 1f       	adc	r31, r19
    35c2:	80 81       	ld	r24, Z
    35c4:	0e 94 a9 1a 	call	0x3552	; 0x3552 <UART_sendByte>
			i++;
    35c8:	89 81       	ldd	r24, Y+1	; 0x01
    35ca:	8f 5f       	subi	r24, 0xFF	; 255
    35cc:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

		/* Send the whole string */
		while(Str[i] != '\0')
    35ce:	89 81       	ldd	r24, Y+1	; 0x01
    35d0:	28 2f       	mov	r18, r24
    35d2:	30 e0       	ldi	r19, 0x00	; 0
    35d4:	8a 81       	ldd	r24, Y+2	; 0x02
    35d6:	9b 81       	ldd	r25, Y+3	; 0x03
    35d8:	fc 01       	movw	r30, r24
    35da:	e2 0f       	add	r30, r18
    35dc:	f3 1f       	adc	r31, r19
    35de:	80 81       	ld	r24, Z
    35e0:	88 23       	and	r24, r24
    35e2:	39 f7       	brne	.-50     	; 0x35b2 <UART_sendString+0x14>
		{
			UART_sendByte(Str[i]);
			i++;
		}
	}
    35e4:	0f 90       	pop	r0
    35e6:	0f 90       	pop	r0
    35e8:	0f 90       	pop	r0
    35ea:	cf 91       	pop	r28
    35ec:	df 91       	pop	r29
    35ee:	08 95       	ret

000035f0 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    35f0:	0f 93       	push	r16
    35f2:	1f 93       	push	r17
    35f4:	df 93       	push	r29
    35f6:	cf 93       	push	r28
    35f8:	00 d0       	rcall	.+0      	; 0x35fa <UART_receiveString+0xa>
    35fa:	0f 92       	push	r0
    35fc:	cd b7       	in	r28, 0x3d	; 61
    35fe:	de b7       	in	r29, 0x3e	; 62
    3600:	9b 83       	std	Y+3, r25	; 0x03
    3602:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3604:	19 82       	std	Y+1, r1	; 0x01
    3606:	0f c0       	rjmp	.+30     	; 0x3626 <UART_receiveString+0x36>
	/* Receive the whole string until the '#' */
		while(Str[i] != '#')//'#'null ana 4mlha3lshan 2ra elstring
		{
			i++;
    3608:	89 81       	ldd	r24, Y+1	; 0x01
    360a:	8f 5f       	subi	r24, 0xFF	; 255
    360c:	89 83       	std	Y+1, r24	; 0x01
			Str[i] = UART_recieveByte();
    360e:	89 81       	ldd	r24, Y+1	; 0x01
    3610:	28 2f       	mov	r18, r24
    3612:	30 e0       	ldi	r19, 0x00	; 0
    3614:	8a 81       	ldd	r24, Y+2	; 0x02
    3616:	9b 81       	ldd	r25, Y+3	; 0x03
    3618:	8c 01       	movw	r16, r24
    361a:	02 0f       	add	r16, r18
    361c:	13 1f       	adc	r17, r19
    361e:	0e 94 c0 1a 	call	0x3580	; 0x3580 <UART_recieveByte>
    3622:	f8 01       	movw	r30, r16
    3624:	80 83       	st	Z, r24
 */
void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	/* Receive the whole string until the '#' */
		while(Str[i] != '#')//'#'null ana 4mlha3lshan 2ra elstring
    3626:	89 81       	ldd	r24, Y+1	; 0x01
    3628:	28 2f       	mov	r18, r24
    362a:	30 e0       	ldi	r19, 0x00	; 0
    362c:	8a 81       	ldd	r24, Y+2	; 0x02
    362e:	9b 81       	ldd	r25, Y+3	; 0x03
    3630:	fc 01       	movw	r30, r24
    3632:	e2 0f       	add	r30, r18
    3634:	f3 1f       	adc	r31, r19
    3636:	80 81       	ld	r24, Z
    3638:	83 32       	cpi	r24, 0x23	; 35
    363a:	31 f7       	brne	.-52     	; 0x3608 <UART_receiveString+0x18>
			i++;
			Str[i] = UART_recieveByte();
		}

		/* After receiving the whole string plus the '#', replace the '#' with '\0' */
		Str[i] = '\0';
    363c:	89 81       	ldd	r24, Y+1	; 0x01
    363e:	28 2f       	mov	r18, r24
    3640:	30 e0       	ldi	r19, 0x00	; 0
    3642:	8a 81       	ldd	r24, Y+2	; 0x02
    3644:	9b 81       	ldd	r25, Y+3	; 0x03
    3646:	fc 01       	movw	r30, r24
    3648:	e2 0f       	add	r30, r18
    364a:	f3 1f       	adc	r31, r19
    364c:	10 82       	st	Z, r1
}
    364e:	0f 90       	pop	r0
    3650:	0f 90       	pop	r0
    3652:	0f 90       	pop	r0
    3654:	cf 91       	pop	r28
    3656:	df 91       	pop	r29
    3658:	1f 91       	pop	r17
    365a:	0f 91       	pop	r16
    365c:	08 95       	ret

0000365e <__udivmodsi4>:
    365e:	a1 e2       	ldi	r26, 0x21	; 33
    3660:	1a 2e       	mov	r1, r26
    3662:	aa 1b       	sub	r26, r26
    3664:	bb 1b       	sub	r27, r27
    3666:	fd 01       	movw	r30, r26
    3668:	0d c0       	rjmp	.+26     	; 0x3684 <__udivmodsi4_ep>

0000366a <__udivmodsi4_loop>:
    366a:	aa 1f       	adc	r26, r26
    366c:	bb 1f       	adc	r27, r27
    366e:	ee 1f       	adc	r30, r30
    3670:	ff 1f       	adc	r31, r31
    3672:	a2 17       	cp	r26, r18
    3674:	b3 07       	cpc	r27, r19
    3676:	e4 07       	cpc	r30, r20
    3678:	f5 07       	cpc	r31, r21
    367a:	20 f0       	brcs	.+8      	; 0x3684 <__udivmodsi4_ep>
    367c:	a2 1b       	sub	r26, r18
    367e:	b3 0b       	sbc	r27, r19
    3680:	e4 0b       	sbc	r30, r20
    3682:	f5 0b       	sbc	r31, r21

00003684 <__udivmodsi4_ep>:
    3684:	66 1f       	adc	r22, r22
    3686:	77 1f       	adc	r23, r23
    3688:	88 1f       	adc	r24, r24
    368a:	99 1f       	adc	r25, r25
    368c:	1a 94       	dec	r1
    368e:	69 f7       	brne	.-38     	; 0x366a <__udivmodsi4_loop>
    3690:	60 95       	com	r22
    3692:	70 95       	com	r23
    3694:	80 95       	com	r24
    3696:	90 95       	com	r25
    3698:	9b 01       	movw	r18, r22
    369a:	ac 01       	movw	r20, r24
    369c:	bd 01       	movw	r22, r26
    369e:	cf 01       	movw	r24, r30
    36a0:	08 95       	ret

000036a2 <__prologue_saves__>:
    36a2:	2f 92       	push	r2
    36a4:	3f 92       	push	r3
    36a6:	4f 92       	push	r4
    36a8:	5f 92       	push	r5
    36aa:	6f 92       	push	r6
    36ac:	7f 92       	push	r7
    36ae:	8f 92       	push	r8
    36b0:	9f 92       	push	r9
    36b2:	af 92       	push	r10
    36b4:	bf 92       	push	r11
    36b6:	cf 92       	push	r12
    36b8:	df 92       	push	r13
    36ba:	ef 92       	push	r14
    36bc:	ff 92       	push	r15
    36be:	0f 93       	push	r16
    36c0:	1f 93       	push	r17
    36c2:	cf 93       	push	r28
    36c4:	df 93       	push	r29
    36c6:	cd b7       	in	r28, 0x3d	; 61
    36c8:	de b7       	in	r29, 0x3e	; 62
    36ca:	ca 1b       	sub	r28, r26
    36cc:	db 0b       	sbc	r29, r27
    36ce:	0f b6       	in	r0, 0x3f	; 63
    36d0:	f8 94       	cli
    36d2:	de bf       	out	0x3e, r29	; 62
    36d4:	0f be       	out	0x3f, r0	; 63
    36d6:	cd bf       	out	0x3d, r28	; 61
    36d8:	09 94       	ijmp

000036da <__epilogue_restores__>:
    36da:	2a 88       	ldd	r2, Y+18	; 0x12
    36dc:	39 88       	ldd	r3, Y+17	; 0x11
    36de:	48 88       	ldd	r4, Y+16	; 0x10
    36e0:	5f 84       	ldd	r5, Y+15	; 0x0f
    36e2:	6e 84       	ldd	r6, Y+14	; 0x0e
    36e4:	7d 84       	ldd	r7, Y+13	; 0x0d
    36e6:	8c 84       	ldd	r8, Y+12	; 0x0c
    36e8:	9b 84       	ldd	r9, Y+11	; 0x0b
    36ea:	aa 84       	ldd	r10, Y+10	; 0x0a
    36ec:	b9 84       	ldd	r11, Y+9	; 0x09
    36ee:	c8 84       	ldd	r12, Y+8	; 0x08
    36f0:	df 80       	ldd	r13, Y+7	; 0x07
    36f2:	ee 80       	ldd	r14, Y+6	; 0x06
    36f4:	fd 80       	ldd	r15, Y+5	; 0x05
    36f6:	0c 81       	ldd	r16, Y+4	; 0x04
    36f8:	1b 81       	ldd	r17, Y+3	; 0x03
    36fa:	aa 81       	ldd	r26, Y+2	; 0x02
    36fc:	b9 81       	ldd	r27, Y+1	; 0x01
    36fe:	ce 0f       	add	r28, r30
    3700:	d1 1d       	adc	r29, r1
    3702:	0f b6       	in	r0, 0x3f	; 63
    3704:	f8 94       	cli
    3706:	de bf       	out	0x3e, r29	; 62
    3708:	0f be       	out	0x3f, r0	; 63
    370a:	cd bf       	out	0x3d, r28	; 61
    370c:	ed 01       	movw	r28, r26
    370e:	08 95       	ret

00003710 <itoa>:
    3710:	fb 01       	movw	r30, r22
    3712:	9f 01       	movw	r18, r30
    3714:	e8 94       	clt
    3716:	42 30       	cpi	r20, 0x02	; 2
    3718:	c4 f0       	brlt	.+48     	; 0x374a <itoa+0x3a>
    371a:	45 32       	cpi	r20, 0x25	; 37
    371c:	b4 f4       	brge	.+44     	; 0x374a <itoa+0x3a>
    371e:	4a 30       	cpi	r20, 0x0A	; 10
    3720:	29 f4       	brne	.+10     	; 0x372c <itoa+0x1c>
    3722:	97 fb       	bst	r25, 7
    3724:	1e f4       	brtc	.+6      	; 0x372c <itoa+0x1c>
    3726:	90 95       	com	r25
    3728:	81 95       	neg	r24
    372a:	9f 4f       	sbci	r25, 0xFF	; 255
    372c:	64 2f       	mov	r22, r20
    372e:	77 27       	eor	r23, r23
    3730:	0e 94 b9 1b 	call	0x3772	; 0x3772 <__udivmodhi4>
    3734:	80 5d       	subi	r24, 0xD0	; 208
    3736:	8a 33       	cpi	r24, 0x3A	; 58
    3738:	0c f0       	brlt	.+2      	; 0x373c <itoa+0x2c>
    373a:	89 5d       	subi	r24, 0xD9	; 217
    373c:	81 93       	st	Z+, r24
    373e:	cb 01       	movw	r24, r22
    3740:	00 97       	sbiw	r24, 0x00	; 0
    3742:	a1 f7       	brne	.-24     	; 0x372c <itoa+0x1c>
    3744:	16 f4       	brtc	.+4      	; 0x374a <itoa+0x3a>
    3746:	5d e2       	ldi	r21, 0x2D	; 45
    3748:	51 93       	st	Z+, r21
    374a:	10 82       	st	Z, r1
    374c:	c9 01       	movw	r24, r18
    374e:	0c 94 a9 1b 	jmp	0x3752	; 0x3752 <strrev>

00003752 <strrev>:
    3752:	dc 01       	movw	r26, r24
    3754:	fc 01       	movw	r30, r24
    3756:	67 2f       	mov	r22, r23
    3758:	71 91       	ld	r23, Z+
    375a:	77 23       	and	r23, r23
    375c:	e1 f7       	brne	.-8      	; 0x3756 <strrev+0x4>
    375e:	32 97       	sbiw	r30, 0x02	; 2
    3760:	04 c0       	rjmp	.+8      	; 0x376a <strrev+0x18>
    3762:	7c 91       	ld	r23, X
    3764:	6d 93       	st	X+, r22
    3766:	70 83       	st	Z, r23
    3768:	62 91       	ld	r22, -Z
    376a:	ae 17       	cp	r26, r30
    376c:	bf 07       	cpc	r27, r31
    376e:	c8 f3       	brcs	.-14     	; 0x3762 <strrev+0x10>
    3770:	08 95       	ret

00003772 <__udivmodhi4>:
    3772:	aa 1b       	sub	r26, r26
    3774:	bb 1b       	sub	r27, r27
    3776:	51 e1       	ldi	r21, 0x11	; 17
    3778:	07 c0       	rjmp	.+14     	; 0x3788 <__udivmodhi4_ep>

0000377a <__udivmodhi4_loop>:
    377a:	aa 1f       	adc	r26, r26
    377c:	bb 1f       	adc	r27, r27
    377e:	a6 17       	cp	r26, r22
    3780:	b7 07       	cpc	r27, r23
    3782:	10 f0       	brcs	.+4      	; 0x3788 <__udivmodhi4_ep>
    3784:	a6 1b       	sub	r26, r22
    3786:	b7 0b       	sbc	r27, r23

00003788 <__udivmodhi4_ep>:
    3788:	88 1f       	adc	r24, r24
    378a:	99 1f       	adc	r25, r25
    378c:	5a 95       	dec	r21
    378e:	a9 f7       	brne	.-22     	; 0x377a <__udivmodhi4_loop>
    3790:	80 95       	com	r24
    3792:	90 95       	com	r25
    3794:	bc 01       	movw	r22, r24
    3796:	cd 01       	movw	r24, r26
    3798:	08 95       	ret

0000379a <_exit>:
    379a:	f8 94       	cli

0000379c <__stop_program>:
    379c:	ff cf       	rjmp	.-2      	; 0x379c <__stop_program>
